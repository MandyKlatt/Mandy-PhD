#                 summarise_all(mean),
#               method = "lm",
#               se = TRUE, color = "black",
#               size = 1) + # Overall regression
#   scale_color_viridis_d(option = "A",
#                         end = 0.8) +
#   scale_linetype_manual(values = c(1, 6)) +
#   labs(x = "Time (in Seconds)",
#        y = "",
#        subtitle = "") +
#   theme_apa() +
#   theme(axis.title.y = element_blank()) +
#   facet_grid(cols = vars(time_span),
#              scales = "free_x")
ggsave(filename = "plots_publication/lm_plot.png",
plot = lm_plot,
width = 20,
height = 12,
units = "cm")
df_regression <-
main_single_hr %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std","heart_rate") %>%
distinct() %>%
mutate(time = time / 60) %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
)
)
fix_models <-
df_regression %>%
split(.$Phase) %>%
map( ~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .)) %>%
map(
~ coef(.) %>%
tibble::as_tibble(.,
rownames = "name") %>%
transmute(
type = if_else(str_detect(name,
":"),
true = "slope",
false = "intercept"),
id = str_remove_all(name,
"[^[:digit:]]"),
value = value
),
) %>%
bind_rows(.id = "Phase") %>%
pivot_wider(names_from = type,
values_from = value)
p.values_slope <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$slope,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_slope")
p.values_intercept <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$intercept,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_intercept")
sd_mean <-
fix_models %>%
group_by(Phase) %>%
dplyr::summarise(
mean_slope = mean(slope),
sd_slope = sd(slope),
mean_intercept = mean(intercept),
sd_intercept = sd(intercept)
)
table_data <-
right_join(x = sd_mean,
y = p.values_intercept,
by = "Phase") %>%
right_join(x = .,
y = p.values_slope,
by = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(mean_intercept, digits = 3),
`SD(Intercept)` = round(sd_intercept, digits = 3),
`p-Value (Intercept)` = p.value_intercept,
`Mean(Slope)` = round(mean_slope, digits = 3),
`SD(Slope)` = round(sd_slope,digits = 3),
`p-Value (Slope)` = p.value_slope,
) %>%
arrange(Phase)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
knitr::kable(.)
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
example <- list(mod = mods$preparation, data = graph_data$preparation)
list(`Preparation Phase` = list(name = "Pre-Teaching ", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Phase", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post Teaching Phase",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Phase",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Phase",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 6) +
theme_apa()
)
df_ttest <-
df_regression %>%
group_by(ID, time_span) %>%
summarise(mean_heart_rate = mean(heart_rate_std)) %>%
ungroup()
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "preparation"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "preparation"],
pooled = T)
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "post"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "post"],
pooled = T)
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "interview"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "interview"],
pooled = T)
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "end"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "end"],
pooled = T)
# Data wrangling - preparing data for ANOVA
df_anova <-
main_single_hr %>%
filter(time_span != "overall") %>%
dplyr::select("ID",
"time_span",
"heart_rate_std") %>%
mutate(time_span = fct_recode(time_span,
"Pre-teaching interval" = "preparation",
"Teaching interval" = "teaching",
"Post-teaching interval" = "post",
"Interview interval" = "interview",
"End interval" = "end"
),
time_span = factor(time_span,
levels = c("Pre-teaching interval",
"Teaching interval",
"Post-teaching interval",
"Interview interval",
"End interval"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr_std = mean(heart_rate_std, na.rm = TRUE))
# Counting participants in individual phases
table(df_anova['time_span'])
# descriptive analysis
describeBy(df_anova$mean_hr_std,
df_anova$time_span)
# Visualization
bxp <- ggboxplot(df_anova, x = "time_span", y = "mean_hr_std", add = "point")
bxp
# Check for outliers
outliers <-
df_anova %>%
group_by(time_span) %>%
identify_outliers(mean_hr_std)
# check for normality assumption --> can be checked by computing Shapiro-Wilk test for each time point. If the data is normally distributed, the p-value should be greater than 0.05
norm_assump <-
df_anova %>%
group_by(time_span) %>%
shapiro_test(mean_hr_std)
# QQ plot draws the correlation between a given data and the normal distribution.
plot <-
ggqqplot(df_anova, "mean_hr_std", facet.by = "time_span")
df_anova_subset <- subset(df_anova, select = c(time_span, mean_hr_std))
# anova
df_anova_phase <-
aov(df_anova_subset$mean_hr_std ~ df_anova_subset$time_span)
summary(df_anova_phase)
# effect size for ANOVA
DescTools::EtaSq(df_anova_phase)
f = sqrt (0.7202944/ (1-0.7202944))
# planned constrasts
model <- aov(mean_hr_std ~ time_span, data = df_anova_subset)
summary (model)
contrast1 <- c(-1, 1, 0, 0, 0)
contrast2 <- c(0, 1, -1, 0, 0)
contrast3 <- c(0, 1, 0, -1, 0)
contrast4 <- c(0, 1, 0, 0, -1)
contrasts(df_anova_subset$time_span) <- cbind(contrast1,
contrast2,
contrast3,
contrast4)
model2 <- aov(mean_hr_std ~ time_span, data = df_anova_subset)
(model2)
summary.lm(model2,
split = list (time_span = list ("Teaching interval vs. Pre-teaching interval" = 1,
"Teaching interval vs. Post-teaching interval" = 2,
"Teaching interval vs. Interview interval" = 3,
"Teaching interval vs. End interval" = 4
)
)
)
# effect size of pairwise comparisons
library(dplyr)
library(rstatix)
effect_size_pwc <-
df_anova_subset %>%
cohens_d(mean_hr_std ~ time_span) %>%
as.data.frame()
df_ttest_slope <-
fix_models %>%
group_by(id, Phase) %>%
summarise(mean_slope = mean(slope)) %>%
ungroup()
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "Interview Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "Interview Phase"],
pooled = T)
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
pooled = T)
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Interview Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Interview Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
pooled = T)
main %>%
filter(time_span == "overall") %>%
group_by(ID) %>%
select(ID,
teaching_experience,
age) -> teach_gender
cor(cor_teach_gender$teaching_experience,
cor_teach_gender$age,
method = c("pearson")
) -> cor_teach_gender
df_multi <-
main %>%
select("ID", "disruption_factor", "confidence_factor", "teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarise(disruption_factor = mean(disruption_factor, na.rm = T),
confidence_factor = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID)) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id")
fit_pre_1 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience)
summary(fit_pre_1)
fit_pre_2 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + disruption_factor)
summary(fit_pre_2)
summary(fit_pre_1)$r.squared - summary(fit_pre_2)$r.squared
fit_pre_3 <-
df_multi %>%
mutate(teaching_experience = log(teaching_experience + 1)) %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence_factor)
summary(fit_pre_3)
summary(fit_pre_1)$r.squared - summary(fit_pre_2)$r.squared - summary(fit_pre_3)$r.squared
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence + disruption)
View(df_multi)
View(df_multi)
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence_factor + disruption_factor)
summary(fit_pre_4)
stargazer::stargazer(fit_pre_1, fit_pre_2,fit_pre_3, fit_pre_4, fit_pre_5,
type = "html",
caption = "Pre Teaching Phase",
dep.var.labels = "Slope",
# order = c(1, 2, 3),
# covariate.labels = c("Disruption Factor",
#                      "Confidence Factor",
#                      "Teaching Experience"),
keep.stat = c("n","rsq","adj.rsq")
)
stargazer::stargazer(fit_pre_1, fit_pre_2,fit_pre_3, fit_pre_4,
type = "html",
caption = "Pre Teaching Phase",
dep.var.labels = "Slope",
# order = c(1, 2, 3),
# covariate.labels = c("Disruption Factor",
#                      "Confidence Factor",
#                      "Teaching Experience"),
keep.stat = c("n","rsq","adj.rsq")
)
stargazer::stargazer(fit_pre_1, fit_pre_2,fit_pre_3, fit_pre_4,
type = "latex",
caption = "Pre Teaching Phase",
dep.var.labels = "Slope",
# order = c(1, 2, 3),
# covariate.labels = c("Disruption Factor",
#                      "Confidence Factor",
#                      "Teaching Experience"),
keep.stat = c("n","rsq","adj.rsq")
)
?tlgrm
?tlmgr
library(tinytex)
?tlmgr
tlmgr::tlmgr_install(pkgs = 'pdflscape')
tinytex::tlmgr_install(pkgs = 'pdflscape')
View(df_desc_hr)
View(desc_hr_phases)
View(desc_hr_phases_std)
knitr::opts_chunk$set(echo = FALSE, fig.width = 8, fig.height = 4, cache = TRUE)
desc_hr_phases_std
desc_hr_phases
df_desc_hr <- desc_hr_phases |>
mutate(across(everything(),
~ paste(.,
desc_hr_phases_std[[cur_column()]],
sep = "/")
)
)
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis,
stargazer,
papaja,
grid,
purrr)
df_desc_hr <- desc_hr_phases |>
mutate(across(everything(),
~ paste(.,
desc_hr_phases_std[[cur_column()]],
sep = "/")
)
)
View(df_desc_hr)
View(table_data)
pcor_post
cor_pre
View(cor_pre)
knitr::opts_chunk$set(
echo = TRUE,
error = FALSE,
message = FALSE,
warning = FALSE
)
df_multi <-
main %>%
select("ID", "disruption_factor", "confidence_factor", "teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarise(disruption_factor = mean(disruption_factor, na.rm = T),
confidence_factor = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID)) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id")
fit_pre_1 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience)
fit_pre_1 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %>%
lm(slope ~ teaching_experience)
fit_pre_1 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %>%
lm(slope ~ teaching_experience)
fit_pre_1 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %>%
lm(slope ~ teaching_experience,
data = .)
summary(fit_pre_1)
# multiple bpm values (merged data frame for multiple regression with multiple measurement points)
main_multiple_hr <-
left_join(main_single_hr,
df_merge,
by = "ID")
main_multiple_hr %>%
group_by(ID, time_span) %>%
summarise(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
## loop for regression model
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache) %>%
lm.beta()
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache) %>%
lm.beta()
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache) %>%
lm.beta()
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ teaching_experience + disruption_factor + confidence_factor,
data = cache) %>%
lm.beta()
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
summary(regr_preparation1)
summary(regr_end2)
citation('ggplot2')
View(desc_hr_phases_std)
View(df_heart_rate)
View(df_merge)
