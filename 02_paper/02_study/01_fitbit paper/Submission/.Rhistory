level = 0.95) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
scale_y_continuous(breaks = seq(from = -1, to = 1, by = 0.5)) +
labs(x = "Time (in Minutes)",
y = "Mean Standardized Heart Rate",
caption = expression(paste(italic("Note: "),
"The shadow around the line represents the 95% confidence interval."
)
)
) +
theme_apa() +
theme(plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 0)) +
facet_grid(cols = vars(time_span),
scales = "free_x")
# lm_plot_phases <-
#   main %>%
#   filter(time_span != "overall") %>%
#   dplyr::select("ID", "time_span", "time", "heart_rate_std") %>%
#   mutate(time_span = factor(time_span,
#                             levels = c("preparation","teaching","post","interview","end"),
#                             labels = c("Pre-teaching\nphase", "Teaching\nphase", "Post-teaching\nphase", "Interview\nphase", "End\nphase"))) %>%
#   ggplot(aes(x = time,
#              y = heart_rate_std,
#              color = ID)
#          ) +
#   geom_smooth(method = "lm",
#               se = TRUE,
#               aes(group = ID),
#               size = 0.5) + # Regression per ID
#   geom_smooth(data = . %>%
#                 group_by(time_span) %>%
#                 summarise_all(mean),
#               method = "lm",
#               se = TRUE, color = "black",
#               size = 1) + # Overall regression
#   scale_color_viridis_d(option = "A",
#                         end = 0.8) +
#   scale_linetype_manual(values = c(1, 6)) +
#   labs(x = "Time (in Seconds)",
#        y = "",
#        subtitle = "") +
#   theme_apa() +
#   theme(axis.title.y = element_blank()) +
#   facet_grid(cols = vars(time_span),
#              scales = "free_x")
ggsave(filename = "plots_publication/lm_plot.png",
plot = lm_plot,
width = 20,
height = 12,
units = "cm")
df_regression <-
main_single_hr %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std","heart_rate") %>%
distinct() %>%
mutate(time = time / 60) %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
)
)
fix_models <-
df_regression %>%
split(.$Phase) %>%
map( ~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .)) %>%
map(
~ coef(.) %>%
tibble::as_tibble(.,
rownames = "name") %>%
transmute(
type = if_else(str_detect(name,
":"),
true = "slope",
false = "intercept"),
id = str_remove_all(name,
"[^[:digit:]]"),
value = value
),
) %>%
bind_rows(.id = "Phase") %>%
pivot_wider(names_from = type,
values_from = value)
p.values_slope <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$slope,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_slope")
p.values_intercept <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$intercept,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_intercept")
sd_mean <-
fix_models %>%
group_by(Phase) %>%
dplyr::summarise(
mean_slope = mean(slope),
sd_slope = sd(slope),
mean_intercept = mean(intercept),
sd_intercept = sd(intercept)
)
table_data <-
right_join(x = sd_mean,
y = p.values_intercept,
by = "Phase") %>%
right_join(x = .,
y = p.values_slope,
by = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(mean_intercept, digits = 3),
`SD(Intercept)` = round(sd_intercept, digits = 3),
`p-Value (Intercept)` = p.value_intercept,
`Mean(Slope)` = round(mean_slope, digits = 3),
`SD(Slope)` = round(sd_slope,digits = 3),
`p-Value (Slope)` = p.value_slope,
) %>%
arrange(Phase)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
knitr::kable(.)
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
example <- list(mod = mods$preparation, data = graph_data$preparation)
list(`Preparation Phase` = list(name = "Pre-Teaching ", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Phase", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post Teaching Phase",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Phase",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Phase",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 6) +
theme_apa()
)
df_ttest <-
df_regression %>%
group_by(ID, time_span) %>%
summarise(mean_heart_rate = mean(heart_rate_std)) %>%
ungroup()
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "preparation"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "preparation"],
pooled = T)
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "post"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "post"],
pooled = T)
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "interview"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "interview"],
pooled = T)
df_ttest %$%
t.test(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "end"],
paired = T)
df_ttest %$%
CohenD(x = .$mean_heart_rate[.$time_span == "teaching"],
y = .$mean_heart_rate[.$time_span == "end"],
pooled = T)
# Data wrangling - preparing data for ANOVA
df_anova <-
main_single_hr %>%
filter(time_span != "overall") %>%
dplyr::select("ID",
"time_span",
"heart_rate_std") %>%
mutate(time_span = fct_recode(time_span,
"Pre-teaching interval" = "preparation",
"Teaching interval" = "teaching",
"Post-teaching interval" = "post",
"Interview interval" = "interview",
"End interval" = "end"
),
time_span = factor(time_span,
levels = c("Pre-teaching interval",
"Teaching interval",
"Post-teaching interval",
"Interview interval",
"End interval"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr_std = mean(heart_rate_std, na.rm = TRUE))
# Counting participants in individual phases
table(df_anova['time_span'])
# descriptive analysis
describeBy(df_anova$mean_hr_std,
df_anova$time_span)
# Visualization
bxp <- ggboxplot(df_anova, x = "time_span", y = "mean_hr_std", add = "point")
bxp
# Check for outliers
outliers <-
df_anova %>%
group_by(time_span) %>%
identify_outliers(mean_hr_std)
# check for normality assumption --> can be checked by computing Shapiro-Wilk test for each time point. If the data is normally distributed, the p-value should be greater than 0.05
norm_assump <-
df_anova %>%
group_by(time_span) %>%
shapiro_test(mean_hr_std)
# QQ plot draws the correlation between a given data and the normal distribution.
plot <-
ggqqplot(df_anova, "mean_hr_std", facet.by = "time_span")
df_anova_subset <- subset(df_anova, select = c(time_span, mean_hr_std))
# anova
df_anova_phase <-
aov(df_anova_subset$mean_hr_std ~ df_anova_subset$time_span)
summary(df_anova_phase)
# effect size for ANOVA
DescTools::EtaSq(df_anova_phase)
f = sqrt (0.7202944/ (1-0.7202944))
# planned constrasts
model <- aov(mean_hr_std ~ time_span, data = df_anova_subset)
summary (model)
contrast1 <- c(-1, 1, 0, 0, 0)
contrast2 <- c(0, 1, -1, 0, 0)
contrast3 <- c(0, 1, 0, -1, 0)
contrast4 <- c(0, 1, 0, 0, -1)
contrasts(df_anova_subset$time_span) <- cbind(contrast1,
contrast2,
contrast3,
contrast4)
model2 <- aov(mean_hr_std ~ time_span, data = df_anova_subset)
summary(model2)
summary.lm(model2,
split = list (time_span = list ("Teaching interval vs. Pre-teaching interval" = 1,
"Teaching interval vs. Post-teaching interval" = 2,
"Teaching interval vs. Interview interval" = 3,
"Teaching interval vs. End interval" = 4
)
)
)
# effect size of pairwise comparisons
library(dplyr)
library(rstatix)
effect_size_pwc <-
df_anova_subset %>%
cohens_d(mean_hr_std ~ time_span) %>%
as.data.frame()
df_ttest_slope <-
fix_models %>%
group_by(id, Phase) %>%
summarise(mean_slope = mean(slope)) %>%
ungroup()
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "Interview Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "Interview Phase"],
pooled = T)
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Teaching Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
pooled = T)
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Interview Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Interview Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
pooled = T)
main %>%
filter(time_span == "overall") %>%
group_by(ID) %>%
select(ID,
teaching_experience,
age) -> teach_gender
cor(cor_teach_gender$teaching_experience,
cor_teach_gender$age,
method = c("pearson")
) -> cor_teach_gender
cor(teach_gender$teaching_experience,
teach_gender$age,
method = c("pearson")
) -> cor_teach_gender
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_pre
cor.test(cor_pre$heart_rate_m, cor_pre$confidence_factor_m)
main %>%
filter(time_span == "teaching") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_teaching
View(pcor_teaching)
main %>%
filter(time_span == "post") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_post
main %>%
filter(time_span == "interview") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_interview
main %>%
filter(time_span == "end") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_end
cor.test(cor_pre$heart_rate_m, cor_pre$confidence_factor_m)
pcor_teaching
knitr::opts_chunk$set(
echo = TRUE,
error = FALSE,
message = FALSE,
warning = FALSE
)
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_pre
cor.test(cor_pre$heart_rate_m, cor_pre$confidence_factor_m)
main %>%
filter(time_span == "teaching") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_teaching
View(pcor_teaching)
pcor_teaching
x <- rep(70, times = 7)
y <- c(5, 7, 4, 9, 7, 5, 6)
z <- rep(mean(y), times = 7)
cor(x, y)
x <- c(rep(70, times = 7), 80)
cor(x, y)
y <- c(5, 7, 4, 9, 7, 5, 6, 12)
cor(x, y)
z <- rep(mean(y), times = 8)
cor(x, z)
x <- c(rep(70, times = 7), rep(80, times = 7))
y <- c(5, 7, 4, 9, 7, 5, 6, 6, 8, 4, 8, 7, 6, 6)
