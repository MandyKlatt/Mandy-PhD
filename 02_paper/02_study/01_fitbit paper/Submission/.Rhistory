distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_pre
# teaching interval
main %>%
filter(time_span == "teaching") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_teaching
# post-teaching interval
main %>%
filter(time_span == "post") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_post
# interview interval
main %>%
filter(time_span == "interview") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_interview
# end interval
main %>%
filter(time_span == "end") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_end
# multiple bpm values (merged data frame for multiple regression with multiple measurement points)
main_multiple_hr <-
left_join(main_single_hr,
df_merge,
by = "ID")
main_multiple_hr %>%
group_by(ID, time_span) %>%
summarise(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
# ## using lavaan package to get std. regression coefficients
# MLRModel <- 'heart_rate ~ teaching_experience
#              heart_rate ~ 1'
#
# output <- sem(model = MLRModel, data = data_regression_mean)
# summary(output, standardized = TRUE)
## loop for regression model
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache) %>%
lm.beta()
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache) %>%
lm.beta()
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache) %>%
lm.beta()
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ teaching_experience + disruption_factor + confidence_factor,
data = cache) %>%
lm.beta()
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
summary(regr_preparation1)
summary(regr_preparation2)
summary(regr_preparation3)
summary(regr_preparation4)
summary(regr_teaching1)
summary(regr_teaching2)
summary(regr_teaching3)
summary(regr_teaching4)
summary(regr_post1)
summary(regr_post2)
summary(regr_post3)
summary(regr_post4)
summary(regr_interview1)
summary(regr_interview2)
summary(regr_interview3)
summary(regr_interview4)
summary(regr_end1)
summary(regr_end2)
summary(regr_end3)
summary(regr_end4)
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
example <- list(mod = mods$preparation, data = graph_data$preparation)
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
scale_x_continuous(breaks = c(0, 5, 10)) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 6) +
theme_apa()
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
preparation_plot
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval", mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval", mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval", mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,  # Use the appropriate 'x' value (like 'work_hrs' in the original)
y = heart_rate_std,  # Use the appropriate 'y' value (like 'inc')
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),  # Line for fitted values from the model
color = "blue",  # Adjust color for clarity
size = 1) +  # Line thickness
geom_point(alpha = 0.5, size = 0.5) +  # Points with transparency and size
facet_wrap(~ ID, nrow = 6) +  # Arrange plots by 'ID'
xlab('Time (in Seconds)') +  # X-axis label (similar to 'Arbeitsstunden pro Woche')
ylab('Heart Rate (Standardized)') +  # Y-axis label (similar to 'Nettoeinkommen')
scale_x_continuous(breaks = c(0, 5, 10)) +  # Customize x-axis breaks as needed
labs(title = .$name) +  # Title for each plot based on phase name
theme_bw()  # Use a clean theme
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
preparation_plot
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 25,
units = "cm")
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
scale_x_continuous(breaks = c(0, 5, 10)) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 1) +
theme_apa()
)
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 25,
units = "cm")
preparation_plot <- plot_list_appendix$`Preparation Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 25,
units = "cm")
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
scale_x_continuous(breaks = c(0, 5, 10)) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 8) +
theme_apa()
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval", mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval", mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval", mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,  # Use the appropriate 'x' value (like 'work_hrs' in the original)
y = heart_rate_std,  # Use the appropriate 'y' value (like 'inc')
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),  # Line for fitted values from the model
color = "blue",  # Adjust color for clarity
size = 1) +  # Line thickness
geom_point(alpha = 0.5, size = 0.5) +  # Points with transparency and size
facet_wrap(~ ID, nrow = 6) +  # Arrange plots by 'ID'
xlab('Time (in Seconds)') +  # X-axis label (similar to 'Arbeitsstunden pro Woche')
ylab('Heart Rate (Standardized)') +  # Y-axis label (similar to 'Nettoeinkommen')
scale_x_continuous(breaks = c(0, 5, 10)) +  # Customize x-axis breaks as needed
labs(title = .$name) +  # Title for each plot based on phase name
theme_apa()  # Use a clean theme
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
preparation_plot <- plot_list_appendix$`Preparation Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval", mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval", mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval", mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,  # Use the appropriate 'x' value (like 'work_hrs' in the original)
y = heart_rate_std,  # Use the appropriate 'y' value (like 'inc')
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),  # Line for fitted values from the model
color = "blue",  # Adjust color for clarity
size = 1) +  # Line thickness
geom_point(alpha = 0.5, size = 0.5) +  # Points with transparency and size
facet_wrap(~ ID, nrow = 6) +  # Arrange plots by 'ID'
xlab('Time (in Seconds)') +  # X-axis label (similar to 'Arbeitsstunden pro Woche')
ylab('Heart Rate (Standardized)') +  # Y-axis label (similar to 'Nettoeinkommen')
scale_x_continuous(breaks = c(0, 5, 10)) +  # Customize x-axis breaks as needed
labs(title = .$name) +  # Title for each plot based on phase name
theme_apa()  # Use a clean theme
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval", mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval", mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval", mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,  # Use the appropriate 'x' value (like 'work_hrs' in the original)
y = heart_rate_std,  # Use the appropriate 'y' value (like 'inc')
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),  # Line for fitted values from the model
color = "blue",  # Adjust color for clarity
size = 1) +  # Line thickness
geom_point(alpha = 0.5, size = 0.5) +  # Points with transparency and size
facet_wrap(~ ID, nrow = 6) +  # Arrange plots by 'ID'
xlab('Time (in Seconds)') +  # X-axis label (similar to 'Arbeitsstunden pro Woche')
ylab('Heart Rate (Standardized)') +  # Y-axis label (similar to 'Nettoeinkommen')
scale_x_continuous(breaks = c(0, 5, 10)) +  # Customize x-axis breaks as needed
labs(title = .$name) +  # Title for each plot based on phase name
theme_bw()  # Use a clean theme
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval", mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval", mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval", mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,  # Use the appropriate 'x' value (like 'work_hrs' in the original)
y = heart_rate_std,  # Use the appropriate 'y' value (like 'inc')
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),  # Line for fitted values from the model
color = "blue",  # Adjust color for clarity
size = 1) +  # Line thickness
geom_point(alpha = 0.5, size = 0.5) +  # Points with transparency and size
facet_wrap(~ ID, nrow = 8) +  # Arrange plots by 'ID'
xlab('Time (in Seconds)') +  # X-axis label (similar to 'Arbeitsstunden pro Woche')
ylab('Heart Rate (Standardized)') +  # Y-axis label (similar to 'Nettoeinkommen')
scale_x_continuous(breaks = c(0, 5, 10)) +  # Customize x-axis breaks as needed
labs(title = .$name) +  # Title for each plot based on phase name
theme_bw()  # Use a clean theme
)
preparation_plot <- plot_list_appendix$`Preparation Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
example <- list(mod = mods$preparation, data = graph_data$preparation)
plot_list_appendix <- list(
`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval", mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval", mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval", mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,  # Use the appropriate 'x' value (like 'work_hrs' in the original)
y = heart_rate_std,  # Use the appropriate 'y' value (like 'inc')
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),  # Line for fitted values from the model
color = "blue",  # Adjust color for clarity
size = 1) +  # Line thickness
geom_point(alpha = 0.5, size = 0.5) +  # Points with transparency and size
facet_wrap(~ ID, nrow = 8) +  # Arrange plots by 'ID'
xlab('Time (in Seconds)') +  # X-axis label (similar to 'Arbeitsstunden pro Woche')
ylab('Heart Rate (Standardized)') +  # Y-axis label (similar to 'Nettoeinkommen')
scale_x_continuous(breaks = c(0, 5, 10)) +  # Customize x-axis breaks as needed
labs(title = .$name) +  # Title for each plot based on phase name
theme_bw()  # Use a clean theme
)
#
# plot_list_appendix <- list(
#   `Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
#      `Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
#      `Post Teaching Phase` = list(name = "Post-Teaching Interval",mod = mods$post, data = graph_data$post),
#      `Interview Phase` = list(name = "Interview Interval",mod = mods$interview, data = graph_data$interview),
#      `End Phase` = list(name = "End Interval",mod = mods$end, data = graph_data$end)
#      ) %>%
#   map(~ ggplot(data = .$data,
#                mapping = aes(x = time,
#                              y = heart_rate_std,
#                              group = ID)) +
#         geom_line(mapping = aes(y = fitted(.$mod)),
#                   color = "blue",
#                   size = 1) +
#         geom_point(alpha = 0.5,
#                    size = 0.5) +
#         scale_x_continuous(breaks = c(0, 5, 10)) +
#         labs(title = .$name,
#              y = "Heart Rate (Standardized)",
#              x = "Time (in Seconds)") +
#         facet_wrap( ~ ID, nrow = 8) +
#         theme_apa()
#       )
preparation_plot <- plot_list_appendix$`Preparation Phase`
teaching_plot <- plot_list_appendix$`Teaching Phase`
post_teaching_plot <- plot_list_appendix$`Post Teaching Phase`
interview_plot <- plot_list_appendix$`Interview Phase`
end_plot <- plot_list_appendix$`End Phase`
ggsave(preparation_plot,
filename = "plots_publication/plot_preparation_appendix.pdf",
width = 25,
height = 30,
units = "cm")
ggsave(teaching_plot,
filename = "plots_publication/plot_teaching_appendix.pdf",
width = 25,
height = 30,
units = "cm")
ggsave(post_teaching_plot,
filename = "plots_publication/plot_post_teaching_appendix.pdf",
width = 25,
height = 30,
units = "cm")
ggsave(interview_plot,
filename = "plots_publication/plot_interview_appendix.pdf",
width = 25,
height = 30,
units = "cm")
ggsave(end_plot,
filename = "plots_publication/plot_end_appendix.pdf",
width = 25,
height = 30,
units = "cm")
