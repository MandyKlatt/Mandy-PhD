mutate(Interval = 'overall')
descrip_hr_phases_std <-  descrip_hr_phases_std |>
rename(`M HR` = `M heart rate in bpm`,
`SD HR` = `SD heart rate in bpm`,
`Min` = `Min heart rate in bpm`,
`Max` = `Max heart rate in bpm`,
Interval = time_span)
View(desc_hr_phases_std)
descrip_hr_phases <- main_single_hr |>
filter(!time_span %in% c("overall")) |>
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
descrip_hr_phases_std <- main_single_hr |>
filter(!time_span %in% c("overall")) |>
group_by(time_span) |>
summarise(N = n_distinct(ID),
"M heart rate std" = round(mean(heart_rate_std),
digits = 2),
"SD heart rate std" = round(sd(heart_rate_std),
digits = 2),
"Min heart rate std" = round(min(heart_rate_std),
digits = 2),
"Max heart rate std" = round(max(heart_rate_std),
digits = 2)
)
descrip_hr_overall <- main_single_hr |>
filter(time_span %in% c("overall")) |>
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
descrip_hr_overall_std <- main_single_hr |>
filter(time_span %in% c("overall")) |>
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
rating_table <-
df_rating |>
filter(!is.na(confidence_factor),
!is.na(disruption_factor)) |>
summarise(N = n_distinct(ID),
"M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confidence factor" = round(mean(confidence_factor),
digits = 2),
"SD confidence factor" = round(sd(confidence_factor),
digits = 2),
"Min confidence factor" = min(confidence_factor),
"Max confidence factor" = max(confidence_factor)
)
desc_hr_phases <- bind_rows(x = descrip_hr_overall,
y = descrip_hr_phases) |>
select(-N) |>
rename(`M HR` = `M heart rate in bpm`,
`SD HR` = `SD heart rate in bpm`,
`Min` = `Min heart rate in bpm`,
`Max` = `Max heart rate in bpm`,
Interval = time_span) |>
select(c(Interval,
`M HR`,
`SD HR`,
`Min`,
`Max`)
)
descrip_hr_overall_std <- descrip_hr_overall_std |>
rename(`M HR` = `M std heart rate in bpm`,
`SD HR` = `SD std heart rate in bpm`,
`Min` = `Min std heart rate in bpm`,
`Max` = `Max heart rate in bpm`,
) |>
mutate(Interval = 'overall')
descrip_hr_phases_std <-  descrip_hr_phases_std |>
rename(`M HR` = `M heart rate in bpm`,
`SD HR` = `SD heart rate in bpm`,
`Min` = `Min heart rate in bpm`,
`Max` = `Max heart rate in bpm`,
Interval = time_span)
View(descrip_hr_phases_std)
descrip_hr_phases_std <-  descrip_hr_phases_std |>
rename(`M HR` = `M heart rate std`,
`SD HR` = `SD heart rate std`,
`Min` = `Min heart rate std`,
`Max` = `Max heart rate std`,
Interval = time_span)
desc_hr_phases_std <- bind_rows(x = descrip_hr_overall_std,
y = descrip_hr_phases_std) |>
select(-N) |>
select(c(Interval,
`M HR`,
`SD HR`,
`Min`,
`Max`)
)
desc_hr_phases[1, 1] <- 'overall'
df_desc_hr <- desc_hr_phases |>
mutate(across(everything(),
~ paste(.,
desc_hr_phases_std[[cur_column()]],
sep = "/")
)
)
df_desc_hr$Interval <- c('Overall Course of 2h',
'Pre-teaching interval',
'Teaching interval',
'Post-teaching interval',
'Interview interval',
'End Interval')
tab_1 <- apa_table(df_desc_hr,
placement = 'h',
label = 'tab_1',
caption = 'Mean HR (M), standard deviations HR (SD), and range of teachersâ€™ HR over the course of the entire study and the five intervals (unstandardized in BPM/z-standardized)',
note = 'Please note that M and SD of the overall course vs. the individual intervals were not exactly 0 and 1 due to rounding differences.'
)
writeLines(tab_1, 'tab_1.tex')
## Overall Course Plot (std. vs. unstd.)
# data frame unstd. HR
df_heart_rate <-
main_single_hr %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate") %>%
distinct() %>%
mutate(type = "a. Heart Rate (in beats per minute)")
# data frame std. HR
df_heart_rate_std <-
main_single_hr %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate_std") %>%
distinct() %>%
transmute(ID,
time,
type = "b. Heart Rate (standardized)",
heart_rate = heart_rate_std
)
# bind data frames
bind_rows(df_heart_rate,
df_heart_rate_std
) -> df_hr_hr_std
# plotting
df_hr_hr_std %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.99) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "Time (in minutes)",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y") -> loess_plot_std_unstd
loess_plot_std_unstd
df_heart_rate <-
main_single_hr |>
mutate(time = time / 60) |>
filter(time_span == "overall") |>
dplyr::select("ID","time","heart_rate") |>
distinct() |>
mutate(type = "a. Heart Rate (in Beats per Minute)")
df_heart_rate_std <-
main_single_hr |>
mutate(time = time / 60) |>
filter(time_span == "overall") |>
dplyr::select("ID","time","heart_rate_std") |>
distinct() |>
transmute(ID,
time,
type = "b. Heart Rate (Standardized)",
heart_rate = heart_rate_std)
df_heart_rate |>
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.95
) +
scale_color_viridis_d(option = "A",
end = 0.8
) +
scale_linetype_manual(values = c(1, 6)
) +
scale_x_continuous(expand = c(0.01,0)
) +
labs(x = "",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y"
) +
theme(plot.margin = margin(r = 15,
t = 20,
b = 20)
) -> loess_hr
df_heart_rate_std |>
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.95) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0.01,0)) +
scale_y_continuous(expand = c(0, 0.25)) +
labs(x = "",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y"
) +
theme(plot.margin = margin(r = 30,
t = 20,
b = 20)
) -> loess_hr_std
loess_comp <- grid.arrange(loess_hr,
loess_hr_std,
ncol = 2)
loess_comp
loess_comp <- annotate_figure(p = loess_comp,
bottom = 'Time (in Minutes)')
ggsave(loess_comp,
filename = "plots_publication/loess_plot_std_unstd_new.pdf",
width = 20,
height = 15,
units = "cm")
bind_rows(df_heart_rate,
df_heart_rate_std
) -> df_hr_hr_std
View(df_hr_hr_std)
df_hr_hr_std %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.99) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "Time (in minutes)",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y") -> loess_plot_std_unstd
loess_plot_std_unstd
df_heart_rate |>
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.95
) +
scale_color_viridis_d(option = "A",
end = 0.8
) +
scale_linetype_manual(values = c(1, 6)
) +
scale_x_continuous(expand = c(0.01,0)
) +
labs(x = "",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y"
) +
theme(plot.margin = margin(r = 15,
t = 20,
b = 20)
) -> loess_hr
loess_hr
box_plot <-
main_single_hr |>
filter(time_span != "overall") |>
dplyr::select("ID",
"time_span",
"heart_rate_std") |>
mutate(time_span = fct_recode(time_span,
"Pre-teaching Interval" = "preparation",
"Teaching Interval" = "teaching",
"Post-teaching Interval" = "post",
"Interview Interval" = "interview",
"End Interval" = "end"
),
time_span = factor(time_span,
levels = c("Pre-teaching Interval",
"Teaching Interval",
"Post-teaching Interval",
"Interview Interval",
"End Interval"
),
labels = c("Pre-Teaching\nInterval",
"Teaching\nInterval",
"Post-Teaching\nInterval",
"Interview\nInterval",
"End\nInterval")
)
) |>
distinct() |>
group_by(ID, time_span) |>
summarise(mean_hr_std =
mean(heart_rate_std,
na.rm = TRUE)
) |>
ggplot(mapping = aes(x = time_span,
y = mean_hr_std
)
) +
geom_boxplot()+
scale_y_continuous(breaks=seq(-2, 2, 1),
limits=c(-2, 2)
) +
# geom_jitter(width = 0.2) +
theme_apa() +
theme(axis.text.x =
element_text(
color="black",
size = 12),
plot.caption = element_text(hjust = 0)
) +
labs(x = "",
y = "Mean Standardized Heart Rate",
caption = expression(
paste(italic("Note: N"),
"= 81 participants per interval. Fig. shows median (bold line), interquartile range (box) and outliers (dots)."
)
))
box_plot
ggsave(filename = "plots_publication/box_plot.png",
plot = box_plot,
width = 20,
height = 12,
units = "cm")
main_single_hr |>
filter(time_span != "overall") |>
dplyr::select("ID","time_span", "time","heart_rate_std") |>
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching\nInterval","(2) Teaching\nInterval","(3) Post-teaching\nInterval","(4) Interview\nInterval","(5) End\nInterval"))) |>
distinct() |>
group_by(time_span) |>
summarise(z_mean = mean(heart_rate_std),
z_sd = sd(heart_rate_std),
z_t = qt(p = 0.05 / 2,      # 0.01 KI
df = n() - 1,
lower.tail = F
),
z_error = z_sd / sqrt(n()),
lower = z_mean - z_t * z_error,
upper = z_mean + z_t * z_error,
) |>
ungroup() |>
ggplot(mapping = aes(x = factor(0),
y = z_mean)) +
geom_point() +
geom_errorbar(mapping = aes(ymin = lower,
ymax = upper),
width = 0.2) +
geom_hline(yintercept = 0,
linetype = "dashed") +
scale_y_continuous(breaks=seq(-1, 1, 0.5),
limits=c(-1.1, 1)) +
labs(x = "Time (in Minutes)",
y = "Standardized Mean Heart Rate",
# caption = expression(paste(italic("Note: "),
#                            "The shadow around the line represents the 99% confidence interval."
#                            )
#                      )
) +
facet_grid(cols = vars(time_span),
scales = "free_x") +
theme_apa() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.caption = element_text(hjust = 0))
df_regression <-
main_single_hr %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std","heart_rate") %>%
distinct() %>%
mutate(time = time / 60) %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
)
)
fix_models <-
df_regression %>%
split(.$Phase) %>%
map( ~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .)) %>%
map(
~ coef(.) %>%
tibble::as_tibble(.,
rownames = "name") %>%
transmute(
type = if_else(str_detect(name,
":"),
true = "slope",
false = "intercept"),
id = str_remove_all(name,
"[^[:digit:]]"),
value = value
),
) %>%
bind_rows(.id = "Phase") %>%
pivot_wider(names_from = type,
values_from = value)
p.values_slope <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$slope,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_slope")
p.values_intercept <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$intercept,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_intercept")
sd_mean <-
fix_models %>%
group_by(Phase) %>%
dplyr::summarise(
mean_slope = mean(slope),
sd_slope = sd(slope),
mean_intercept = mean(intercept),
sd_intercept = sd(intercept)
)
table_data <-
right_join(x = sd_mean,
y = p.values_intercept,
by = "Phase") %>%
right_join(x = .,
y = p.values_slope,
by = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(mean_intercept, digits = 3),
`SD(Intercept)` = round(sd_intercept, digits = 3),
`p-Value (Intercept)` = p.value_intercept,
`Mean(Slope)` = round(mean_slope, digits = 3),
`SD(Slope)` = round(sd_slope,digits = 3),
`p-Value (Slope)` = p.value_slope,
) %>%
arrange(Phase)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
knitr::kable(.)
