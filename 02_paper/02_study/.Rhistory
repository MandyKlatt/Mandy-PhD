#   summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
#
# # long plot
# pv.plot<-ggplot(data = pv.plot.sd,
#                   aes(x = item.wordings, y = mean,
#                       group = group, colour = group)) +
#   geom_line()+
#   geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
#   theme_light() +
#   ylim(1,4)+
#   facet_grid(~perspective)+
#   labs(data = pv.data, y = "value", x = NULL,
#        title="Presence: voice" ,
#        subtitle=NULL)+
#   theme(legend.position="bottom",
#         panel.spacing.x = ,
#         plot.title = element_text(hjust = 0.5),
#         axis.text.y = element_text(size = 6))+
#   scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
#   coord_flip()
# pv.plot
knitr::include_graphics("./pictures/presenceverbalnonverbalintervention.png", dpi = 108)
# ```{r Presence: verbal and non-verbal intervention line plots,  fig.width=6, fig.height = 6, message = FALSE, warning = FALSE , echo=FALSE}
#
# ### Presence: verbal and non-verbal intervention
# # filter by parameter variable, i.e. create a subset for Presence: verbal and non-verbal intervention
# pvni.data <- quest.raw.data %>% filter(scale == "Presence: verbal and non-verbal intervention")
#
# # value sometimes contained text before filtering, we have to convert the numbers to numeric
# pvni.data <- pvni.data %>%  mutate(value = as.numeric(as.character(factor(value))))
#
# # to create error bars, we need to summarize the data in a separate data frame
# pvni.plot.sd <- pvni.data %>%
#   group_by(group, item.wordings, .drop=TRUE) %>%
#   summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
#
# # long plot
# pvni.plot<-ggplot(data = pvni.plot.sd,
#                   aes(x = item.wordings, y = mean,
#                       group = group, colour = group)) +
#   geom_line()+
#   geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
#   theme_light() +
#   ylim(1,4)+
#   facet_grid(~perspective)+
#   labs(data = pvni.data, y = "value", x = NULL,
#        title="Presence: verbal and non-verbal intervention" ,
#        subtitle=NULL)+
#   theme(legend.position="bottom",
#         panel.spacing.x = ,
#         plot.title = element_text(hjust = 0.5),
#         axis.text.y = element_text(size = 6))+
#   scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
#   coord_flip()
# pvni.plot
### Natural behaviour
# filter by parameter variable, i.e. create a subset for Natural behaviour
nb.data <- quest.raw.data %>% filter(scale == "Natural behaviour")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
nb.data <- nb.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# to create error bars, we need to summarize the data in a separate data frame
nb.plot.sd <- nb.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# long plot
nb.plot<-ggplot(data = nb.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = nb.data, y = "value", x = NULL,
title="Natural behaviour" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
nb.plot
quest.plot <- quest.raw.data %>%
ggplot( aes(x=scale, y=value, fill=scale)) +
geom_boxplot() +
scale_x_discrete(guide = guide_axis(angle = 70)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_light() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
facet_grid(~group)+
ggtitle("Boxplot with individual points for all scales") +
xlab("")
quest.plot
### read in data for 01_01_expert_D
speaking.data.01.01 <- read.delim("./data/Aperol_pilot_01_01_expert_D_cam4_AL_MK.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.01.01 <- speaking.data.01.01  %>% select(
Dokumentgruppe,
Dokumentname,
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher and "kodiert von Anna" as row
speaking.data.01.01 <- speaking.data.01.01 %>% filter (Code == "speaking time\\teacher",
Dokumentgruppe == "kodiert von Anna")
speaking.data.01.01 <- sum(speaking.data.01.01$Abdeckungsgrad..)
# read in data for 01_02_expert_A
speaking.data.01.02 <- read.delim("./data/Aperol_pilot_01_02_expert_A_cam1_AL.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.01.02 <- speaking.data.01.02 %>% select(
Dokumentname,
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.01.02 <- speaking.data.01.02 %>% filter (Code == "speaking time\\teacher")
speaking.data.01.02 <- sum(speaking.data.01.02$Abdeckungsgrad..)
# read in data for 01_03_novice_B
speaking.data.01.03 <- read.delim("./data/Aperol_pilot_01_03_novice_B_cam1.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.01.03 <- speaking.data.01.03 %>% select(
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.01.03 <- speaking.data.01.03 %>% filter (Code == "speaking time\\teachter")
speaking.data.01.03 <- sum(speaking.data.01.03$Abdeckungsgrad..)
# read in data for 01_04_novice_C
speaking.data.01.04 <- read.delim("./data/Aperol_pilot_01_04_novice_C_cam1.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.01.04 <- speaking.data.01.04 %>% select(
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.01.04 <- speaking.data.01.04 %>% filter (Code == "speaking time\\teachter")
speaking.data.01.04 <- sum(speaking.data.01.04$Abdeckungsgrad..)
# read in data for 02_01_novice_A
speaking.data.02.01 <- read.delim("./data/Aperol_pilot_02_01_novice_A_glasses.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.02.01 <- speaking.data.02.01 %>% select(
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.02.01 <- speaking.data.02.01 %>% filter (Code == "speaking time\\teacher")
speaking.data.02.01 <- sum(speaking.data.02.01$Abdeckungsgrad..)
# read in data for 02_02_novice_B
speaking.data.02.02 <- read.delim("./data/Aperol_pilot_02_02_novice_B_cam1_AL_MK.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.02.02 <- speaking.data.02.02 %>% select(
Dokumentgruppe,
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.02.02 <- speaking.data.02.02 %>% filter (Code == "speaking time\\teacher",
Dokumentgruppe == "kodiert von Anna")
speaking.data.02.02 <- sum(speaking.data.02.02$Abdeckungsgrad..)
# read in data for 02_03_novice_C
speaking.data.02.03 <- read.delim("./data/Aperol_pilot_02_03_novice_C_cam1_AL_MK.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.02.03 <- speaking.data.02.03 %>% select(
Dokumentgruppe,
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.02.03 <- speaking.data.02.03 %>% filter (Code == "speaking time\\teachter",
Dokumentgruppe == "02_03_kodiert von Anna")
speaking.data.02.03 <- sum(speaking.data.02.03$Abdeckungsgrad..)
# read in data for 02_04_novice_D
speaking.data.02.04 <- read.delim("./data/Aperol_pilot_02_04_novice_D_cam1.txt", dec=",", sep="\t", header=T)
### select relevant columns
speaking.data.02.04 <- speaking.data.02.04 %>% select(
Code,
Anfang,
Ende,
Fläche,
Abdeckungsgrad..)
### filter only speaking time of teacher as row
speaking.data.02.04 <- speaking.data.02.04 %>% filter (Code == "speaking time\\teachter")
speaking.data.02.04 <- sum(speaking.data.02.04$Abdeckungsgrad..)
# read in table with coded speaking time included
speaking.data <- read.delim("./data/plus_coded_speaking_time_questionnaire_data_0802.txt", dec=",", sep="\t", header=T)
# to compare both sessions filter only Identical items
speaking.data <- speaking.data  %>% filter(str_detect(scale,
paste(c("Duration of speaking time"),
collapse = '|')))
# value sometimes contained text before filtering, we have to convert the numbers to numeric
speaking.data <- speaking.data %>%  mutate(value = as.numeric(value))
speaking.plot <- speaking.data %>%
ggplot(aes(x='Duration of speaking time', y=value, fill=group)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_light() +
theme(
legend.position="none",
plot.title = element_text(size=11),
axis.text.x = element_text(size = 8)) +
facet_grid(group~perspective) +
ggtitle("Boxplot with individual points for Duration of speaking time") +
xlab("")
speaking.plot
# prepare data (selected from questionnaire data)
et.raw.data<-read.table("./data/Aperol_pilot_glasses_raw_fixation_saccades_metrics.tsv", dec=",", sep="\t", header=T)
# converting integer to numeric
et.raw.data <- et.raw.data %>%  mutate(Duration_of_interval = as.numeric(Duration_of_interval),
Total_duration_of_whole_fixations = as.numeric(Total_duration_of_whole_fixations),
Number_of_whole_fixations = as.numeric(Number_of_whole_fixations),
Average_duration_of_whole_fixations = as.numeric(Average_duration_of_whole_fixations)
)
# calculate the GRI
# create a basic table (tibble) using tidyverse functions
et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"Fixation Duration" = Total_duration_of_whole_fixations,
"M Duration Fixation" = Average_duration_of_whole_fixations,
"TOI" = Duration_of_interval,
"GRI" = Average_duration_of_whole_fixations / Number_of_whole_fixations)
# format and insert table in manuscript
apa_table(
et.raw.table,
caption = "Number and Duration (in msec) of Fixations",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "scriptsize" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
#
# et.plot <- et.raw.data %>%
#   ggplot(aes(x=Number_of_whole_fixations, y=value, fill=scale)) +
#     geom_boxplot() +
#     scale_x_discrete(guide = guide_axis(angle = 70)) +
#     geom_jitter(color="black", size=0.4, alpha=0.9) +
#     theme_light() +
#     theme(
#       legend.position="none",
#       plot.title = element_text(size=11)
#     ) +
#     facet_grid(~Variable)+
#     ggtitle("Boxplot with individual points for Number of fixations") +
#     xlab("")
# et.plot
# prepare data (selected from questionnaire data)
et.calib.data<-read.table("./data/Aperol_pilot_glasses_raw_ALL_metrics_calib_without_AOI_snapshot.tsv", dec=",", sep="\t", header=T)
# converting integer to numeric
et.calib.data <- et.calib.data %>%  mutate(Duration_of_interval = as.numeric(Duration_of_interval),
Total_duration_of_whole_fixations = as.numeric(Total_duration_of_whole_fixations),
Number_of_whole_fixations = as.numeric(Number_of_whole_fixations),
Average_duration_of_whole_fixations = as.numeric(Average_duration_of_whole_fixations)
)
# select relevant rows
et.calib.data <- et.calib.data %>% filter(TOI == "Calibration phase")
# calculate the GRI
# create a basic table (tibble) using tidyverse functions
et.calib.table <- et.calib.data %>%
group_by(Participant, Variable1) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"Fixation Duration" = Total_duration_of_whole_fixations,
"M Duration Fixation" = mean(Total_duration_of_whole_fixations),
"TOI" = Duration_of_interval,
"GRI" = Average_duration_of_whole_fixations / Number_of_whole_fixations)
# format and insert table in manuscript
apa_table(
et.calib.table,
caption = "Number and Duration (in msec) of Fixations during calibration",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "scriptsize" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# prepare data (selected from questionnaire data)
et.calib.data<-read.table("./data/Aperol_pilot_glasses_raw_ALL_metrics_calib_without_AOI_snapshot.tsv", dec=",", sep="\t", header=T)
# converting integer to numeric
et.calib.data <- et.calib.data %>%  mutate(Duration_of_interval = as.numeric(Duration_of_interval),
Total_duration_of_whole_fixations = as.numeric(Total_duration_of_whole_fixations),
Number_of_whole_fixations = as.numeric(Number_of_whole_fixations),
Average_duration_of_whole_fixations = as.numeric(Average_duration_of_whole_fixations)
)
# select relevant rows
et.calib.data <- et.calib.data %>% filter(TOI == "Calibration phase")
# calculate the GRI
# create a basic table (tibble) using tidyverse functions
et.calib.table <- et.calib.data %>%
group_by(Participant, Variable1) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"Fixation Duration" = Total_duration_of_whole_fixations,
"M Duration Fixation" = Average_duration_of_whole_fixations,
"TOI" = Duration_of_interval,
"GRI" = Average_duration_of_whole_fixations / Number_of_whole_fixations)
# format and insert table in manuscript
apa_table(
et.calib.table,
caption = "Number and Duration (in msec) of Fixations during calibration",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "scriptsize" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# if a package is not installed on the current machine, it will install it
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(papaja)) install.packages('papaja'); library(papaja)
if (!require(psych)) install.packages('psych'); library(psych) # stats
if (!require(moments)) install.packages('moments'); library(moments) # skewness & kurtosis
if (!require(sjPlot)) install.packages('sjPlot'); library(sjPlot) # item analysis of a scale or index
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
r_refs("r-references.bib")
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# create a basic table (tibble) using tidyverse functions
demo.quest.table <- quest.raw.data %>%
filter(what == "head") %>%
group_by(group) %>%
summarise(N=n(),
"Male" = sum(gender),
"M age" = round(mean(age), 2),
"Min age" = min(age),
"Max age" = max(age),
"SD age" = round(sd(age), 2),
"M exp." = round(mean(experience), 2),
"Min exp." = min(experience),
"Max exp." = max(experience),
"SD exp." = round(sd(experience), 2),
)
# format and insert table in manuscript
apa_table(
demo.quest.table,
caption = "Demographic Information and Teaching Experience",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# if a package is not installed on the current machine, it will install it
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(papaja)) install.packages('papaja'); library(papaja)
if (!require(psych)) install.packages('psych'); library(psych) # stats
if (!require(moments)) install.packages('moments'); library(moments) # skewness & kurtosis
if (!require(sjPlot)) install.packages('sjPlot'); library(sjPlot) # item analysis of a scale or index
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
r_refs("r-references.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
library(needs)
needs(tidyverse)
df_sjt <- read_csv(file = C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv)
df_sjt <- read_csv(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
df_sjt <- read_csv2(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
df_sjt <- read_csv(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
df_sjt <- read_csv2(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
### ProVisioNET pilot data
#### intercoder reli expertise data 01_01
# install needed packages
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
irr,
readxl,
DescTool)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data from rater1 while specifying locale allows to set ","
r1 <-read_excel ("./data/coding_reactions_CW_ohne_Abstufung.xlsx")
library(needs)
needs(tidyverse,
ggplot,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
sri_novice <- read_excel("./data/coding_sri_novice.xlsx")
sri_expert <- read_excel("./data/coding_sri_expert.xlsx")
# filter relevant rows and select relevant columns
sri_novice <- sri_novice %>% select(Group, Event, Disturbing_Factor, Confident_Factor)
sri_expert <- sri_expert %>% select(Group, Event, Disturbing_Factor, Confident_Factor)
# combine the two data frames with novice and expert
sri <- rbind(sri_expert, sri_novice)
# removing all NAs
sri_filter <- na.omit(sri)
# define expert and novice with ifelse function
sri_filter$Group = ifelse(sri_filter$Group < 200, "Novice","Expert")
# create a new data frame with both factors
sri_disturb <- subset.data.frame(sri_filter, select = c(Group, Event, Disturbing_Factor))
sri_confi <- subset.data.frame(sri_filter, select = c(Group, Event, Confident_Factor))
# plotting disturbing factor
dist_plot <-
ggplot(data = sri_disturb,
mapping = aes(x = Group,
y = Disturbing_Factor)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
ylim(0,10)+
scale_fill_brewer(palette = "RdBu") +
facet_wrap(vars(Event),
nrow = 1, strip.position = "bottom") +
ggtitle("How disturbing was the event for you?") +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
dist_plot
# plotting Confident factor
confi_plot <-
ggplot(data = sri_confi,
mapping = aes(x = Group,
y = Confident_Factor)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(vars(Event),
nrow = 1, strip.position = "bottom") +
ggtitle("How confident did you feel in dealing with this event?") +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
confi_plot
# arranging plots
grid.arrange(dist_plot, confi_plot, ncol=2, nrow =1)
# load packages
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR)
# read in data
df_sjt <- read_csv2(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/data/SJT.csv")
# select relevant columns --> only mean
df_sjt <- df_sjt %>% select(UI06_05, SJT_AL_gek, SJT_ST_gek, SJT_R_gek, SJT_KF_gek)
# rename columns
df_sjt <- rename(df_sjt, c("Group" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"))
# changing from wide to long format
df_sjt_long <- df_sjt %>%
pivot_longer(!Group, names_to = "Facets Classroom Management", values_to = "Mean")
# define expert and novice with ifelse function
df_sjt_long$Group = ifelse(df_sjt_long$Group < 200, "Novice","Expert")
# plotting mean
mean_plot <-
ggplot(data = df_sjt_long,
mapping = aes(x = Group,
y = Mean)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
labs(x = "") +
ylim(0,1) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(vars(`Facets Classroom Management`),
nrow = 1, strip.position = "bottom") +
theme_minimal()+
ggtitle("Situational Judgment Test of Strategic Knowledge of Classroom Management") +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 45))
mean_plot
setwd("~/GitHub/Mandy-PhD/02_paper/study")
