# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR)
# load data files
quest.data <- read_excel ("./data/data_empschul_labor_lehrperson.xlsx")
knitr::opts_chunk$set(include = FALSE)
library("papaja")
r_refs("r-references.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
#install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR)
# load data files
quest.data <- read_excel ("./data/data_empschul_labor_lehrperson.xlsx")
# select relevant columns from first questionnaire
demo.data <- quest.data %>% select(LI02_01_1,
LI03_01,
LI04_01,
LI06_05,
LI10_05,
LI11_01,
LI13_01,
LI14
)
# rename columns
demo.data <- rename(demo.data, c("Group" = "LI06_05",
"Gender" = "LI02_01_1",
"Age" = "LI03_01",
"Teaching Experience" = "LI04_01",
"Subject" = "LI10_05",
"Semester" = "LI11_01",
"Internship" = "LI13_01",
"Extracurricular Teaching Experience" = "LI14"
))
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# creating new column with percentage of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Gender_Sum=n())
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# create new columns that give proportion of Gender
# percentage = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percentage = Gender/Gender_Sum) %>%
#   mutate(Gender_percentage = round(sum(Gender_percentage)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Gender female in percentage" = round(sum(Gender/Gender_Sum) * 100, digits = 1),
"M Age in years" = round(mean(Age), 1),
"SD Age in years" = round(sd(Age), 1),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp. in years" = round(mean(`Teaching Experience`), 1),
"SD Exp. in years" = round(sd(`Teaching Experience`), 1),
"Min Exp. in years" = min(`Teaching Experience`),
"Max Exp. in years" = max(`Teaching Experience`),
"M Semester" = round(mean(Semester), 1),
"SD Semester" = round(sd(Semester), 1),
"Min Semester" = min(Semester),
"Max Semester" = max(Semester),
"M Internship in teaching units" = round(mean(Internship), 1),
"SD Internship in teaching units" = round(sd(Internship), 1),
"Min Internship in teaching units" = min(Internship),
"Max Internship in teaching units" = max(Internship),
"Extracurricular Teaching Experience in percentage" = round(sum(`Extracurricular Teaching Experience`/Gender_Sum) * 100, digits = 1),
)
# format and insert table in manuscript
apa_table(
demo.table,
caption = "Demographic Information and Teaching Experience",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
View(quest.data)
?alpha
View(quest.data)
# select relevant columns
quest.data <- quest.data %>% select(LM01_01:LO01_02, LI06_05)
# rename columns
quest.data <- rename(quest.data, c("Group" = "LI06_05"))
View(quest.data)
# define expert and novice with ifelse function
quest.data$Group = ifelse(quest.data$Group < 200, "Novice","Expert")
?apa_table
# creating a matrix
quest.table <- matrix(data = NA, nrow = 4, ncol = 8)
View(quest.table)
# creating a loop
i <- "LM"
loop.data <- quest.data %>%
select(starts_with(i))
View(loop.data)
rownames(quest.table) <- c("LM", "LB", "LP", "LV")
View(quest.table)
quest.table[i, 1] <- length(loop.data)
View(quest.table)
View(loop.data)
?length
View(quest.data)
View(loop.data)
# calculating mean
loop.data %>%
mutate(mean = mean(contains("LM")))
# calculating mean
loop.data %>%
group_by() %>%
summarise(mean = mean())
colnames(loop.data)
varlist <- colnames(loop.data)
loop.data %>%
group_by() %>%
summarise(mean = mean(varlist))
loop.data %>%
mutate(mean = colmeans())
loop.data %>%
mutate(mean = colMeans())
loop.data %>%
mutate(mean = colMeans(.))
loop.data %>%
mutate(mean = rowMeans(.))
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() ->
quest.table[i, 2]
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, 2]
colnames(quest.table) <- c("N Items","M","SD","Min","Max","Skewness","Kurtosis")
colnames(quest.table) <- c("N Items","M","SD","Min","Max","Skewness","Kurtosis","alpha")
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table["M", 2]
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, "M"]
quest.table[i, "N Items"] <- length(loop.data)
# calculating SD
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
sd() %>%
round(., digits = 2) ->
quest.table[i, "SD"]
# calculating Min
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
min() %>%
round(., digits = 2) ->
quest.table[i, "Min"]
# calculating Max
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
max() %>%
round(., digits = 2) ->
quest.table[i, "Max"]
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
?skewness
#install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments)
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
# calculating Kurtosis
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
kurtosis() %>%
round(., digits = 2) ->
quest.table[i, "Kurtosis"]
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm)
# calculating alpha
loop.data %>%
cronbach.alpha()
# calculating alpha
loop.data %>%
cronbach.alpha()$alpha
# calculating alpha
aplha <- loop.data %>%
cronbach.alpha()
View(aplha)
# calculating alpha
alpha <- loop.data %>%
cronbach.alpha()
rm(aplha)
alpha$alpha
# calculating alpha
alpha <- loop.data %>%
cronbach.alpha() %>%
alpha$alpha
# calculating alpha
alpha <- loop.data %>%
cronbach.alpha() %>%
pull(aplha)
# calculating alpha
alpha <- loop.data %>%
cronbach.alpha() %>%
pull(alpha)
alpha <- loop.data %>%
cronbach.alpha()
alpha$alpha
quest.table[i, "alpha"] <- round(alpha$alpha,2)
# creating a matrix
quest.table <- matrix(data = NA, nrow = 4, ncol = 8)
rownames(quest.table) <- c("LM", "LB", "LP", "LV")
colnames(quest.table) <- c("N Items","M","SD","Min","Max","Skewness","Kurtosis","alpha")
for (i in c("LM", "LB", "LP", "LV")) {
loop.data <- quest.data %>%
select(starts_with(i))
quest.table[i, "N Items"] <- length(loop.data)
# calculating mean
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, "M"]
# calculating SD
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
sd() %>%
round(., digits = 2) ->
quest.table[i, "SD"]
# calculating Min
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
min() %>%
round(., digits = 2) ->
quest.table[i, "Min"]
# calculating Max
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
max() %>%
round(., digits = 2) ->
quest.table[i, "Max"]
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
# calculating Kurtosis
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
kurtosis() %>%
round(., digits = 2) ->
quest.table[i, "Kurtosis"]
# calculating alpha
alpha <- loop.data %>%
cronbach.alpha()
alpha$alpha
quest.table[i, "alpha"] <- round(alpha$alpha,2)
}
loop.data <- quest.data %>%
select(starts_with(i))
loop.data <- quest.data %>%
select(., starts_with(i))
?starts_with
loop.data <- quest.data %>%
select(starts_with(match = i))
loop.data <- quest.data %>%
dplyr::select(starts_with(match = i))
for (i in c("LM", "LB", "LP", "LV")) {
loop.data <- quest.data %>%
dplyr::select(starts_with(match = i))
quest.table[i, "N Items"] <- length(loop.data)
# calculating mean
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, "M"]
# calculating SD
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
sd() %>%
round(., digits = 2) ->
quest.table[i, "SD"]
# calculating Min
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
min() %>%
round(., digits = 2) ->
quest.table[i, "Min"]
# calculating Max
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
max() %>%
round(., digits = 2) ->
quest.table[i, "Max"]
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
# calculating Kurtosis
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
kurtosis() %>%
round(., digits = 2) ->
quest.table[i, "Kurtosis"]
# calculating alpha
alpha <- loop.data %>%
cronbach.alpha()
alpha$alpha
quest.table[i, "alpha"] <- round(alpha$alpha,2)
}
View(quest.table)
rownames(quest.table) <- c("Classroom Management", "Balance", "Presence", "Natural Behavior")
View(quest.table)
# load data files
quest.data <- read_excel ("./data/data_empschul_labor_lehrperson.xlsx")
#install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm)
# load data files
quest.data <- read_excel ("./data/data_empschul_labor_lehrperson.xlsx")
# select relevant columns from first questionnaire
demo.data <- quest.data %>% select(LI02_01_1,
LI03_01,
LI04_01,
LI06_05,
LI10_05,
LI11_01,
LI13_01,
LI14
)
# select relevant columns from first questionnaire
demo.data <- quest.data %>% dyplr::select(LI02_01_1,
LI03_01,
LI04_01,
LI06_05,
LI10_05,
LI11_01,
LI13_01,
LI14
)
# select relevant columns from first questionnaire
demo.data <- quest.data %>% dplyr::select(LI02_01_1,
LI03_01,
LI04_01,
LI06_05,
LI10_05,
LI11_01,
LI13_01,
LI14
)
# rename columns
demo.data <- rename(demo.data, c("Group" = "LI06_05",
"Gender" = "LI02_01_1",
"Age" = "LI03_01",
"Teaching Experience" = "LI04_01",
"Subject" = "LI10_05",
"Semester" = "LI11_01",
"Internship" = "LI13_01",
"Extracurricular Teaching Experience" = "LI14"
))
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# creating new column with percentage of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Gender_Sum=n())
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# create new columns that give proportion of Gender
# percentage = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percentage = Gender/Gender_Sum) %>%
#   mutate(Gender_percentage = round(sum(Gender_percentage)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Gender female in percentage" = round(sum(Gender/Gender_Sum) * 100, digits = 1),
"M Age in years" = round(mean(Age), 1),
"SD Age in years" = round(sd(Age), 1),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp. in years" = round(mean(`Teaching Experience`), 1),
"SD Exp. in years" = round(sd(`Teaching Experience`), 1),
"Min Exp. in years" = min(`Teaching Experience`),
"Max Exp. in years" = max(`Teaching Experience`),
"M Semester" = round(mean(Semester), 1),
"SD Semester" = round(sd(Semester), 1),
"Min Semester" = min(Semester),
"Max Semester" = max(Semester),
"M Internship in teaching units" = round(mean(Internship), 1),
"SD Internship in teaching units" = round(sd(Internship), 1),
"Min Internship in teaching units" = min(Internship),
"Max Internship in teaching units" = max(Internship),
"Extracurricular Teaching Experience in percentage" = round(sum(`Extracurricular Teaching Experience`/Gender_Sum) * 100, digits = 1),
)
# format and insert table in manuscript
apa_table(
demo.table,
caption = "Demographic Information and Teaching Experience",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
