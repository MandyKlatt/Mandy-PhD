scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren")) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren")) %>%
distinct()
View(plot_loess)
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "novice",
ID > 200 ~ "expert")) %>%
distinct()
View(plot_loess)
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "novice",
ID > 200 ~ "expert")) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
View(plot_loess)
View(main)
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren"))
View(plot_loess)
) %>%
View(main)
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren") %>%
#
# time_span = fct_recode(time_span,
#                        levels = c("pre" = "Pre-Teaching",
#                                   "Weiblich" = "female"
#                                   )
#                        )
# ) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren")) %>%
#
# time_span = fct_recode(time_span,
#                        levels = c("pre" = "Pre-Teaching",
#                                   "Weiblich" = "female"
#                                   )
#                        )
# ) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren"),
time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Intviewphase" = "interview",
"Endphase" = "after"
)
) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren"),
time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Intviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Novice",
"Expert"
))
) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess <-
main %>%
filter(time_span != "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
mutate(status = case_when(ID < 200 ~ "Unerfahren",
ID > 200 ~ "Erfahren"),
time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Intviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Pre-Lehrphase",
"Lehrphase",
"Post-Lehrphase",
"Intviewphase",
"Endphase"
)
)
) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa() +
facet_grid(cols = vars(time_span),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_loess
?scale_linetype_manual
knitr::include_graphics("./images/timeline_fitbit.png")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE)
knitr::include_graphics("./images/timeline_fitbit.png", dpi = 130)
library("papaja")
r_refs("r-references.bib")
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor),
event = as_factor(event)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
# define expert and novice with ifelse function
df_demo$ID = ifelse(demo.data$ID < 200, "Novice","Expert")
# define expert and novice with ifelse function
df_demo$ID = ifelse(df_demo$ID < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
df_demo$Gender = ifelse(df_demo$Gender == 2, "1","0")
# changing character Gender into numeric
df_demo$Gender <- as.numeric(df_demo$Gender)
View(df_demo)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(df_demo$gender == 2, "1","0")
# changing character Gender into numeric
df_demo$gender <- as.numeric(df_demo$gender)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
group_by(ID) %>%
mutate(Sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$School_type[df_demo$School_type == 2] <- "1"
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx")
View(df_demo)
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01,
school_type = LI18)
View(df_demo)
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- "1"
# define expert and novice with ifelse function
df_demo$ID = ifelse(df_demo$ID < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(df_demo$gender == 2, "1","0")
# changing character Gender into numeric
df_demo$gender <- as.numeric(df_demo$gender)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
group_by(ID) %>%
mutate(sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- "1"
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type, ID) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/Sum_participants) * 100,
digits = 2))
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type, ID) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/sum_participants) * 100,
digits = 2))
# changing character percent_schooltype into numeric
demo.data$percent_schooltype <- as.numeric(demo.data$percent_schooltype)
# changing character percent_schooltype into numeric
df_demo$percent_schooltype <- as.numeric(demo.data$percent_schooltype)
# changing character percent_schooltype into numeric
df_demo$percent_schooltype <- as.numeric(df_demo$percent_schooltype)
# changing Type of School into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
df_demo$school_type <- factor(x = df_demo$school_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
View(df_demo)
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx")
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17)
View(df_demo)
