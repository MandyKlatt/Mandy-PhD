filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate") %>%
distinct() %>%
mutate(type = "a. Heart Rate (Unstandardized in beats per minute)")
df_heart_rate_std <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate_std") %>%
distinct() %>%
transmute(ID,
time,
type = "b. Heart Rate (Standardized)",
heart_rate = heart_rate_std)
# left_join(x = df_heart_rate,
#           y = df_heart_rate_std,
#           by = c("ID","time")) %>%
bind_rows(df_heart_rate,
df_heart_rate_std
) %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.99) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 120, 10)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "Time (in minutes)",
#y = "Heart Rate (in Beats per Minute)",
y = "",
# title = "Figure #",
# subtitle = "Overall Course of Average Heartrate",
caption = expression(paste(italic("Note: "),
"The shadow around the line represents the 99% confidence interval.
We used the ggplot2 package (v3.3.3; Wickham, 2016) to calculate the moving average of the course."))
) +
#ggtitle("Overall Course of Average Heartrate") +
theme_apa() +
# theme(plot.subtitle = element_text(face = "italic"),
#       plot.caption = element_text(hjust = 0),
#       axis.line = element_line(colour = "black"),
#       panel.grid.major = element_blank(),
#       panel.grid.minor = element_blank(),
#       panel.border = element_blank(),
#       panel.background = element_blank()) +
facet_wrap(~ type,
ncol = 2,
scales = "free_y")
ggsave(filename = "plots_publication/loess_plot_std_unstd.png",
width = 16,
height = 12,
units = "cm")
df_heart_rate <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate") %>%
distinct() %>%
mutate(type = "a. Heart Rate (in beats per minute)")
df_heart_rate_std <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate_std") %>%
distinct() %>%
transmute(ID,
time,
type = "b. Heart Rate (standardized)",
heart_rate = heart_rate_std)
# left_join(x = df_heart_rate,
#           y = df_heart_rate_std,
#           by = c("ID","time")) %>%
bind_rows(df_heart_rate,
df_heart_rate_std
) %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.99) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 120, 10)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "Time (in minutes)",
#y = "Heart Rate (in Beats per Minute)",
y = "",
# title = "Figure #",
# subtitle = "Overall Course of Average Heartrate",
# caption = expression(paste(italic("Note: "),
#                            "The shadow around the line represents the 99% confidence interval.
#                            We used the ggplot2 package (v3.3.3; Wickham, 2016) to calculate the moving average of the course."))
# ) +
#ggtitle("Overall Course of Average Heartrate") +
theme_apa() +
# theme(plot.subtitle = element_text(face = "italic"),
#       plot.caption = element_text(hjust = 0),
#       axis.line = element_line(colour = "black"),
#       panel.grid.major = element_blank(),
#       panel.grid.minor = element_blank(),
#       panel.border = element_blank(),
#       panel.background = element_blank()) +
facet_wrap(~ type,
ncol = 2,
scales = "free_y")
ggsave(filename = "plots_publication/loess_plot_std_unstd.png",
df_heart_rate <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate") %>%
distinct() %>%
mutate(type = "a. Heart Rate (in beats per minute)")
df_heart_rate_std <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate_std") %>%
distinct() %>%
transmute(ID,
time,
type = "b. Heart Rate (standardized)",
heart_rate = heart_rate_std)
# left_join(x = df_heart_rate,
#           y = df_heart_rate_std,
#           by = c("ID","time")) %>%
bind_rows(df_heart_rate,
df_heart_rate_std
) %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.99) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 120, 10)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "Time (in minutes)",
#y = "Heart Rate (in Beats per Minute)",
y = "",
# title = "Figure #",
# subtitle = "Overall Course of Average Heartrate",
# caption = expression(paste(italic("Note: "),
#                            "The shadow around the line represents the 99% confidence interval.
#                            We used the ggplot2 package (v3.3.3; Wickham, 2016) to calculate the moving average of the course."))
) +
#ggtitle("Overall Course of Average Heartrate") +
theme_apa() +
# theme(plot.subtitle = element_text(face = "italic"),
#       plot.caption = element_text(hjust = 0),
#       axis.line = element_line(colour = "black"),
#       panel.grid.major = element_blank(),
#       panel.grid.minor = element_blank(),
#       panel.border = element_blank(),
#       panel.background = element_blank()) +
facet_wrap(~ type,
ncol = 2,
scales = "free_y")
ggsave(filename = "plots_publication/loess_plot_std_unstd.png",
width = 16,
height = 12,
units = "cm")
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching phase","(2) Teaching phase","(3) Post-teaching phase","(4) Interview phase","(5) End phase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "Linear Estimation") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
lm_plot_phases
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching phase","(2) Teaching phase","(3) Post-teaching phase","(4) Interview phase","(5) End phase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = TRUE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "Linear Estimation") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
lm_plot_phases
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching phase","(2) Teaching phase","(3) Post-teaching phase","(4) Interview phase","(5) End phase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = TRUE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
ggsave(filename = "plots_publication/lm_plot.png",
width = 16,
height = 12,
units = "cm")
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching\nphase","(2) Teaching\nphase","(3) Post-teaching\nphase","(4) Interview\nphase","(5) End\nphase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = TRUE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
ggsave(filename = "plots_publication/lm_plot.png",
width = 16,
height = 12,
units = "cm")
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching\nphase","(2) Teaching\nphase","(3) Post-teaching\nphase","(4) Interview\nphase","(5) End\nphase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = TRUE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
ki_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching phase","(2) Teaching phase","(3) Post-teaching phase","(4) Interview phase","(5) End phase"))) %>%
distinct() %>%
group_by(time_span) %>%
summarise(z_mean = mean(heart_rate_std),
z_sd = sd(heart_rate_std),
z_t = qt(p = 0.01 / 2,      # 0.01 KI
df = n() - 1,
lower.tail = F
),
z_error = z_sd / sqrt(n()),
lower = z_mean - z_t * z_error,
upper = z_mean + z_t * z_error,
) %>%
ungroup() %>%
ggplot(mapping = aes(x = factor(0),
y = z_mean)) +
geom_point() +
geom_errorbar(mapping = aes(ymin = lower,
ymax = upper),
width = 0.2) +
geom_hline(yintercept = 0,
linetype = "dashed") +
labs(subtitle = "1% Confidence Intervall",
x = "") +
facet_grid(cols = vars(time_span)) +
theme_apa() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank())
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching\nphase","(2) Teaching\nphase","(3) Post-teaching\nphase","(4) Interview\nphase","(5) End\nphase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = TRUE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
ggsave(filename = "plots_publication/lm_plot.png",
width = 22,
height = 12,
units = "cm")
main %>%
group_by(ID, time_span) %>%
summarize(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ disruption_factor + confidence_factor + teaching_experience,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_preparation1)
summary(regr_preparation2)
summary(regr_preparation3)
summary(regr_preparation4)
View(data_regression_mean)
main %>%
group_by(ID, time_span) %>%
summarize(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_teaching1)
summary(regr_teaching2)
summary(regr_teaching3)
summary(regr_teaching4)
summary(regr_teaching1)
summary(regr_teaching2)
summary(regr_teaching3)
summary(regr_teaching2)
summary(regr_teaching3)
summary(regr_teaching4)
summary(regr_teaching3)
summary(regr_post1)
summary(regr_post2)
summary(regr_post3)
summary(regr_post3)
summary(regr_popst4)
summary(regr_post4)
summary(regr_interview1)
summary(regr_interview2)
summary(regr_interview3)
summary(regr_interview4)
summary(regr_end1)
summary(regr_end2)
summary(regr_end3)
summary(regr_end4)
