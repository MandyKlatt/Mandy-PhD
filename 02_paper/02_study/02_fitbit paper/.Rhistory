str_detect(string = id, pattern = "_i") ~ "interview_phase",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
options(tinytex.verbose = TRUE)
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(test = df_demo$gender == 2,
yes = 0,
no = 1)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
mutate(sum_participants = sum(n()))
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- 1
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/sum_participants) * 100,
digits = 2))
#changing type of school into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
df_demo$school_type <- factor(x = df_demo$school_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
)
df_demo_table <- pivot_longer(data = df_demo_table,
cols = everything(),
names_to = 'Variable',
values_to = 'values')
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
)
df_demo_table_long <- pivot_longer(data = df_demo_table,
cols = everything(),
names_to = 'Variable',
values_to = 'values')
View(df_demo_table)
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(test = df_demo$gender == 2,
yes = 0,
no = 1)
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(test = df_demo$gender == 2,
yes = 0,
no = 1)
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
?ifelse
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(test = df_demo$gender == 2,
yes = 1,
no = 0)
View(df_demo_all)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
View(df_demo_all)
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (female = 2 --> 1, male --> 0)
df_demo$gender = ifelse(test = df_demo$gender == 2,
yes = 1,
no = 0)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
mutate(sum_participants = sum(n()))
View(df_demo)
class(df_demo$sum_participants)
View(main)
View(df_rating)
View(main)
library("papaja")
r_refs("r-references.bib")
# install.packages("pak")
pak::pak("rstudio/rticles")
# install.packages("pak")
install.packages("rticles")
?geom_smooth
output            : rticles::elevier_article
require(rticles)
library("rticles")
r_refs("r-references.bib")
library("rticles")
# r_refs("r-references.bib") -> ist ein Befehl aus dem Papaja_package. Funktioniert im rticles_Package etwas anders. Muss besprochen werden
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
?knitr::opts_chunk
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
library("rticles")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
# merge two data frames by ID
df_merge <- merge(df_demo_all,
df_rating,
by = "ID")
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end_phase",
str_detect(string = id, pattern = "_m") ~ "teaching_phase",
str_detect(string = id, pattern = "_p") ~ "pre-teaching_phase",
str_detect(string = id, pattern = "_s") ~ "post-teaching_phase",
str_detect(string = id, pattern = "_i") ~ "interview_phase",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end_phase",
str_detect(string = id, pattern = "_m") ~ "teaching_phase",
str_detect(string = id, pattern = "_p") ~ "pre-teaching_phase",
str_detect(string = id, pattern = "_s") ~ "post-teaching_phase",
str_detect(string = id, pattern = "_i") ~ "interview_phase",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
options(tinytex.verbose = TRUE)
?r_refs()
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis,
bibtex)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis,
bibtex)
library("papaja")
install.packages('natbib')
library("rticles")
library("papaja")
r_refs("r-references.bib") # -> ist ein Befehl aus dem Papaja_package. Funktioniert im rticles_Package etwas anders. Muss besprochen werden
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis,
bibtex,
natbib)
library("rticles")
library("papaja")
r_refs("r-references.bib") # -> ist ein Befehl aus dem Papaja_package. Funktioniert im rticles_Package etwas anders. Muss besprochen werden
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis,
bibtex,
natbib)
install.packages("natbib")
library(markdown)
install.packages("natbib")
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis,
bibtex,
natbib)
