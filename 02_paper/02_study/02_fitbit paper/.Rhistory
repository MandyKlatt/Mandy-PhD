# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_post1)
summary(regr_post2)
summary(regr_post3)
summary(regr_post4)
summary(regr_teaching1)$r.squared - summary(regr_teaching2)$r.squared - summary(regr_teaching3)$r.squared - summary(regr_teaching4)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared - summary(regr_post3)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared - summary(regr_post3)$r.squared - summary(regr_teaching4)$r.squared
main %>%
group_by(ID, time_span) %>%
summarize(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_interview1)
summary(regr_interview2)
summary(regr_interview3)
summary(regr_interview4)
# delta R²
summary(regr_interview1)$r.squared - summary(regr_interview2)$r.squared - summary(regr_interview3)$r.squared - summary(regr_interview4)$r.squared
# delta R²
summary(regr_interview1)$r.squared - summary(regr_interview2)$r.squared
# delta R²
summary(regr_interview1)$r.squared - summary(regr_interview2)$r.squared - summary(regr_interview3)$r.squared
# delta R²
summary(regr_interview1)$r.squared - summary(regr_interview2)$r.squared - summary(regr_interview3)$r.squared - summary(regr_interview4)$r.squared
df_multi <-
main %>%
select("ID",
"disruption_factor",
"confidence_factor",
"teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarize(disruption_factor = mean(disruption_factor, na.rm = T),
confidence_factor = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID),
) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id") %>%
mutate(time_span = factor(Phase,
levels = c("Pre Teaching Phase",
"Teaching Phase",
"Post Teaching Phase",
"Interview Phase",
"End Phase"),
labels = c("preparation",
"teaching",
"post",
"interview",
"end")
)
) %>%
select("id",
"disruption_factor",
"confidence_factor",
"teaching_experience",
"slope",
"time_span")
# %>%
# mutate(slope = abs(slope))
# mutate(posneg = if_else(condition = slope < 0,
#                         true = "negative",
#                         false = "positive"))
for (i in unique(df_multi$time_span)) {
cache <- df_multi %>%
filter(time_span == i)
regr1 <-
lm(slope ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(slope ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(slope ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(slope ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_interview1)
summary(regr_interview2)
summary(regr_interview3)
summary(regr_interview4)
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared - summary(regr_post3)$r.squared - summary(regr_teaching4)$r.squared
summary(regr_interview1)
summary(regr_interview2)
summary(regr_interview3)
summary(regr_interview4)
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared - summary(regr_post3)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared - summary(regr_post3)$r.squared
summary(regr_post1)$r.squared - summary(regr_post2)$r.squared - summary(regr_post3)$r.squared - summary(regr_teaching4)$r.squared
main %>%
group_by(ID, time_span) %>%
summarize(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_end1)
summary(regr_end2)
summary(regr_end3)
summary(regr_end4)
# delta R²
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared
- summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
# delta R²
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared
# delta R²
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared - summary(regr_end3)$r.squared
# delta R²
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared - summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
summary(regr_end1)
summary(regr_end2)
summary(regr_end3)
summary(regr_end4)
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared
- summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
summary(regr_end1)
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared - summary(regr_end3)$r.squared
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared - summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
df_multi <-
main %>%
select("ID",
"disruption_factor",
"confidence_factor",
"teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarize(disruption_factor = mean(disruption_factor, na.rm = T),
confidence_factor = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID),
) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id") %>%
mutate(time_span = factor(Phase,
levels = c("Pre Teaching Phase",
"Teaching Phase",
"Post Teaching Phase",
"Interview Phase",
"End Phase"),
labels = c("preparation",
"teaching",
"post",
"interview",
"end")
)
) %>%
select("id",
"disruption_factor",
"confidence_factor",
"teaching_experience",
"slope",
"time_span")
# %>%
# mutate(slope = abs(slope))
# mutate(posneg = if_else(condition = slope < 0,
#                         true = "negative",
#                         false = "positive"))
for (i in unique(df_multi$time_span)) {
cache <- df_multi %>%
filter(time_span == i)
regr1 <-
lm(slope ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(slope ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(slope ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(slope ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_post1)
summary(regr_post2)
summary(regr_post3)
summary(regr_post4)
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared - summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
summary(regr_post1)
summary(regr_post2)
summary(regr_post3)
knitr::opts_chunk$set(
echo = TRUE,
error = FALSE,
message = FALSE,
warning = FALSE
)
library(needs)
needs(ltm,
xtable,
broom,
ppcor,
jtools,
lm.beta,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
lmerTest,
viridis,
gridExtra,
gridtext,
magrittr,
PerformanceAnalytics,
Hmisc,
corrplot,
tidyverse,
ggplot2,
apaTables)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
"disruption_factor", # -99 = subject did not notice event; -100 = experimenter did not asked for event
"confidence_factor",
"event"
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end",
str_detect(string = id, pattern = "_m") ~ "teaching",
str_detect(string = id, pattern = "_p") ~ "preparation",
str_detect(string = id, pattern = "_s") ~ "post",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
distinct() %>%
group_by(ID) %>%
dplyr::summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
filter(!(time_span == "teaching" & time > 600)) %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
# Mean, SD and range for overall (unstandardized)
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
# Mean, SD and range for individual phases (unstandardized)
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases (standardized)
descrip_hr_phases_std <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
# Mean, SD and range for disruption and confidence factor
rating_table <-
df_rating %>%
filter(!is.na(confidence_factor),
!is.na(disruption_factor)) %>%
summarise(N = n_distinct(ID),
"M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confidence factor" = round(mean(confidence_factor),
digits = 2),
"SD confidence factor" = round(sd(confidence_factor),
digits = 2),
"Min confidence factor" = min(confidence_factor),
"Max confidence factor" = max(confidence_factor)
)
loess_plot_overall <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0, NA),
breaks = seq(0, 9000, 600)) +
scale_y_continuous(breaks = seq(-1, 1, 0.5)) +
labs(x = "Time (in Seconds)",
y = "") +
ggtitle("Overall Course of Mean Heart Rate") +
theme_apa() +
theme(axis.title.y = element_blank())
loess_plot_overall
lm_plot_phases <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching\nphase","(2) Teaching\nphase","(3) Post-teaching\nphase","(4) Interview\nphase","(5) End\nphase"))) %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(method = "lm",
se = TRUE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 9000, 600)) +
#scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Time (in Seconds)",
y = "",
subtitle = "") +
theme_apa() +
theme(axis.title.y = element_blank()) +
facet_grid(cols = vars(time_span),
scales = "free_x")
ggsave(filename = "plots_publication/lm_plot.png",
width = 22,
height = 12,
units = "cm")
