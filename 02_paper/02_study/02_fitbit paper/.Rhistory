summary(fit_pre_1)$r.squared - summary(fit_pre_2)$r.squared - summary(fit_pre_3)$r.squared
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence + disruption)
View(df_multi)
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence_factor + disruption)
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence_factor + disruption_factor)
summary(fit_pre_4)
stargazer::stargazer(fit_pre_1, fit_pre_2,fit_pre_3, fit_pre_4, fit_pre_5,
type = "html",
caption = "Pre Teaching Phase",
dep.var.labels = "Slope",
# order = c(1, 2, 3),
# covariate.labels = c("Disruption Factor",
#                      "Confidence Factor",
#                      "Teaching Experience"),
keep.stat = c("n","rsq","adj.rsq")
)
fit_pre_3$model %>%
mutate(fitted.values = fit_pre_3$fitted.values) %>%
ggplot(mapping = aes(x = teaching_experience,
y = slope
)
) +
geom_point(mapping = aes(group = posneg)) +
geom_line(mapping = aes(y = fitted.values,
group = posneg)) +
geom_smooth(method = "lm",
se = F,
linetype = "dashed") +
# geom_point(alpha = 0.5,
#            size = 0.5) +
theme_apa()
df_multi <-
main %>%
select("ID", "disruption_factor", "confidence_factor", "teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarise(disruption = mean(disruption_factor, na.rm = T),
confidence = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID)) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id") %>%
# mutate(posneg = if_else(condition = slope < 0,
#                         true = "negative",
#                         false = "positive"))
fit_teach_1 <-
df_multi %>%
filter(Phase == "Teaching Phase") %>%
# split(.$posneg) %>%
map(~ lm(slope ~ disruption,
data = .))
df_multi <-
main %>%
select("ID", "disruption_factor", "confidence_factor", "teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarise(disruption = mean(disruption_factor, na.rm = T),
confidence = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID)) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id") %>%
# mutate(posneg = if_else(condition = slope < 0,
#                         true = "negative",
#                         false = "positive"))
fit_teach_1 <-
df_multi %>%
filter(Phase == "Teaching Phase") %>%
# split(.$posneg) %>%
map(~ lm(slope ~ disruption,
data = .))
knitr::opts_chunk$set(
echo = TRUE,
error = FALSE,
message = FALSE,
warning = FALSE
)
library(needs)
needs(ltm,
xtable,
broom,
ppcor,
jtools,
lm.beta,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
lmerTest,
viridis,
gridExtra,
gridtext,
magrittr,
PerformanceAnalytics,
Hmisc,
corrplot,
tidyverse,
ggplot2)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
"disruption_factor", # -99 = subject did not notice event; -100 = experimenter did not asked for event
"confidence_factor",
"event"
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end",
str_detect(string = id, pattern = "_m") ~ "teaching",
str_detect(string = id, pattern = "_p") ~ "preparation",
str_detect(string = id, pattern = "_s") ~ "post",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
distinct() %>%
group_by(ID) %>%
dplyr::summarise(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
filter(!(time_span == "teaching" & time > 600)) %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
knitr::opts_chunk$set(
echo = TRUE,
error = FALSE,
message = FALSE,
warning = FALSE
)
library(needs)
needs(ltm,
xtable,
broom,
ppcor,
jtools,
lm.beta,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
lmerTest,
viridis,
gridExtra,
gridtext,
magrittr,
PerformanceAnalytics,
Hmisc,
corrplot,
tidyverse,
ggplot2)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
"disruption_factor", # -99 = subject did not notice event; -100 = experimenter did not asked for event
"confidence_factor",
"event"
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end",
str_detect(string = id, pattern = "_m") ~ "teaching",
str_detect(string = id, pattern = "_p") ~ "preparation",
str_detect(string = id, pattern = "_s") ~ "post",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
distinct() %>%
group_by(ID) %>%
dplyr::summarise(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
filter(!(time_span == "teaching" & time > 600)) %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
# Mean, SD and range for overall (unstandardized)
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
# Mean, SD and range for individual phases (unstandardized)
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases (standardized)
descrip_hr_phases_std <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
# # format and insert table in manuscript
# descrip_hr_phases %>%
# papaja::apa_table(
#   caption = "Mean, SD and range for teachers' heart rate in individual phases",
#   # note = "Write Note here",
#   escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
#   placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
#   font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
#   )
# Mean, SD and range for disruption and confidence factor
rating_table <-
df_rating %>%
filter(!is.na(confidence_factor),
!is.na(disruption_factor)) %>%
summarise(N = n_distinct(ID),
"M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confidence factor" = round(mean(confidence_factor),
digits = 2),
"SD confidence factor" = round(sd(confidence_factor),
digits = 2),
"Min confidence factor" = min(confidence_factor),
"Max confidence factor" = max(confidence_factor)
)
df_regression <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std","heart_rate") %>%
distinct() %>%
mutate(time = time / 60) %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
)
)
fix_models <-
df_regression %>%
split(.$Phase) %>%
map( ~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .)) %>%
map(
~ coef(.) %>%
tibble::as_tibble(.,
rownames = "name") %>%
transmute(
type = if_else(str_detect(name,
":"),
true = "slope",
false = "intercept"),
id = str_remove_all(name,
"[^[:digit:]]"),
value = value
),
) %>%
bind_rows(.id = "Phase") %>%
pivot_wider(names_from = type,
values_from = value)
p.values_slope <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$slope,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_slope")
p.values_intercept <-
fix_models %>%
split(.$Phase) %>%
map( ~ t.test(x = .$intercept,
mu = 0)$p.value) %>%
bind_rows(.id = "Phase") %>%
pivot_longer(cols = everything(),
names_to = "Phase",
values_to = "p.value_intercept")
sd_mean <-
fix_models %>%
group_by(Phase) %>%
dplyr::summarise(
mean_slope = mean(slope),
sd_slope = sd(slope),
mean_intercept = mean(intercept),
sd_intercept = sd(intercept)
)
table_data <-
right_join(x = sd_mean,
y = p.values_intercept,
by = "Phase") %>%
right_join(x = .,
y = p.values_slope,
by = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(mean_intercept, digits = 3),
`SD(Intercept)` = round(sd_intercept, digits = 3),
`p-Value (Intercept)` = p.value_intercept,
`Mean(Slope)` = round(mean_slope, digits = 3),
`SD(Slope)` = round(sd_slope,digits = 3),
`p-Value (Slope)` = p.value_slope,
) %>%
arrange(Phase)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
knitr::kable(.)
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
example <- list(mod = mods$preparation, data = graph_data$preparation)
list(`Preparation Phase` = list(name = "Pre-Teaching ", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Phase", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post Teaching Phase",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Phase",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Phase",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 6) +
theme_apa()
)
