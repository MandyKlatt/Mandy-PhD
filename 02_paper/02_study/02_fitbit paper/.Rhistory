summary(fit_pre_2)
fit_pre_3 <-
df_multi %>%
mutate(teaching_experience = log(teaching_experience + 1)) %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience:posneg)
summary(fit_pre_3)
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ confidence:posneg + disruption:posneg)
summary(fit_pre_4)
fit_pre_5 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ posneg:confidence + posneg:disruption + posneg:teaching_experience)
summary(fit_pre_5)
stargazer::stargazer(fit_pre_1, fit_pre_2,fit_pre_3, fit_pre_4, fit_pre_5,
type = "html",
caption = "Pre Teaching Phase",
dep.var.labels = "Slope",
# order = c(1, 2, 3),
# covariate.labels = c("Disruption Factor",
#                      "Confidence Factor",
#                      "Teaching Experience"),
keep.stat = c("n","rsq","adj.rsq")
)
fit_pre_3$model %>%
mutate(fitted.values = fit_pre_3$fitted.values) %>%
ggplot(mapping = aes(x = teaching_experience,
y = slope
)
) +
geom_point(mapping = aes(group = posneg)) +
geom_line(mapping = aes(y = fitted.values,
group = posneg)) +
geom_smooth(method = "lm",
se = F,
linetype = "dashed") +
# geom_point(alpha = 0.5,
#            size = 0.5) +
theme_apa()
summary(fit_pre_5)
summary(fit_pre_4)
mods <-
df_regression %>%
split(.$time_span) %>%
map(~ lm(formula = heart_rate_std ~ 0 + ID + time:ID,
data = .
)
)
graph_data <-
df_regression %>%
split(.$time_span)
example <- list(mod = mods$preparation, data = graph_data$preparation)
list(`Preparation Phase` = list(name = "Pre-Teaching Interval", mod = mods$preparation, data = graph_data$preparation),
`Teaching Phase` = list(name = "Teaching Interval", mod = mods$teaching, data = graph_data$teaching),
`Post Teaching Phase` = list(name = "Post-Teaching Interval",mod = mods$post, data = graph_data$post),
`Interview Phase` = list(name = "Interview Interval",mod = mods$interview, data = graph_data$interview),
`End Phase` = list(name = "End Interval",mod = mods$end, data = graph_data$end)
) %>%
map(~ ggplot(data = .$data,
mapping = aes(x = time,
y = heart_rate_std,
group = ID)) +
geom_line(mapping = aes(y = fitted(.$mod)),
color = "blue",
size = 1) +
geom_point(alpha = 0.5,
size = 0.5) +
labs(title = .$name,
y = "Heart Rate (Standardized)",
x = "Time (in Seconds)") +
facet_wrap( ~ ID, nrow = 6) +
theme_apa()
)
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_pre
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
pcor_pre
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
cor()  -> cor_pre
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
cor_pre
library("papaja")
r_refs("r-references.bib")
# install.packages("pak")
# install.packages("papaja")
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
# merge two data frames by ID
df_merge <- merge(df_demo_all,
df_rating,
by = "ID")
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end_phase",
str_detect(string = id, pattern = "_m") ~ "teaching_phase",
str_detect(string = id, pattern = "_p") ~ "pre-teaching_phase",
str_detect(string = id, pattern = "_s") ~ "post-teaching_phase",
str_detect(string = id, pattern = "_i") ~ "interview_phase",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
# Mean, SD and range for overall (unstandardized)
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
descrip_hr_overall
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
descrip_hr_overall_std
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = mean(heart_rate_std),
"SD std heart rate in bpm" = sd(heart_rate_std),
"Min std heart rate in bpm" = min(heart_rate_std),
"Max heart rate in bpm" = max(heart_rate_std)
)
descrip_hr_overall_std
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
cor()  -> cor_pre
cor_pre
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
cor()  -> cor_pre
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
cor_pre
library(needs)
needs(ltm,
xtable,
broom,
ppcor,
jtools,
lm.beta,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
lmerTest,
viridis,
gridExtra,
gridtext,
magrittr,
PerformanceAnalytics,
Hmisc,
corrplot,
tidyverse,
ggplot2,
apaTables)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
"disruption_factor", # -99 = subject did not notice event; -100 = experimenter did not asked for event
"confidence_factor",
"event"
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end",
str_detect(string = id, pattern = "_m") ~ "teaching",
str_detect(string = id, pattern = "_p") ~ "preparation",
str_detect(string = id, pattern = "_s") ~ "post",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
distinct() %>%
group_by(ID) %>%
dplyr::summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
cor()  -> cor_pre
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
cor_pre
knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
knitr::kable(x = list(cor_main$estimate, cor_main$p.value), format = "simple")
knitr::kable(x = list(main$estimate, main$p.value), format = "simple")
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
pcor()  -> pcor_pre
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
pcor_pre
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
gender = if_else(gender == "male",
true = 0,
false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) %>%
cor.test()  -> cor_pre
pcor_teaching
cor.test(heart_rate_m, confidence_factor_m, method=c("pearson"))
cor.test(main$heart_rate_m, main$confidence_factor_m, method=c("pearson"))
