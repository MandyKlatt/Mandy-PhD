y = .$mean_slope[.$Phase == "End Phase"],
pooled = T)
df_ttest_slope %$%
t.test(x = .$mean_slope[.$Phase == "Interview Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
paired = T)
df_ttest_slope %$%
CohenD(x = .$mean_slope[.$Phase == "Interview Phase"],
y = .$mean_slope[.$Phase == "End Phase"],
pooled = T)
main %>%
filter(time_span == "preparation") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
# gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_pre
# heart rate ~
cor.test(cor_pre$heart_rate_m, cor_pre$teaching_experience)
cor.test(cor_pre$heart_rate_m, cor_pre$disruption_factor_m)
cor.test(cor_pre$heart_rate_m, cor_pre$confidence_factor_m)
# teaching experience ~
cor.test(cor_pre$teaching_experience, cor_pre$disruption_factor_m)
cor.test(cor_pre$teaching_experience, cor_pre$confidence_factor_m)
# disruption factor ~
cor.test(cor_pre$disruption_factor_m, cor_pre$confidence_factor_m)
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
main %>%
filter(time_span == "teaching") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
# gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_teaching
# heart rate ~
cor.test(cor_teaching$heart_rate_m, cor_teaching$teaching_experience)
cor.test(cor_teaching$heart_rate_m, cor_teaching$disruption_factor_m)
cor.test(cor_teaching$heart_rate_m, cor_teaching$confidence_factor_m)
# teaching experience ~
cor.test(cor_teaching$teaching_experience, cor_teaching$disruption_factor_m)
cor.test(cor_teaching$teaching_experience, cor_teaching$confidence_factor_m)
# disruption factor ~
cor.test(cor_teaching$disruption_factor_m, cor_teaching$confidence_factor_m)
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
main %>%
filter(time_span == "post") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
# gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_post
# heart rate ~
cor.test(cor_post$heart_rate_m, cor_post$teaching_experience)
cor.test(cor_post$heart_rate_m, cor_post$disruption_factor_m)
cor.test(cor_post$heart_rate_m, cor_post$confidence_factor_m)
# teaching experience ~
cor.test(cor_post$teaching_experience, cor_post$disruption_factor_m)
cor.test(cor_post$teaching_experience, cor_post$confidence_factor_m)
# disruption factor ~
cor.test(cor_post$disruption_factor_m, cor_post$confidence_factor_m)
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
main %>%
filter(time_span == "interview") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
# gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_interview
# heart rate ~
cor.test(cor_interview$heart_rate_m, cor_interview$teaching_experience)
cor.test(cor_interview$heart_rate_m, cor_interview$disruption_factor_m)
cor.test(cor_interview$heart_rate_m, cor_interview$confidence_factor_m)
# teaching experience ~
cor.test(cor_interview$teaching_experience, cor_interview$disruption_factor_m)
cor.test(cor_interview$teaching_experience, cor_interview$confidence_factor_m)
# disruption factor ~
cor.test(cor_interview$disruption_factor_m, cor_interview$confidence_factor_m)
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
main %>%
filter(time_span == "end") %>%
group_by(ID) %>%
transmute(heart_rate_m = mean(heart_rate_std),
confidence_factor_m = mean(confidence_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
teaching_experience = teaching_experience,
# gender = gender
) %>%
distinct() %>%
ungroup() %>%
transmute(heart_rate_m = (heart_rate_m - mean(.$heart_rate_m))/sd(.$heart_rate_m),
confidence_factor_m = (confidence_factor_m - mean(.$confidence_factor_m))/sd(.$confidence_factor_m),
disruption_factor_m = (disruption_factor_m - mean(.$disruption_factor_m))/sd(.$disruption_factor_m),
# gender = if_else(gender == "male",
#                   true = 0,
#                   false = 1),
teaching_experience = (teaching_experience - mean(.$teaching_experience))/sd(.$teaching_experience)
) -> cor_end
# heart rate ~
cor.test(cor_end$heart_rate_m, cor_end$teaching_experience)
cor.test(cor_end$heart_rate_m, cor_end$disruption_factor_m)
cor.test(cor_end$heart_rate_m, cor_end$confidence_factor_m)
# teaching experience ~
cor.test(cor_end$teaching_experience, cor_end$disruption_factor_m)
cor.test(cor_end$teaching_experience, cor_end$confidence_factor_m)
# disruption factor ~
cor.test(cor_end$disruption_factor_m, cor_end$confidence_factor_m)
# knitr::kable(x = list(pcor_main$estimate, pcor_main$p.value), format = "simple")
main %>%
group_by(ID, time_span) %>%
summarise(disruption_factor = mean(disruption_factor,
na.rm = T),
confidence_factor = mean(confidence_factor,
na.rm = T),
teaching_experience = mean(teaching_experience),
heart_rate = mean(heart_rate_std)
) %>%
ungroup() -> data_regression_mean
for (i in unique(data_regression_mean$time_span)) {
cache <- data_regression_mean %>%
filter(time_span == i)
regr1 <-
lm(heart_rate ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(heart_rate ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(heart_rate ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(heart_rate ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_end1)
summary(regr_end2)
summary(regr_end3)
summary(regr_end4)
# delta RÂ²
summary(regr_end1)$r.squared - summary(regr_end2)$r.squared - summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
df_multi <-
main %>%
dplyr::select("ID",
"disruption_factor",
"confidence_factor",
"teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarise(disruption_factor = mean(disruption_factor, na.rm = T),
confidence_factor = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID),
) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id") %>%
mutate(time_span = factor(Phase,
levels = c("Pre Teaching Phase",
"Teaching Phase",
"Post Teaching Phase",
"Interview Phase",
"End Phase"),
labels = c("preparation",
"teaching",
"post",
"interview",
"end")
)
) %>%
dplyr::select("id",
"disruption_factor",
"confidence_factor",
"teaching_experience",
"slope",
"time_span")
# %>%
# mutate(slope = abs(slope))
# mutate(posneg = if_else(condition = slope < 0,
#                         true = "negative",
#                         false = "positive"))
for (i in unique(df_multi$time_span)) {
cache <- df_multi %>%
filter(time_span == i)
regr1 <-
lm(slope ~ teaching_experience,
data = cache)
assign(value = regr1,
x = paste0("regr_", i, "1"))
regr2 <-
lm(slope ~ teaching_experience + disruption_factor,
data = cache)
assign(value = regr2,
x = paste0("regr_", i, "2"))
regr3 <-
lm(slope ~ teaching_experience + confidence_factor,
data = cache)
assign(value = regr3,
x = paste0("regr_", i, "3"))
regr4 <-
lm(slope ~ teaching_experience + disruption_factor + confidence_factor,
data = cache)
assign(value = regr4,
x = paste0("regr_", i, "4"))
}
# Hier habe ich immer nur die Modelle getauscht. Also statt regr_end1 regr_teaching1 usw.
summary(regr_interview1)
summary(regr_interview2)
summary(regr_interview3)
summary(regr_interview4)
summary(regr_teaching2)$r.squared - summary(regr_teaching1)$r.squared
- summary(regr_end3)$r.squared - summary(regr_end4)$r.squared
df_heart_rate <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate") %>%
distinct() %>%
mutate(type = "a. Heart Rate (in beats per minute)")
df_heart_rate_std <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate_std") %>%
distinct() %>%
transmute(ID,
time,
type = "b. Heart Rate (standardized)",
heart_rate = heart_rate_std)
# left_join(x = df_heart_rate,
#           y = df_heart_rate_std,
#           by = c("ID","time")) %>%
bind_rows(df_heart_rate,
df_heart_rate_std
) %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.99) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 120, 10)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "Time (in Minutes)",
#y = "Heart Rate (in Beats per Minute)",
y = "",
# title = "Figure #",
# subtitle = "Overall Course of Average Heartrate",
#        caption = expression(paste(italic("Note: "),
# "The shadow around the line represents the 99% confidence interval. The confidence interval shown refers to the HR measurement points during the entire study period. We used the ggplot2 package (v3.3.3; Wickham, 2016) to calculate the moving average of the course."))
) +
#ggtitle("Overall Course of Average Heartrate") +
theme_apa() +
# theme(plot.subtitle = element_text(face = "italic"),
#       plot.caption = element_text(hjust = 0),
#       axis.line = element_line(colour = "black"),
#       panel.grid.major = element_blank(),
#       panel.grid.minor = element_blank(),
#       panel.border = element_blank(),
#       panel.background = element_blank()) +
facet_wrap(~ type,
ncol = 2,
scales = "free_y")
ggsave(filename = "plots_publication/loess_plot_std_unstd.png",
width = 16,
height = 12,
units = "cm")
df_heart_rate <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate") %>%
distinct() %>%
mutate(type = "a. Heart Rate (in Beats per Minute)")
df_heart_rate_std <-
main %>%
mutate(time = time / 60) %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time","heart_rate_std") %>%
distinct() %>%
transmute(ID,
time,
type = "b. Heart Rate (Standardized)",
heart_rate = heart_rate_std)
df_heart_rate %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.95) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0.01,0)) +
labs(x = "",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y") -> loess_hr
df_heart_rate_std %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_smooth(se = T,
size = 0.5,
colour = "black",
level = 0.95) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0.01,0)) +
scale_y_continuous(expand = c(0, 0.25)) +
labs(x = "",
y = "",
) +
theme_apa() +
facet_wrap(~ type,
ncol = 2,
scales = "free_y") -> loess_hr_std
loess_comp <- grid.arrange(loess_hr, loess_hr_std,
ncol = 2)
loess_comp <- annotate_figure(p = loess_comp,
bottom = 'Time (in Minutes)')
ggsave(loess_comp,
filename = "plots_publication/loess_plot_std_unstd_new.png",
width = 17,
height = 12,
units = "cm")
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
mutate(time_span = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("(1) Pre-teaching\nInterval","(2) Teaching\nInterval","(3) Post-teaching\nInterval","(4) Interview\nInterval","(5) End\nInterval"))) %>%
distinct() %>%
group_by(time_span) %>%
summarise(z_mean = mean(heart_rate_std),
z_sd = sd(heart_rate_std),
z_t = qt(p = 0.05 / 2,      # 0.01 KI
df = n() - 1,
lower.tail = F
),
z_error = z_sd / sqrt(n()),
lower = z_mean - z_t * z_error,
upper = z_mean + z_t * z_error,
) %>%
ungroup() %>%
ggplot(mapping = aes(x = factor(0),
y = z_mean)) +
geom_point() +
geom_errorbar(mapping = aes(ymin = lower,
ymax = upper),
width = 0.2) +
geom_hline(yintercept = 0,
linetype = "dashed") +
scale_y_continuous(breaks=seq(-1, 1, 0.5),
limits=c(-1.1, 1)) +
labs(x = "Time (in Minutes)",
y = "Standardized Mean Heart Rate",
# caption = expression(paste(italic("Note: "),
#                            "The shadow around the line represents the 99% confidence interval."
#                            )
#                      )
) +
facet_grid(cols = vars(time_span),
scales = "free_x") +
theme_apa() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.caption = element_text(hjust = 0))
df_multi <-
main %>%
dplyr::select("ID", "disruption_factor", "confidence_factor", "teaching_experience") %>%
distinct() %>%
group_by(ID) %>%
summarise(disruption_factor = mean(disruption_factor, na.rm = T),
confidence_factor = mean(confidence_factor, na.rm = T),
teaching_experience) %>%
ungroup() %>%
mutate(id = as.character(ID)) %>%
distinct() %>%
right_join(x = .,
y = fix_models,
by = "id")
fit_pre_1 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience)
summary(fit_pre_1)
fit_pre_2 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + disruption_factor)
summary(fit_pre_2)
summary(fit_pre_1)$r.squared - summary(fit_pre_2)$r.squared
fit_pre_3 <-
df_multi %>%
mutate(teaching_experience = log(teaching_experience + 1)) %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence_factor)
summary(fit_pre_3)
summary(fit_pre_1)$r.squared - summary(fit_pre_2)$r.squared - summary(fit_pre_3)$r.squared
fit_pre_4 <-
df_multi %>%
filter(Phase == "Pre Teaching Phase") %$%
lm(slope ~ teaching_experience + confidence_factor + disruption_factor)
summary(fit_pre_4)
stargazer::stargazer(fit_pre_1, fit_pre_2,fit_pre_3, fit_pre_4, fit_pre_5,
type = "html",
caption = "Pre Teaching Phase",
dep.var.labels = "Slope",
# order = c(1, 2, 3),
# covariate.labels = c("Disruption Factor",
#                      "Confidence Factor",
#                      "Teaching Experience"),
keep.stat = c("n","rsq","adj.rsq")
)
fit_pre_3$model %>%
mutate(fitted.values = fit_pre_3$fitted.values) %>%
ggplot(mapping = aes(x = teaching_experience,
y = slope
)
) +
geom_point(mapping = aes(group = posneg)) +
geom_line(mapping = aes(y = fitted.values,
group = posneg)) +
geom_smooth(method = "lm",
se = F,
linetype = "dashed") +
# geom_point(alpha = 0.5,
#            size = 0.5) +
theme_apa()
