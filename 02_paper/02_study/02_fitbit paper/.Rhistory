excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
) %>%
na.omit()
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# read in data
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
) %>%
na.omit()
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 9000) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 9000) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main %>%
dplyr::select("time",
"heart_rate",
"ID",
"time_span",
"teaching_experience",
"disruption_factor",
"confidence_factor") %>%
distinct() %>%
# filter(time_span == "overall") %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) -> main
# data wrangling - preparing data for anova
df_anova <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID",
"time_span",
"heart_rate_std",
"teaching_experience",
"disruption_factor",
"confidence_factor") %>%
mutate(time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Interviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Pre-Lehrphase",
"Lehrphase",
"Post-Lehrphase",
"Interviewphase",
"Endphase"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr_std = mean(heart_rate_std, na.rm = TRUE),
mean_confi = mean(confidence_factor, na.rm = TRUE),
mean_disrup = mean(disruption_factor, na.rm = TRUE),
mean_te = mean(teaching_experience, na.rm = TRUE)
)
# descriptive analysis
describeBy(df_anova$mean_hr_std,
df_anova$time_span)
df_anova_subset <- subset(df_anova, select = c(time_span, mean_hr_std))
# anova
df_anova_phase <-
aov(df_anova_subset$mean_hr_std ~ df_anova_subset$time_span)
summary(df_anova_phase)
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr_std,
df_anova_subset$time_span,
p.adjust="holm")
pwc
# effect size of ANOVA
EtaSq(df_anova_phase)
effect_size_anova <-
round(sqrt(0.6829502   /(1-0.6829502   )), 2)
effect_size_anova
# effect size of pairwise comparisons
library(dplyr)
library(rstatix)
effect_size_pwc <-
df_anova_subset %>%
cohens_d(mean_hr_std ~ time_span) %>%
as.data.frame()
effect_size_pwc
pwc
# data wrangling - preparing data for plotting
df_plot_mean_std <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("time_span",
"heart_rate_std") %>%
mutate(time_span = fct_recode(time_span,
"(1) Pre-Lehrphase" = "pre",
"(2) Lehrphase" = "main",
"(3) Post-Lehrphase" = "subsequent",
"(4) Interviewphase" = "interview",
"(5) Endphase" = "after"
),
time_span = factor(time_span,
levels = c("(1) Pre-Lehrphase",
"(2) Lehrphase",
"(3) Post-Lehrphase",
"(4) Interviewphase",
"(5) Endphase"
)
)
) %>%
distinct() %>%
group_by(time_span) %>%
summarise_at(vars(heart_rate_std),
list(mean_hr_std = mean,
sd_hr_std = sd)
) %>%
as.data.frame()
View(df_plot_mean_std)
loess_plot_overall_std <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0, NA),
breaks = seq(0, 7200, 600)) +
scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Zeit (in Sekunden)",
y = "z-standardisierte Herzrate") +
ggtitle("Gesamtverlauf der durchschnittlichen Herzraten (standardisiert)") +
theme_apa()
loess_plot_overall_std
loess_plot_overall_std <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0, NA),
breaks = seq(0, 7200, 600)) +
# scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Zeit (in Sekunden)",
y = "z-standardisierte Herzrate") +
ggtitle("Gesamtverlauf der durchschnittlichen Herzraten (standardisiert)") +
theme_apa()
loess_plot_overall_std
loess_plot_overall_std <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0, NA),
breaks = seq(0, 7200, 600)) +
xlim=c(0,7200) +
# scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Zeit (in Sekunden)",
y = "z-standardisierte Herzrate") +
ggtitle("Gesamtverlauf der durchschnittlichen Herzraten (standardisiert)") +
theme_apa()
loess_plot_overall_std <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
# scale_x_continuous(expand = c(0, NA),
#                    breaks = seq(0, 7200, 600)) +
xlim=c(0,7200) +
# scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Zeit (in Sekunden)",
y = "z-standardisierte Herzrate") +
ggtitle("Gesamtverlauf der durchschnittlichen Herzraten (standardisiert)") +
theme_apa()
loess_plot_overall_std <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate_std
),
xlim = c(0, 7200)
)+
# geom_point(alpha = 0.05) +
geom_smooth(se = FALSE,
size = 0.5,
colour = "black") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
scale_x_continuous(expand = c(0, NA),
breaks = seq(0, 7200, 600)) +
# scale_y_continuous(breaks = seq(0, 160, 5)) +
labs(x = "Zeit (in Sekunden)",
y = "z-standardisierte Herzrate") +
ggtitle("Gesamtverlauf der durchschnittlichen Herzraten (standardisiert)") +
theme_apa()
loess_plot_overall_std
# read in data
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
) %>%
na.omit()
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 9000) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main %>%
dplyr::select("time",
"heart_rate",
"ID",
"time_span",
"teaching_experience",
"disruption_factor",
"confidence_factor") %>%
distinct() %>%
# filter(time_span == "overall") %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) -> main
# data wrangling - preparing data for anova
df_anova <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID",
"time_span",
"heart_rate_std",
"teaching_experience",
"disruption_factor",
"confidence_factor") %>%
mutate(time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Interviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Pre-Lehrphase",
"Lehrphase",
"Post-Lehrphase",
"Interviewphase",
"Endphase"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr_std = mean(heart_rate_std, na.rm = TRUE),
mean_confi = mean(confidence_factor, na.rm = TRUE),
mean_disrup = mean(disruption_factor, na.rm = TRUE),
mean_te = mean(teaching_experience, na.rm = TRUE)
)
df_lm_subset <- df_anova %>%
filter(time_span == "Lehrphase") %>%
dplyr::select(mean_hr_std,
mean_disrup,
mean_confi,
mean_te)
# modell rechnen
modell <-   lm(mean_hr_std ~ mean_confi + mean_disrup + mean_te,
data = df_lm_subset,
family = binomial)
summary(modell)
# modell rechnen
modell <-   lm(mean_hr_std ~ mean_confi + mean_disrup + mean_te,
data = df_lm_subset,
family = binomial)
summary(modell)
# modell rechnen
modell <-   lm(mean_hr_std ~ mean_confi + mean_disrup + mean_te,
data = df_lm_subset,
family = binomial)
summary(modell)
# robuste Standardfehler
coeftest(modell, vcov = vcovHC(modell, type = "HC3"))
# modell rechnen
modell <-   lm(mean_hr_std ~ mean_confi + mean_disrup + mean_te,
data = df_lm_subset,
family = binomial)
summary(modell)
# standardisierte Koeffizienten
zmodell <- lm(scale(mean_hr_std) ~ scale(mean_confi) + scale (mean_disrup) + scale(mean_te),
data = df_lm_subset)
summary(zmodell)
