y = heart_rate
)
) +
geom_line(mapping = aes(color = as_factor(ID)),
stat = "smooth",
method = "lm",
alpha = 0.6) +
geom_point(mapping = aes(color = as_factor(ID)),
alpha = 0.1) +
geom_line(stat = "smooth",
method = "lm",
linetype = 2) +
labs(x = "Time (in seconds)",
y = "Heart Rate (in beats per minute)") +
theme(legend.position = "none",
text = element_text(family = "serif"))
knitr::kable(df_corr[1:10,], format = "simple")
df_corr_pre %>%
select("ID","Estimate") %>%
knitr::kable(.[1:5,], format = "simple")
main %>%
filter(time_span == "pre") %>%
select("time","ID","heart_rate","age") %>%
distinct() %>%
mutate(ID = as_factor(ID)) %>%
lmer(formula = heart_rate ~ (1|ID) + ID * time) %>%
summary() ->
fit_first
as_tibble(fit_first$coefficients,
rownames = "Coefficient") %>%
filter(str_detect(.$Coefficient,
pattern = "time")) %>%
mutate(coefficient = case_when(Coefficient == "time" ~ "101",
TRUE ~ Coefficient),
ID = str_extract(string = coefficient,
pattern = "[:digit:]{3}"
),
ID = as.numeric(ID)
) %>%
select("ID","Estimate") ->
df_estimates
df_merge %>%
group_by(ID) %>%
summarize(confident_factor_m = mean(confident_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
ID = ID,
t_exp = teaching_experience) %>%
distinct() %>%
left_join(., df_estimates,
by = "ID") ->
df_corr_pre
df_corr_pre %>%
select("ID","Estimate") %>%
knitr::kable(.[1:5,], format = "simple")
df_corr_pre %>%
select("ID","Estimate")
df_corr_pre %>%
select("ID","Estimate") %>%
filter(ID < 110) %>%
knitr::kable(., format = "simple")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(ltm,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -88 = actor did not perform the event; -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -88 = actor did not perform the event; -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
View(df_demo)
View(df_merge)
View(df_merge)
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -88 = actor did not perform the event; -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -88 = actor did not perform the event; -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -88 = actor did not perform the event; -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
data_path <- "./data/heart_rate_data new"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
data_path <- "./data/heart_rate_data_new"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(ltm,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -88 = actor did not perform the event; -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
