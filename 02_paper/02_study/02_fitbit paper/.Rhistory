map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
bind_rows()
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600)
main <-
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600)
main <-
main <-
pattern = ".csv"),
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
)
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
dplyr::select(!c("time","heart_rate","ID"
)
) %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236"
)
) %>%
bind_rows()
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end",
str_detect(string = id, pattern = "_m") ~ "teaching",
str_detect(string = id, pattern = "_p") ~ "preparation",
str_detect(string = id, pattern = "_s") ~ "post",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
View(main)
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(df_demo$gender == 2, "1","0")
# changing character Gender into numeric
df_demo$gender <- as.numeric(df_demo$gender)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
mutate(sum_participants = sum(n()))
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- "1"
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
df_demo$percent_schooltype <- as.numeric(df_demo$percent_schooltype)
#changing type of school into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
df_demo$school_type <- factor(x = df_demo$school_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
)
# # format and insert table in manuscript
# df_demo_table %>%
# papaja::apa_table(
#   caption = "Demographic Information",
#   # note = "Write Note here",
#   escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
#   placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
#   font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
#   )
View(df_demo_table)
# Mean, SD and range for overall
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise("M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise("M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for disruption and confidence factor
rating_table <-
df_rating %>%
filter(!is.na(confidence_factor),
!is.na(disruption_factor)) %>%
summarise("M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confidence factor" = round(mean(confidence_factor),
digits = 2),
"SD confidence factor" = round(sd(confidence_factor),
digits = 2),
"Min confidence factor" = min(confidence_factor),
"Max confidence factor" = max(confidence_factor)
)
View(rating_table)
# Mean, SD and range for disruption and confidence factor
rating_table <-
df_rating %>%
filter(!is.na(confidence_factor),
!is.na(disruption_factor)) %>%
summarise(N = n(),
"M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confidence factor" = round(mean(confidence_factor),
digits = 2),
"SD confidence factor" = round(sd(confidence_factor),
digits = 2),
"Min confidence factor" = min(confidence_factor),
"Max confidence factor" = max(confidence_factor)
)
View(rating_table)
View(df_rating)
# Mean, SD and range for disruption and confidence factor
rating_table <-
df_rating %>%
filter(!is.na(confidence_factor),
!is.na(disruption_factor)) %>%
summarise(N = n_distinct(ID),
"M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confidence factor" = round(mean(confidence_factor),
digits = 2),
"SD confidence factor" = round(sd(confidence_factor),
digits = 2),
"Min confidence factor" = min(confidence_factor),
"Max confidence factor" = max(confidence_factor)
)
View(df_rating)
View(rating_table)
# Mean, SD and range for overall
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise("M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID)
"M heart rate in bpm" = round(mean(heart_rate),
# Mean, SD and range for individual phases
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
View(descrip_hr_overall)
# Mean, SD and range for overall
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
View(descrip_hr_overall)
View(descrip_hr_overall)
View(main)
View(descrip_hr_phases)
View(main)
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "end_phase",
str_detect(string = id, pattern = "_m") ~ "teaching_phase",
str_detect(string = id, pattern = "_p") ~ "pre-teaching_phase",
str_detect(string = id, pattern = "_s") ~ "post-teaching_phase",
str_detect(string = id, pattern = "_i") ~ "interview_phase",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 7200) %>% # filter for 2 hours 30min (maximal duration of study)
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
main <-
main %>%
dplyr::select("time", "heart_rate", "ID", "time_span") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
) %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = main,
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart) %>%
filter(!(time_span == "teaching" & time > 600))
# Mean, SD and range for overall
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases (standardized)
descrip_hr_phases_std <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min heart rate in bpm" = min(heart_rate_std),
"Max heart rate in bpm" = max(heart_rate_std)
)
View(descrip_hr_phases_std)
# Mean, SD and range for individual phases (standardized)
descrip_hr_phases_std <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N = n_distinct(ID),
"M heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max std heart rate in bpm" = round(max(heart_rate_std),
digitis = 2)
)
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max std heart rate in bpm" = round(max(heart_rate_std),
digitis = 2)
)
# Mean, SD and range for overall (standardized)
descrip_hr_overall_std <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N = n_distinct(ID),
"M std heart rate in bpm" = round(mean(heart_rate_std),
digits = 2),
"SD std heart rate in bpm" = round(sd(heart_rate_std),
digits = 2),
"Min std heart rate in bpm" = round(min(heart_rate_std),
digits = 2),
"Max heart rate in bpm" = round(max(heart_rate_std),
digits = 2)
)
View(descrip_hr_overall_std)
