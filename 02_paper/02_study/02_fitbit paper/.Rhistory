View(main)
df_anova <-
main %>%
filter(time_span != "overall") %>%
select("ID",
"time_span",
"heart_rate",
"teaching_experience",
"disruption_factor",
"confidence_factor") %>%
mutate(time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Interviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Pre-Lehrphase",
"Lehrphase",
"Post-Lehrphase",
"Interviewphase",
"Endphase"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr = mean(heart_rate, na.rm = TRUE),
mean_te = mean(teaching_experience, na.rm = TRUE)
)
df_anova <-
main %>%
filter(time_span != "overall") %>%
select("ID",
"time_span",
"heart_rate",
"teaching_experience",
"mean_disrup",
"mean_confi") %>%
mutate(time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Interviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Pre-Lehrphase",
"Lehrphase",
"Post-Lehrphase",
"Interviewphase",
"Endphase"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr = mean(heart_rate, na.rm = TRUE),
mean_te = mean(teaching_experience, na.rm = TRUE)
)
View(df_anova)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
) %>%
na.omit() %>%
# group_by(ID) %>%
# summarise("mean_disrup" = round(mean(disruption_factor), 2),
#           "mean_confi" = round(mean(confidence_factor), 2))
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
) %>%
na.omit()
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 9000) %>% # filter for 2 hours 30min (maximal duration of study)
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 9000) %>% # filter for 2 hours 30min (maximal duration of study)
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
df_anova <-
main %>%
filter(time_span != "overall") %>%
select("ID",
"time_span",
"heart_rate",
"teaching_experience",
"disruption_factor",
"confidence_factor") %>%
mutate(time_span = fct_recode(time_span,
"Pre-Lehrphase" = "pre",
"Lehrphase" = "main",
"Post-Lehrphase" = "subsequent",
"Interviewphase" = "interview",
"Endphase" = "after"
),
time_span = factor(time_span,
levels = c("Pre-Lehrphase",
"Lehrphase",
"Post-Lehrphase",
"Interviewphase",
"Endphase"
)
)
) %>%
distinct() %>%
group_by(ID, time_span) %>%
summarise(mean_hr = mean(heart_rate, na.rm = TRUE),
mean_confi = mean(disruption_factor, na.rm = TRUE),
mean_disrup = mean(disruption_factor, na.rm = TRUE),
mean_te = mean(teaching_experience, na.rm = TRUE)
)
View(df_anova)
# check for outliers
outliers <-
df_anova %>%
group_by(time_span) %>%
identify_outliers(mean_hr)
View(outliers)
# check for normality assumption --> can be checked by computing Shapiro-Wilk test for each time point. If the data is normally distributed, the p-value should be greater than 0.05
norm_assump <-
df_anova %>%
group_by(time_span) %>%
shapiro_test(mean_hr)
View(norm_assump)
ggqqplot(df_anova, "mean_hr", facet.by = "time_span")
ggqqplot
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean_hr,
wid = ID,
within = time_span)
get_anova_table(res.aov)
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean_hr,
wid = ID,
within = time_span)
bxp <- ggboxplot(df_anova, x = "time_span", y = "mean_hr", add = "point")
bxp
bxp
# check for outliers
outliers <-
df_anova %>%
group_by(time_span) %>%
identify_outliers(mean_hr)
# check for normality assumption --> can be checked by computing Shapiro-Wilk test for each time point. If the data is normally distributed, the p-value should be greater than 0.05
norm_assump <-
df_anova %>%
group_by(time_span) %>%
shapiro_test(mean_hr)
plot <-
ggqqplot(df_anova, "mean_hr", facet.by = "time_span")
plot
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean_hr,
wid = id,
within = time_span)
# anova expert novice
res.aov2 <- rstatix::anova_test(data = df_anova,
dv = mean,
between = status,
wid = id,
within = type)
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean_hr,
wid = ID,
within = time_span)
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean_hr,
wid = ID,
within = time_span)
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean_hr,
wid = id,
within = time_span)
# anova
res.aov <- anova_test(data = df_anova,
dv = mean_hr,
wid = ID,
within = time_span)
?subset
df_anova_subset <- subset(df_anova, select = c(ID, time_span, mean_hr))
View(df_anova_subset)
# anova
res.aov <- anova_test(data = df_anova_subset,
dv = mean_hr,
wid = ID,
within = time_span)
View(df_anova_subset)
head(df_anova_subset)
?anova_test
# anova
res.aov <- anova_test(data = df_anova_subset,
dv = mean_hr,
wid = ID,
within = time_span)
df_anova_subset <- subset(df_anova, select = c(ID, time_span, mean_hr)) %>%
as.factor(df_anova_subset$ID)
df_anova_subset <- as.factor(df_anova_subset$ID)
head(df_anova_subset)
df_anova_subset <- subset(df_anova, select = c(ID, time_span, mean_hr))
df_anova_subset$ID <- as.factor(df_anova_subset$ID)
head(df_anova_subset)
# anova
res.aov <- anova_test(data = df_anova_subset,
dv = mean_hr,
wid = ID,
within = time_span)
# anova
res.aov <- rstatix::anova_test(data = df_anova_subset,
dv = mean_hr,
wid = ID,
within = time_span)
# anova
res.aov <- rstatix::anova_test(data = df_anova_subset,
dv = mean_hr,
wid = id,
within = time_span)
res.aov <- anova_test(data = df_anova_subset,
dv = mean_hr,
wid = id,
within = time_span)
# anova
res.aov <- rstatix::anova_test(data = df_anova_subset,
dv = mean_hr,
wid = `ID`,
within = time_span)
# anova
df_anova_phase <- aov(df_anova_subset$mean_hr~df_anova_subset$time_span)
summary(df_anova_phase)
# pairwise comparisons
pwc <- df_anova_subset %>%
pairwise_t_test(
mean_hr ~ time_span, paired = TRUE,
p.adjust.method = "bonferroni"
)
# pairwise comparisons
pwc <- df_anova_subset %>%
pairwise_t_test(
mean_hr ~ time_span, paired = TRUE,
p.adjust.method = "bonferroni"
)
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr~df_anova_subset$time_span, p.adjust="bonferroni")
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "time_span")
pwc
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
pwc
knitr::opts_chunk$set(echo = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr)
# # anova
res.aov <- rstatix::anova_test(data = df_anova_subset,
dv = mean_hr,
wid = ,
within = time_span)
# anova
df_anova_phase <- aov(df_anova_subset$mean_hr~df_anova_subset$time_span)
summary(df_anova_phase)
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
# pairwise comparisons
pwc <- df_anova_subset %>%
pairwise_t_test(
mean_hr ~ time_span, paired = TRUE,
p.adjust.method = "bonferroni"
)
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
pwc
install.packages("DescTools")
install.packages("DescTools")
library(DescTools)
EtaSq(anova_training)
EtaSq(df_anova_phase)
sqrt(0.3399757/1-0.3399757)
sqrt(0.3399757/(1-0.3399757))
effect_size_anova <-
sqrt(0.3399757/(1-0.3399757))
effect_size_anova
# effect size of pairwise comparisons
library(dplyr)
library(rstatix)
data_anova_phase %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
df_anova_phase %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
df_anova_phase %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
df_anova_subset %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
df_anova_subset %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
df_anova_subset <- subset(df_anova, select = c(time_span, mean_hr))
df_anova_subset %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
# anova
df_anova_phase <-
aov(df_anova_subset$mean_hr~df_anova_subset$time_span)
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
pwc
df_anova_subset %>%
cohens_d(mean_hr~time_span) %>%
as.data.frame()
library("papaja")
r_refs("r-references.bib")
# Mean, SD and range for overall
descrip_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise("M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
# Mean, SD and range for individual phases
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise("M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
View(descrip_hr_phases)
# anova
df_anova_phase <-
aov(df_anova_subset$mean_hr~df_anova_subset$time_span)
summary(df_anova_phase)
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="bonferroni")
pwc
View(pwc)
?pairwise.t.test
# pairwise comparisons
pwc <-
pairwise.t.test(df_anova_subset$mean_hr,
df_anova_subset$time_span,
p.adjust="holm")
pwc
# QQ plot draws the correlation between a given data and the normal distribution.
plot <-
ggqqplot(df_anova, "mean_hr", facet.by = "time_span")
# QQ plot draws the correlation between a given data and the normal distribution.
plot <-
ggqqplot(df_anova, "mean_hr", facet.by = "time_span")
