confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor),
event = as_factor(event)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = factor(LI02_01_1,
levels = 1:2,
labels = c("male","female")
),
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
# filter(time <= 600) %>% # filter for 10min intervals
filter(time <= 9000) %>% # filter for 2 hours 30min (maximal duration of study)
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
knitr::kable(main[1:10,], format = "simple")
main %>%
filter(time_span == "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
# stat_smooth(geom = "line",
#             method = "loess",
#             se = FALSE) +
geom_smooth(method = "loess",
se = FALSE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa()
main %>%
filter(time_span == "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
# stat_smooth(geom = "line",
#             method = "loess",
#             se = FALSE) +
geom_smooth(method = "loess",
se = TRUE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa()
main %>%
filter(time_span == "overall") %>%
select("ID","time_span", "time","heart_rate") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
stat_smooth(geom = "line",
method = "loess",
se = TRUE) +
# geom_smooth(method = "loess",
#             se = TRUE) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate (in Schlägen pro Minute)") +
theme_apa()
df_demo_table
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(df_demo$gender == 2, "1","0")
# changing character Gender into numeric
df_demo$gender <- as.numeric(df_demo$gender)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
mutate(sum_participants = sum(n()))
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- "1"
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
df_demo$percent_schooltype <- as.numeric(df_demo$percent_schooltype)
#changing type of school into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
df_demo$school_type <- factor(x = df_demo$school_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
)
# # format and insert table in manuscript
# df_demo_table %>%
# papaja::apa_table(
#   caption = "Demographic Information",
#   # note = "Write Note here",
#   escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
#   placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
#   font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
#   )
View(df_demo_table)
View(df_merge)
View(df_demo_all)
View(main)
View(main)
df_merge %>%
filter(!is.na(confident_factor)) %>%
group_by(event, confident_factor) %>%
summarize(value = n()) %>%
mutate(prop = value/sum(value)) %>%
ggplot(mapping = aes(x = reorder(event, prop),
y = prop,
fill = confident_factor
)
) +
geom_bar(position = "stack",
stat = "identity") +
coord_flip() +
scale_fill_viridis_c() +
labs(y = "",
x = "",
fill = "Confident Factor") +
theme_apa()
View(df_merge)
df_merge %>%
filter(!is.na(confident_factor))
df_merge %>%
filter(!is.na(confident_factor)) %>%
group_by(event, confident_factor)
df_merge %>%
filter(!is.na(confident_factor)) %>%
group_by(event, confident_factor) %>%
summarize(value = n())
df_merge %>%
filter(!is.na(confident_factor)) %>%
group_by(event, confident_factor) %>%
summarize(value = n()) %>%
mutate(prop = value/sum(value))
df_merge %>%
filter(!is.na(confident_factor)) %>%
group_by(event, confident_factor) %>%
summarize(value = n()) %>%
mutate(prop = value/sum(value)) %>%
ggplot(mapping = aes(x = reorder(event, prop),
y = prop,
fill = confident_factor
)
) +
geom_bar(position = "stack",
stat = "identity") +
coord_flip() +
scale_fill_viridis_c() +
labs(y = "",
x = "",
fill = "Confident Factor") +
theme_apa()
df_merge %>%
filter(!is.na(confident_factor)) %>%
group_by(event, confident_factor) %>%
summarize(value = n()) %>%
mutate(prop = value/sum(value))
View(main)
main_descriptive <- main %>%
group_by(time_span, heart_rate)
View(main_descriptive)
main_descriptive <- main %>%
group_by(time_span)
View(main_descriptive)
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor),
event = as_factor(event)
)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17)
# merge two data frames by ID
df_merge <- merge(df_demo_all,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
View(main)
# main <-
#   left_join(main, df_merge,
#             by = "ID")
main_descriptive <- main %>%
filter(ID %in% c("overall"))
View(main_descriptive)
main_descriptive <- main %>%
filter(time_span %in% c("overall")) %>%
main_descriptive <- main %>%
filter(time_span %in% c("overall"))
main_descriptive <- main %>%
filter(time_span %in% c("overall"))
View(main_descriptive)
# Mean, SD and range for overall
main_descriptive <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N=n(),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
View(main_descriptive)
descriptive_hr_overall <- main %>%
filter(time_span %in% c("overall")) %>%
summarise(N=n(),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
rm(main_descriptive)
View(descriptive_hr_overall)
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall"))
View(descrip_hr_phases)
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span)
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise(N=n(),
"M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
View(descrip_hr_phases)
descrip_hr_phases <- main %>%
filter(!time_span %in% c("overall")) %>%
group_by(time_span) %>%
summarise("M heart rate in bpm" = round(mean(heart_rate),
digits = 2),
"SD heart rate in bpm" = round(sd(heart_rate),
digits = 2),
"Min heart rate in bpm" = min(heart_rate),
"Max heart rate in bpm" = max(heart_rate)
)
View(descrip_hr_phases)
View(df_demo)
View(df_demo_all)
View(df_demo_table)
View(df_merge)
View(descrip_hr_phases)
View(df_rating)
# Mean, SD and range for disruption and confident factor
rating_table <-
df_rating %>%
summarise("M disruption factor" = round(mean(heart_rate),
digits = 2),
"SD disruption factor" = round(sd(heart_rate),
digits = 2),
"Min disruption factor" = min(heart_rate),
"Max disruption factor" = max(heart_rate),
"M confident factor" = round(mean(heart_rate),
digits = 2),
"SD confident factor" = round(sd(heart_rate),
digits = 2),
"Min confident factor" = min(heart_rate),
"Max confident factor" = max(heart_rate)
)
# Mean, SD and range for disruption and confident factor
rating_table <-
df_rating %>%
summarise("M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confident factor" = round(mean(confident_factor),
digits = 2),
"SD confident factor" = round(sd(confident_factor),
digits = 2),
"Min confident factor" = min(confident_factor),
"Max confident factor" = max(confident_factor)
)
View(rating_table)
# Mean, SD and range for disruption and confident factor
rating_table <-
df_rating %>%
summarise("M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confident factor" = round(mean(confident_factor),
digits = 2),
"SD confident factor" = round(sd(confident_factor),
digits = 2),
"Min confident factor" = min(confident_factor),
"Max confident factor" = max(confident_factor)
)
View(rating_table)
df_rating
# Mean, SD and range for disruption and confident factor
rating_table <-
df_rating %>%
group_by(ID) %>%
summarise("M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confident factor" = round(mean(confident_factor),
digits = 2),
"SD confident factor" = round(sd(confident_factor),
digits = 2),
"Min confident factor" = min(confident_factor),
"Max confident factor" = max(confident_factor)
)
View(rating_table)
# Mean, SD and range for disruption and confident factor
rating_table <-
df_rating %>%
filter(!is.na(confident_factor),
!is.na(disruption_factor)) %>%
group_by(ID) %>%
summarise("M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confident factor" = round(mean(confident_factor),
digits = 2),
"SD confident factor" = round(sd(confident_factor),
digits = 2),
"Min confident factor" = min(confident_factor),
"Max confident factor" = max(confident_factor)
)
View(rating_table)
# Mean, SD and range for disruption and confident factor
rating_table <-
df_rating %>%
filter(!is.na(confident_factor),
!is.na(disruption_factor)) %>%
summarise("M disruption factor" = round(mean(disruption_factor),
digits = 2),
"SD disruption factor" = round(sd(disruption_factor),
digits = 2),
"Min disruption factor" = min(disruption_factor),
"Max disruption factor" = max(disruption_factor),
"M confident factor" = round(mean(confident_factor),
digits = 2),
"SD confident factor" = round(sd(confident_factor),
digits = 2),
"Min confident factor" = min(confident_factor),
"Max confident factor" = max(confident_factor)
)
View(rating_table)
