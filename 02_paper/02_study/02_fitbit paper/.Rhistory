<<<<<<< Updated upstream
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
=======
) +
scale_color_manual(values = c("80%" = "blue", "90%" = "red", "Baseline" = "black")) +
facet_grid(cols = vars(Phase))
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(data = linear_plot_data_80,
method = "lm",
se = FALSE,
size = 0.5,
mapping = aes(color = "80%")
) +
geom_smooth(data = linear_plot_data_90,
method = "lm",
se = FALSE,
size = 0.5,
mapping = aes(color = "90%")
) +
geom_smooth(data = linear_plot_data_all,
method = "lm",
se = FALSE,
size = 0.5,
linetype = "dashed",
mapping = aes(color = "Baseline")
) +
scale_color_manual(values = c("80%" = "blue", "90%" = "red", "Baseline" = "black")) +
labs(x = "Time (in Seconds)",
y = "Average Heart Rate (Standardized)",
color = "") +
facet_grid(cols = vars(Phase))
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(data = linear_plot_data_80,
method = "lm",
se = FALSE,
size = 0.5,
mapping = aes(color = "80%")
) +
geom_smooth(data = linear_plot_data_90,
method = "lm",
se = FALSE,
size = 0.5,
mapping = aes(color = "90%")
) +
geom_smooth(data = linear_plot_data_all,
method = "lm",
se = FALSE,
size = 0.5,
linetype = "dashed",
mapping = aes(color = "Baseline")
) +
scale_color_manual(values = c("80%" = "blue", "90%" = "red", "Baseline" = "black")) +
labs(x = "Time (in Seconds)",
y = "Average Heart Rate (Standardized)",
color = "") +
facet_grid(cols = vars(Phase)) +
theme_apa()
linear_plot_data_all %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
linear_plot_data_all %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
linear_plot_data_all %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
linear_plot_data_all %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
linear_plot_data_all %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
df_regression
df_regression <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std") %>%
distinct() %>%
mutate(ID = as_factor(ID))
table_data <-
df_regression %>%
split(.$time_span) %>%
map(~ lmer(formula = heart_rate_std ~ 1 + time + (1 + time | ID),
data = .
>>>>>>> Stashed changes
)
) %>%
map(~ tibble(time_span = names(.),
intercept = fixef(.)[[1]],
intercept_sd = VarCorr(.) %>% as_tibble() %>% .[1,5],
intercept_p = coef(summary(.))[1, 5],
slope = fixef(.)[[2]],
slope_sd = VarCorr(.) %>% as_tibble() %>% .[2,5],
slope_p = coef(summary(.))[2, 5]
)
) %>%
bind_rows(.id = "time_span") %>%
transmute(Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(intercept, digits = 3),
`SD(Intercept)` = round(intercept_sd$sdcor, digits = 3),
`p-Value (Intercept)` = round(intercept_p, digits = 3),
`Mean(Slope)` = round(slope, digits = 3),
`SD(Slope)` = round(slope_sd$sdcor, digits = 3),
`p-Value (Slope)` = round(slope_p, digits = 3)
)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
df_regression <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std") %>%
distinct() %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
))
table_data <-
df_regression %>%
split(.$Phase) %>%
map(~ lmer(formula = heart_rate_std ~ 1 + time + (1 + time | ID),
data = .
)
) %>%
map(~ tibble(time_span = names(.),
intercept = fixef(.)[[1]],
intercept_sd = VarCorr(.) %>% as_tibble() %>% .[1,5],
intercept_p = coef(summary(.))[1, 5],
slope = fixef(.)[[2]],
slope_sd = VarCorr(.) %>% as_tibble() %>% .[2,5],
slope_p = coef(summary(.))[2, 5]
)
) %>%
bind_rows(.id = "Phase") %>%
transmute(Phase = Phase,
n = NA,
`Mean(Intercept)` = round(intercept, digits = 3),
`SD(Intercept)` = round(intercept_sd$sdcor, digits = 3),
`p-Value (Intercept)` = round(intercept_p, digits = 3),
`Mean(Slope)` = round(slope, digits = 3),
`SD(Slope)` = round(slope_sd$sdcor, digits = 3),
`p-Value (Slope)` = round(slope_p, digits = 3)
)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
arrange(Phase) %>%
knitr::kable(., caption = "Overview")
df_regression <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std") %>%
distinct() %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
))
table_data <-
df_regression %>%
split(.$Phase) %>%
map(~ lmer(formula = heart_rate_std ~ 1 + time + (1 + time | ID),
data = .
)
) %>%
map(~ tibble(time_span = names(.),
intercept = fixef(.)[[1]],
intercept_sd = VarCorr(.) %>% as_tibble() %>% .[1,5],
intercept_p = coef(summary(.))[1, 5],
slope = fixef(.)[[2]],
slope_sd = VarCorr(.) %>% as_tibble() %>% .[2,5],
slope_p = coef(summary(.))[2, 5]
)
) %>%
bind_rows(.id = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(intercept, digits = 3),
`SD(Intercept)` = round(intercept_sd$sdcor, digits = 3),
`p-Value (Intercept)` = round(intercept_p, digits = 3),
`Mean(Slope)` = round(slope, digits = 3),
`SD(Slope)` = round(slope_sd$sdcor, digits = 3),
`p-Value (Slope)` = round(slope_p, digits = 3)
)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
arrange(Phase) %>%
knitr::kable(., caption = "Overview")
table_data <-
df_regression %>%
split(.$Phase) %>%
map(~ lmer(formula = heart_rate_std ~ 1 + time + (1 + time | ID),
data = .
)
) %>%
map(~ tibble(time_span = names(.),
intercept = fixef(.)[[1]],
intercept_sd = VarCorr(.) %>% as_tibble() %>% .[1,5],
intercept_p = coef(summary(.))[1, 5],
slope = fixef(.)[[2]],
slope_sd = VarCorr(.) %>% as_tibble() %>% .[2,5],
slope_p = coef(summary(.))[2, 5]
)
) %>%
bind_rows(.id = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(intercept, digits = 3),
`SD(Intercept)` = round(intercept_sd$sdcor, digits = 3),
`p-Value (Intercept)` = round(intercept_p, digits = 3),
`Mean(Slope)` = round(slope, digits = 3),
`SD(Slope)` = round(slope_sd$sdcor, digits = 3),
`p-Value (Slope)` = round(slope_p, digits = 3)
)
df_regression <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID", "time_span","time","heart_rate_std") %>%
distinct() %>%
mutate(ID = as_factor(ID),
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
))
table_data <-
df_regression %>%
split(.$Phase) %>%
map(~ lmer(formula = heart_rate_std ~ 1 + time + (1 + time | ID),
data = .
)
) %>%
map(~ tibble(time_span = names(.),
intercept = fixef(.)[[1]],
intercept_sd = VarCorr(.) %>% as_tibble() %>% .[1,5],
intercept_p = coef(summary(.))[1, 5],
slope = fixef(.)[[2]],
slope_sd = VarCorr(.) %>% as_tibble() %>% .[2,5],
slope_p = coef(summary(.))[2, 5]
)
) %>%
bind_rows(.id = "Phase") %>%
transmute(Phase = factor(Phase,
levels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
),
n = NA,
`Mean(Intercept)` = round(intercept, digits = 3),
`SD(Intercept)` = round(intercept_sd$sdcor, digits = 3),
`p-Value (Intercept)` = round(intercept_p, digits = 3),
`Mean(Slope)` = round(slope, digits = 3),
`SD(Slope)` = round(slope_sd$sdcor, digits = 3),
`p-Value (Slope)` = round(slope_p, digits = 3)
)
table_data$n[table_data$Phase == "Pre Teaching Phase"] <- df_regression %>% filter(Phase == "Pre Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Teaching Phase"] <- df_regression %>% filter(Phase == "Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Post Teaching Phase"] <- df_regression %>% filter(Phase == "Post Teaching Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "Interview Phase"] <- df_regression %>% filter(Phase == "Interview Phase") %>% pull(heart_rate_std) %>% length()
table_data$n[table_data$Phase == "End Phase"] <- df_regression %>% filter(Phase == "End Phase") %>% pull(heart_rate_std) %>% length()
table_data %>%
arrange(Phase) %>%
knitr::kable(., caption = "Overview")
select(main,
"ID","time_span", "time", "heart_rate")
main %>%
filter(time_span == "overall" &
time <= p_90) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate),
time) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)))
main %>%
filter(time_span == "overall" &
time <= p_90) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate),
time) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID")
<<<<<<< Updated upstream
View(df_demo_all)
View(df_demo_all)
View(df_demo_all)
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17)
# merge two data frames by ID
df_merge <- merge(df_demo_all,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132"
"236"
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(df_demo$gender == 2, "1","0")
# changing character Gender into numeric
df_demo$gender <- as.numeric(df_demo$gender)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
mutate(sum_participants = sum(n()))
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- "1"
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
df_demo$percent_schooltype <- as.numeric(df_demo$percent_schooltype)
#changing type of school into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
df_demo$school_type <- factor(x = df_demo$school_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
=======
main %>%
filter(time_span == "overall" &
time <= p_90) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID")
loess_plot_data_90 <-
main %>%
filter(time_span == "overall" &
time <= p_90) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
loess_plot_data_80 <-
main %>%
filter(time_span == "overall" &
time <= p_80) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)
) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
loess_plot_data_all <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("ID", "time", "heart_rate_std") %>%
distinct()
ggplot(mapping = aes(x = time,
y = heart_rate_std
)) +
geom_smooth(data = loess_plot_data_80,
aes(color = "80%")
) +
geom_smooth(data = loess_plot_data_90,
aes(color = "90%")) +
geom_smooth(data = loess_plot_data_all,
aes(color = "Baseline"),
linetype = "dashed") +
labs(x = "Time (in Seconds)",
y = "Average Heart Rate (Standardized)",
color = "Legend") +
scale_color_manual(values = c("80%" = "blue", "90%" = "red", "Baseline" = "black")) +
theme_apa()
View(loess_plot_data_all)
loess_plot_data_90 <-
main %>%
filter(time_span == "overall" &
time <= p_90) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
loess_plot_data_80 <-
main %>%
filter(time_span == "overall" &
time <= p_80) %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)
) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
loess_plot_data_all <-
main %>%
filter(time_span == "overall") %>%
dplyr::select("heart_rate", "ID", "time") %>%
distinct() %>%
group_by(ID) %>%
summarize(mean_heart = mean(heart_rate),
sd_heart = sd(heart_rate)
) %>%
ungroup() %>%
right_join(x = .,
y = distinct(select(main,
"ID","time_span", "time", "heart_rate"
)),
by = "ID") %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart)
ggplot(mapping = aes(x = time,
y = heart_rate_std
)) +
geom_smooth(data = loess_plot_data_80,
aes(color = "80%")
) +
geom_smooth(data = loess_plot_data_90,
aes(color = "90%")) +
geom_smooth(data = loess_plot_data_all,
aes(color = "Baseline"),
linetype = "dashed") +
labs(x = "Time (in Seconds)",
y = "Average Heart Rate (Standardized)",
color = "Legend") +
scale_color_manual(values = c("80%" = "blue", "90%" = "red", "Baseline" = "black")) +
theme_apa()
linear_plot_data_80 <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time", "heart_rate") %>%
distinct() %>%
left_join(x = .,
y = distinct(select(.data = loess_plot_data_80,
"ID", "mean_heart", "sd_heart")),
by = "ID"
) %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart,
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
)
)
linear_plot_data_90 <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time", "heart_rate") %>%
distinct() %>%
left_join(x = .,
y = distinct(select(.data = loess_plot_data_90,
"ID", "mean_heart", "sd_heart")),
by = "ID"
) %>%
mutate(heart_rate_std = (heart_rate - mean_heart)/
sd_heart,
Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
>>>>>>> Stashed changes
)
)
<<<<<<< Updated upstream
View(df_demo_table)
View(df_demo)
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
)
View(df_demo_table)
View(df_demo)
View(df_demo_all)
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17)
# merge two data frames by ID
df_merge <- merge(df_demo_all,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
View(df_demo)
library(needs)
needs(ltm,
broom,
ppcor,
jtools,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4,
viridis)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
dplyr::select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confidence_factor,
event
) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confidence_factor = ifelse(confidence_factor < 0,
yes = NA,
no = confidence_factor),
event = as_factor(event)
)
# demographic data
df_demo_all <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
# gender = factor(LI02_01_1,
#                 levels = 1:2,
#                 labels = c("male","female")
#                 ),
gender = LI02_01_1, # 1 = male; 2 = female
age = LI03_01,
teaching_experience = LI04_01,
school_type = LI18,
term = LI11_01,
extracurricular_teaching_experience = LI14,
secondary_teaching_activities = LI17)
# merge two data frames by ID
df_merge <- merge(df_demo_all,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132",
"236")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .),
id = "id",
col_types = c("t","n")
) %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre",
str_detect(string = id, pattern = "_s") ~ "subsequent",
str_detect(string = id, pattern = "_i") ~ "interview",
TRUE ~ "overall"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
dplyr::select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
View(df_demo_all)
main <-
left_join(main, df_merge,
by = "ID")
# exclude cases with no fitbit data
df_demo <- df_demo_all %>%
filter(!ID %in% c("126",
"132",
"236"
)
)
# changing gender to count female gender (male = 2 --> 0)
df_demo$gender = ifelse(df_demo$gender == 2, "1","0")
# changing character Gender into numeric
df_demo$gender <- as.numeric(df_demo$gender)
# creating new column with total participants to calculate percent of gender
df_demo <- df_demo %>%
mutate(sum_participants = sum(n()))
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
df_demo$school_type[df_demo$school_type == 2] <- "1"
# creating new column to calculate percent of school type
df_demo <-
df_demo %>%
group_by(school_type) %>%
mutate(count_schooltype = sum(n())) %>%
mutate(percent_schooltype = round((count_schooltype/sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
df_demo$percent_schooltype <- as.numeric(df_demo$percent_schooltype)
#changing type of school into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
df_demo$school_type <- factor(x = df_demo$school_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# create a basic table (tibble) using tidyverse functions
df_demo_table <- df_demo %>%
ungroup() %>%
summarise(N=n(),
"Gender female in percent" = round(sum(gender/sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(age),
digits = 2),
"SD Age in years" = round(sd(age),
digits = 2),
"Min Age in years" = min(age),
"Max Age in years" = max(age),
"M Teaching Experience in years" = round(mean(teaching_experience),
digits = 2),
"SD Teaching Experience in years" = round(sd(teaching_experience),
digits = 2),
"Min Teaching Experience in years" = min(teaching_experience),
"Max Teaching Experience in years" = max(teaching_experience)
)
# format and insert table in manuscript
df_demo_table %>%
papaja::apa_table(
caption = "Demographic Information",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
View(df_demo_table)
=======
linear_plot_data_all <-
main %>%
filter(time_span != "overall") %>%
dplyr::select("ID","time_span", "time","heart_rate_std") %>%
distinct() %>%
mutate(Phase = factor(time_span,
levels = c("preparation","teaching","post","interview","end"),
labels = c("Pre Teaching Phase","Teaching Phase","Post Teaching Phase","Interview Phase","End Phase")
))
ggplot(mapping = aes(x = time,
y = heart_rate_std
)
) +
# geom_point(alpha = 0.05) +
geom_smooth(data = linear_plot_data_80,
method = "lm",
se = FALSE,
size = 0.5,
mapping = aes(color = "80%")
) +
geom_smooth(data = linear_plot_data_90,
method = "lm",
se = FALSE,
size = 0.5,
mapping = aes(color = "90%")
) +
geom_smooth(data = linear_plot_data_all,
method = "lm",
se = FALSE,
size = 0.5,
linetype = "dashed",
mapping = aes(color = "Baseline")
) +
scale_color_manual(values = c("80%" = "blue", "90%" = "red", "Baseline" = "black")) +
labs(x = "Time (in Seconds)",
y = "Average Heart Rate (Standardized)",
color = "") +
facet_grid(cols = vars(Phase)) +
theme_apa()
>>>>>>> Stashed changes
