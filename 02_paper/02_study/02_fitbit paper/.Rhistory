summarize(confident_factor_m = mean(confident_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
ID = ID,
t_exp = teaching_experience) %>%
distinct() %>%
left_join(., df_estimates,
by = "ID") ->
df_corr
main %>%
filter(time_span == "pre") %>%
select("ID","time","heart_rate") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_line(mapping = aes(color = as_factor(ID)),
stat = "smooth",
method = "lm",
alpha = 0.6) +
geom_point(mapping = aes(color = as_factor(ID)),
alpha = 0.1) +
geom_line(stat = "smooth",
method = "lm",
linetype = 2) +
labs(x = "Time (in seconds)",
y = "Heart Rate (in beats per minute)") +
theme(legend.position = "none",
text = element_text(family = "serif"))
cor.test(df_corr$confident_factor_m,
df_corr$Estimate) ->
corr_conf
df_corr %>%
ggplot(mapping = aes(x = confident_factor_m,
y = Estimate
)
) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
annotate(geom = "text",
label = paste0("r = ", round(corr_conf$estimate, 2)),
x = 5.5,
y = -0.025,
family = "serif"
) +
theme(text = element_text(family = "serif"))
cor.test(df_corr$disruption_factor_m,
df_corr$Estimate) ->
corr_disrup
df_corr %>%
ggplot(mapping = aes(x = disruption_factor_m,
y = Estimate
)
) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
annotate(geom = "text",
label = paste0("r = ", round(corr_disrup$estimate, 2)),
x = 5.5,
y = -0.025,
family = "serif"
) +
theme(text = element_text(family = "serif"))
cor.test(df_corr$t_exp,
df_corr$Estimate) ->
corr_teach
df_corr %>%
ggplot(mapping = aes(x = t_exp,
y = Estimate
)
) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
annotate(geom = "text",
label = paste0("r = ", round(corr_teach$estimate, 2)),
x = 15,
y = -0.025,
family = "serif"
) +
theme(text = element_text(family = "serif"))
df_merge %>%
select("ID","disruption_factor") %>%
mutate(var_number = rep(letters[1:9],
times = length(unique(.$ID))
)
) %>%
pivot_wider(names_from = var_number,
values_from = disruption_factor,
id_cols = ID) %>%
select(!"ID") %>%
cronbach.alpha(na.rm = TRUE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(ltm,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4)
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
rm(list = c("df_demo","df_rating"))
# disruption & confidence rating
df_rating <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~read_xlsx("data/Coding_SRI.xlsx",.)) %>% # read in data with two sheets
select(ID, # select relevant columns
disruption_factor, # -99 = subject did not notice event; -100 = experimenter did not asked for event
confident_factor) %>%
mutate(disruption_factor = ifelse(disruption_factor < 0,
yes = NA,
no = disruption_factor
),
confident_factor = ifelse(confident_factor < 0,
yes = NA,
no = confident_factor)
)
# demographic data
df_demo <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>% # read in excel
transmute(ID = LI06_05, # select and rename relevant columns
gender = LI02_01_1,
age = LI03_01, # 1 = male; 2 = female
teaching_experience = LI04_01)
# merge two data frames by ID
df_merge <- merge(df_demo,
df_rating,
by = "ID") %>%
filter(!ID %in% c("126", # exclude cases with no fitbit data (to check see data Heart Rate)
"132")
)
# rm(list = c("df_demo","df_rating"))
data_path <- "./data/heart_rate_data"
data_path
dir(path = data_path,
pattern = ".csv")
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id")# %>%
# mutate(time = .$Time - min(.$Time),
#        time = as.numeric(time),
#        heart_rate = `Heart Rate`,
#        ID = id,
#        time_span = case_when(
#          str_detect(string = id, pattern = "_a") ~ "after",
#          str_detect(string = id, pattern = "_m") ~ "main",
#          str_detect(string = id, pattern = "_p") ~ "pre"
#          ),
#        ID = str_extract(string = ID,
#                         pattern = "[:digit:]{3}"),
#        ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id")# %>%
# mutate(time = .$Time - min(.$Time),
#        time = as.numeric(time),
#        heart_rate = `Heart Rate`,
#        ID = id,
#        time_span = case_when(
#          str_detect(string = id, pattern = "_a") ~ "after",
#          str_detect(string = id, pattern = "_m") ~ "main",
#          str_detect(string = id, pattern = "_p") ~ "pre"
#          ),
#        ID = str_extract(string = ID,
#                         pattern = "[:digit:]{3}"),
#        ID = as.numeric(ID)
#     ) %>%
#     filter(time <= 600) %>%
#   select(!c("Time","Heart Rate","id"))
#   ) %>%
# bind_rows()
)
View(main)
main[[1]]
main[[1]]
main <-
map(.x = dir(path = data_path,
pattern = ".csv"),
~ read_csv(file.path(data_path, .), id = "id") %>%
mutate(time = .$Time - min(.$Time),
time = as.numeric(time),
heart_rate = `Heart Rate`,
ID = id,
time_span = case_when(
str_detect(string = id, pattern = "_a") ~ "after",
str_detect(string = id, pattern = "_m") ~ "main",
str_detect(string = id, pattern = "_p") ~ "pre"
),
ID = str_extract(string = ID,
pattern = "[:digit:]{3}"),
ID = as.numeric(ID)
) %>%
filter(time <= 600) %>%
select(!c("Time","Heart Rate","id"))
) %>%
bind_rows()
main <-
left_join(main, df_merge,
by = "ID")
View(main)
View(df_rating)
df_rating %>%
group_by(ID) %>%
summarize(mean = mean(disruption_factor,
na.rm = TRUE
)
) %>%
ggplot(mapping = aes(x = mean)) +
geom_histogram()
df_merge %>%
group_by(ID) %>%
summarize(mean = mean(confident_factor,
na.rm = TRUE
)
) %>%
ggplot(mapping = aes(x = mean)) +
geom_histogram()
df_merge %>%
ggplot(mapping = aes(x = age)) +
geom_histogram(binwidth = 5)
df_merge %>%
ggplot(mapping = aes(x = log(age))) +
geom_histogram(binwidth = 0.1)
df_merge %>%
ggplot(mapping = aes(x = teaching_experience)) +
geom_histogram(binwidth = 2)
df_merge %>%
ggplot(mapping = aes(x = log(teaching_experience))) +
geom_histogram(binwidth = 0.3)
View(df_demo)
corr(df_demo$teaching_experience, df_demo$age)
cor(df_demo$teaching_experience, df_demo$age)
df_merge %>%
group_by(ID) %>%
summarize(teaching_experience = teaching_experience,
confident_factor = mean(confident_factor, na.rm = TRUE)) %>%
ungroup() %>%
distinct() %>%
ggplot(mapping = aes(x = teaching_experience,
y = confident_factor
)
) +
geom_point() +
geom_smooth(method = "lm")
df_merge %>%
group_by(ID) %>%
summarize(teaching_experience = teaching_experience,
disruption_factor = mean(disruption_factor, na.rm = TRUE)) %>%
ungroup() %>%
distinct() %>%
ggplot(mapping = aes(x = teaching_experience,
y = disruption_factor
)
) +
geom_point() +
geom_smooth(method = "lm")
main %>%
filter(time_span == "pre") %>%
select("ID","time","heart_rate") %>%
distinct() %>%
ggplot(mapping = aes(x = time,
y = heart_rate
)
) +
geom_line(mapping = aes(color = as_factor(ID)),
stat = "smooth",
method = "lm",
alpha = 0.6) +
geom_point(mapping = aes(color = as_factor(ID)),
alpha = 0.1) +
geom_line(stat = "smooth",
method = "lm",
linetype = 2) +
labs(x = "Time (in seconds)",
y = "Heart Rate (in beats per minute)") +
theme(legend.position = "none",
text = element_text(family = "serif"))
main %>%
filter(time_span == "pre") %>%
select("time","ID","heart_rate","age") %>%
distinct() %>%
mutate(ID = as_factor(ID)) %>%
lmer(formula = heart_rate ~ (1|ID) + ID * time) %>%
summary() ->
fit_first
View(fit_first)
main %>%
filter(time_span == "pre") %>%
select("time","ID","heart_rate","age") %>%
distinct() %>%
mutate(ID = as_factor(ID)) %>%
lmer(formula = heart_rate ~ (1|ID) + ID * time) %>%
summary()
as_tibble(fit_first$coefficients,
rownames = "Coefficient") %>%
filter(str_detect(.$Coefficient,
pattern = "time")) %>%
mutate(coefficient = case_when(Coefficient == "time" ~ "101",
TRUE ~ Coefficient),
ID = str_extract(string = coefficient,
pattern = "[:digit:]{3}"
),
ID = as.numeric(ID)
) %>%
select("ID","Estimate") ->
df_estimates
View(df_estimates)
df_merge %>%
group_by(ID) %>%
summarize(confident_factor_m = mean(confident_factor,
na.rm = TRUE),
disruption_factor_m = mean(disruption_factor,
na.rm = TRUE),
ID = ID,
t_exp = teaching_experience) %>%
distinct() %>%
left_join(., df_estimates,
by = "ID") ->
df_corr
View(df_corr)
cor.test(df_corr$confident_factor_m,
df_corr$Estimate) ->
corr_conf
df_corr %>%
ggplot(mapping = aes(x = confident_factor_m,
y = Estimate
)
) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
annotate(geom = "text",
label = paste0("r = ", round(corr_conf$estimate, 2)),
x = 5.5,
y = -0.025,
family = "serif"
) +
theme(text = element_text(family = "serif"))
cor.test(df_corr$disruption_factor_m,
df_corr$Estimate) ->
corr_disrup
df_corr %>%
ggplot(mapping = aes(x = disruption_factor_m,
y = Estimate
)
) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
annotate(geom = "text",
label = paste0("r = ", round(corr_disrup$estimate, 2)),
x = 5.5,
y = -0.025,
family = "serif"
) +
theme(text = element_text(family = "serif"))
corr_teach
cor.test(df_corr$t_exp,
df_corr$Estimate) ->
corr_teach
df_corr %>%
ggplot(mapping = aes(x = t_exp,
y = Estimate
)
) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
annotate(geom = "text",
label = paste0("r = ", round(corr_teach$estimate, 2)),
x = 15,
y = -0.025,
family = "serif"
) +
theme(text = element_text(family = "serif"))
corr_teach
View(df_demo)
View(df_corr)
left_join(x = df_corr,
y = df_demo,
by = "ID")
left_join(x = df_corr,
y = df_demo,
by = "ID") %>%
mutate(gender = factor(gender,
levels = 1:2,
labels = c("male","female")
)
) %>%
lm(formula = Estimate ~ confident_factor_m + disruption_factor +
teaching_experience + gender + age) %>%
summary()
left_join(x = df_corr,
y = df_demo,
by = "ID") %>%
mutate(gender = factor(gender,
levels = 1:2,
labels = c("male","female")
)
) %>%
lm(formula = Estimate ~ confident_factor_m + disruption_factor_m +
teaching_experience + gender + age) %>%
summary()
left_join(x = df_corr,
y = df_demo,
by = "ID") %>%
mutate(gender = factor(gender,
levels = 1:2,
labels = c("male","female")
),
Estimate = Estimate * 1000
) %>%
lm(formula = Estimate ~ confident_factor_m + disruption_factor_m +
teaching_experience + gender + age) %>%
summary()
df_demo %>%
ggplot(mapping = aes(x = gender)) +
geom_bar()
left_join(x = df_corr,
y = df_demo,
by = "ID") %>%
mutate(gender = factor(gender,
levels = 1:2,
labels = c("male","female")
),
Estimate = Estimate * 1000
) %>%
lm(formula = Estimate ~ confident_factor_m + disruption_factor_m +
teaching_experience + gender + age) ->
fit_whatever
beta.coef(fit_whatever)
??beta.coef
??beta.coef
?lm.beta
??lm.beta
needs(ltm,
lm.beta,
tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr,
lme4)
lm.beta(fit_whatever)
lm.beta(fit_whatever)
left_join(x = df_corr,
y = df_demo,
by = "ID") %>%
mutate(gender = factor(gender,
levels = 1:2,
labels = c("male","female")
),
Estimate = Estimate * 1000
) %>%
lm(formula = Estimate ~ confident_factor_m + disruption_factor_m + gender + age) ->
fit_whatever
lm.beta(fit_whatever)
lm.beta(fit_whatever) %>% confint()
confint(fit_whatever)
