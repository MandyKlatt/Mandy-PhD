View(sri_wide_disrup)
ci.reliability (data = sri_wide_disrup,
type = "omega",
conf.level = 0,95,
interval.type = "mlr",
B = 1000)
ci.reliability(data = sri_wide_disrup,
type = "omega",
conf.level = 0.95,  # Punkt statt Komma
interval.type = "mlr",
B = 1000)
# create new data frame with relevant variables
sri_wide_disrup <- sri_wide %>%
dplyr::select(starts_with("disruption_appraisal")) %>%
drop_na()
ci.reliability(data = sri_wide_disrup,
type = "omega",
conf.level = 0.95,  # Punkt statt Komma
interval.type = "mlr",
B = 1000)
View(sri_wide_disrup)
omega_result <- omega(sri_wide_disrup)
print(omega_result)
omega_result <- omega(sri_wide_disrup)
omega_result <- omega(sri_wide_disrup)
print(omega_result)
omega_result <- omega(sri_wide_disrup)
omega_result <- omega(sri_wide_disrup)
# create new data frame with only confidence items
sri_wide_confi <- sri_wide %>%
dplyr::select(starts_with("confidence_appraisal")) %>%
drop_na()
# create new data frame with only confidence items
sri_wide_confi <- sri_wide %>%
dplyr::select(starts_with("confidence_appraisal")) %>%
drop_na()
# calculate omega with omega() function
omega_confi <- omega(sri_wide_confi)
# display the results
print(omega_confi)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
View(df_sjt)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx") %>%
drop_na()
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns
df_sjt_mm <- df_sjt %>%
dplyr::select(ends_with("AL"))
View(df_sjt_mm)
# select relevant columns
df_sjt_mm <- df_sjt %>%
dplyr::select(starts_with("WT"),
ends_with("AL"))
View(df_sjt_mm)
# select relevant columns
df_sjt_mm <- df_sjt %>%
dplyr::select(matches("^WT.*AL$"))
View(df_sjt_mm)
# remove NAs
df_sjt_mm <- na.omit(df_sjt_mm)
# calculate omega with omega() function
omega_sjt_mm <- omega(omega_sjt_mm)
# remove NAs
df_sjt_mm <- na.omit(df_sjt_mm)
# calculate omega with omega() function
omega_sjt_mm <- omega(df_sjt_mm)
# display the results
print(omega_sjt_mm)
# select relevant columns
df_sjt_mm <- df_sjt %>%
dplyr::select(WT_S1_F1F2_AL:WT_S4_F4F6_AL)
# remove NAs
df_sjt_mm <- na.omit(df_sjt_mm)
# calculate omega with omega() function
omega_sjt_mm <- omega(df_sjt_mm)
# display the results
print(omega_sjt_mm)
# select relevant columns
df_sjt_m <- df_sjt %>%
dplyr::select(WT_S5_F1F2_ST:WT_S9_F4F5_ST)
# remove NAs
df_sjt_m <- na.omit(df_sjt_m)
# calculate omega with omega() function
omega_sjt_m <- omega(df_sjt_m)
# display the results
print(omega_sjt_m)
# select relevant columns
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R)
# remove NAs
df_sjt_m <- na.omit(df_sjt_m)
# remove NAs
df_sjt_r <- na.omit(df_sjt_r)
View(df_sjt_r)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R)
f_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R)
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R)
View(df_sjt_r)
# select relevant columns
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R,
-WT_S11_F3F6_R) %>%
# remove NAs
df_sjt_r <- na.omit(df_sjt_r)
# select relevant columns
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R,
-WT_S11_F3F6_R)
# remove NAs
df_sjt_r <- na.omit(df_sjt_r)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R)
# calculate omega with omega() function
omega_sjt_r <- omega(df_sjt_r)
# display the results
print(omega_sjt_r)
# load data files with modified scales
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LI06_05,
LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) %>% # non- & paraverbal communication
filter(!LI06_05 == 201) %>% # exclude ID with no eye tracking data
mutate(LI06_05 = ifelse(LI06_05 < 200, "Novice", "Expert")) %>%
rename(Group = LI06_05)
# remove NAs
df_quest <- na.omit(df_quest)
# read in data
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LI06_05,
LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) # non- & paraverbal communication
View(df_quest)
# read in data
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) # non- & paraverbal communication
# select relevant columns
df_quest_cm <- df_quest %>%
dplyr::select(LM01_01:LM01_08)
# remove NAs
df_quest_cm <- na.omit(df_quest_cm)
# calculate omega with omega() function
omega_quest_cm <- omega(df_quest_cm)
# display the results
print(omega_quest_cm)
# select relevant columns
df_quest_npvc <- df_quest %>%
dplyr::select(LP01_01:LP01_08)
# remove NAs
df_quest_npvc <- na.omit(df_quest_npvc)
# calculate omega with omega() function
omega_quest_npvc <- omega(df_quest_npvc)
# display the results
print(df_quest_npvc)
# display the results
print(df_quest_npvc)
# display the results
print(omega_quest_npvc)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix,
MBESS)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns --> only subject ID and mean
df_sjt_mean <- df_sjt %>%
dplyr::select(UI06_05, # ID
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 == 201) # exclude ID with no eye tracking data
# remove NAs
df_sjt <- na.omit(df_sjt_mean)
# rename columns
df_sjt_mean <- rename(df_sjt_mean, c("Group" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"))
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(!Group, names_to = "Facets Classroom Management", values_to = "Mean")
# define expert and novice with ifelse function
df_sjt_long$Group = ifelse(df_sjt_long$Group < 200, "Novice","Expert")
# Boxplot showing outliers
ggplot(df_sjt_long, aes(x = "", y = Mean)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of time to first fixation in seconds (AOI disruptive person)",
y = "Time to first fixation in seconds") +
theme_minimal()
# Boxplot showing outliers
ggplot(df_sjt_mean, aes(x = "", y = All)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (All)",
y = "Overall score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$All, 0.25)
Q3 <- quantile(df_sjt_mean$All, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_all <- df_sjt_mean %>%
filter(All >= LowerBound & All <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_all)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_all <- df_sjt_mean %>%
filter(All < LowerBound | All > UpperBound)
# View the removed outliers
df_outliers_sjt_all
### MANAGING MOMENTUM
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = "Managing momentum")) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Managing Momentum)",
y = "Score") +
theme_minimal()
### MANAGING MOMENTUM
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = `Managing momentum`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Managing Momentum)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$All, 0.25)
Q3 <- quantile(df_sjt_mean$All, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` >= LowerBound & `Managing momentum` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_mm)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` < LowerBound | `Managing momentum` > UpperBound)
# View the removed outliers
df_outliers_sjt_mm
### MONITORING
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = Monitoring)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Monitoring)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$All, 0.25)
Q3 <- quantile(df_sjt_mean$All, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` >= LowerBound & `Managing momentum` <= UpperBound)
# Filter to remove outliers
df_no_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$`Managing momentum`, 0.25)
Q3 <- quantile(df_sjt_mean$`Managing momentum`, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` >= LowerBound & `Managing momentum` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_mm)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` < LowerBound | `Managing momentum` > UpperBound)
# View the removed outliers
df_outliers_sjt_mm
### MANAGING MOMENTUM
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = `Managing momentum`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Managing Momentum)",
y = "Score") +
theme_minimal()
# Filter to remove outliers
df_no_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_m)  # After removing outliers
### MONITORING
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = Monitoring)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Monitoring)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$Monitoring, 0.25)
Q3 <- quantile(df_sjt_mean$Monitoring, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_m)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring < LowerBound | Monitoring > UpperBound)
# View the removed outliers
df_outliers_sjt_m
### RULES & ROUTINES
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = `Rules and routines`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Rules & routines)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$`Rules and routines`, 0.25)
Q3 <- quantile(df_sjt_mean$`Rules and routines`, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_r <- df_sjt_mean %>%
filter(`Rules and routines` >= LowerBound & `Rules and routines` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_r)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_r <- df_sjt_mean %>%
filter(`Rules and routines` < LowerBound | `Rules and routines` > UpperBound)
# View the removed outliers
df_outliers_sjt_r
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix)
# read in data and select and rename relevant columns with transmute
demo.data <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(!LI06_05 == 201,
!LI06_05 == 223) %>% # exclude participant due to missing eye tracking data
transmute(Group = LI06_05,
Gender = LI02_01_1,
Age = LI03_01,
`Teaching Experience` = LI04_01,
School_type = LI18,
Grade = LI16_05,
Subject = LI10_05,
Semester = LI11_01,
Internship = LI13_01,
`Extracurricular Teaching Experience` = LI14,
`Secondary Teaching Activities` = LI17
)
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# creating new column with total participants to calculate percent of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
demo.data$School_type[demo.data$School_type == 2] <- "1"
# creating new column to calculate percent of school type
demo.data <-
demo.data %>%
group_by(School_type, Group) %>%
mutate(Count_Schooltype = sum(n())) %>%
mutate(Percent_schooltype = round((Count_Schooltype/Sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
demo.data$Percent_schooltype <- as.numeric(demo.data$Percent_schooltype)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# changing Type of School into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
demo.data$School_type <- factor(x = demo.data$School_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# changing `Secondary Teaching Activities` to count experience (no experience = 2 --> 0)
demo.data$`Secondary Teaching Activities` = ifelse(demo.data$`Secondary Teaching Activities` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Secondary Teaching Activities` <- as.numeric(demo.data$`Secondary Teaching Activities`)
# create new columns that give proportion of Gender
# percent = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percent = Gender/Sum_participants) %>%
#   mutate(Gender_percent = round(sum(Gender_percent)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Women in percent" = round(sum(Gender/Sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(Age),
digits = 2),
"SD Age in years" = round(sd(Age),
digits = 2),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`)
)
knitr::kable(demo.table,
caption = "Demographic information & teaching experience")
# # create a basic table (tibble) using tidyverse functions
# exp.table <- demo.data %>%
#   group_by(Group) %>%
#   summarise(N=n(),
#            "M Exp." = round(mean(`Teaching Experience`), 2),
#             "SD Exp." = round(sd(`Teaching Experience`), 2),
#             "Min Exp." = min(`Teaching Experience`),
#             "Max Exp." = max(`Teaching Experience`),
#             "M Semester" = round(mean(Semester), 2),
#             "SD Semester" = round(sd(Semester), 2),
#             "Min Semester" = min(Semester),
#             "Max Semester" = max(Semester),
#             "M Internship" = round(mean(Internship), 2),
#             "SD Internship" = round(sd(Internship), 2),
#             "Min Internship" = min(Internship),
#             "Max Internship" = max(Internship),
#             "Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
#             "Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
#            )
