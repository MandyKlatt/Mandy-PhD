gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
psy,
nFactors)
# load data files with modified sclaes
quest.data <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LB01_01:LB01_03,
LM01_01:LM01_08,
LP01_01:LP01_08,
LV01_01:LV01_03) %>%
rename(
LZ01_06 = LM01_06,
LZ01_07 = LM01_07,
LZ01_08 = LM01_08
)
View(quest.data)
# descriptive data
describe(quest.data)
# descriptive data
describe(quest.data)
# creating a matrix
quest.table <- matrix(data = NA, nrow = 5, ncol = 8)
rownames(quest.table) <- c("LM", "LB", "LP", "LV", "LZ")
colnames(quest.table) <- c("N Items","M","SD","Min","Max","Skewness","Kurtosis","Alpha")
# creating a loop
i <- "LM"
for (i in c("LM", "LB", "LP", "LV", "LZ")) {
loop.data <- quest.data %>%
dplyr::select(starts_with(match = i))
quest.table[i, "N Items"] <- length(loop.data)
# calculating mean
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, "M"]
# calculating SD
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
sd() %>%
round(., digits = 2) ->
quest.table[i, "SD"]
# calculating Min
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
min() %>%
round(., digits = 2) ->
quest.table[i, "Min"]
# calculating Max
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
max() %>%
round(., digits = 2) ->
quest.table[i, "Max"]
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
# calculating Kurtosis
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
kurtosis() %>%
round(., digits = 2) ->
quest.table[i, "Kurtosis"]
# calculating Alpha
alpha <- loop.data %>%
cronbach.alpha()
quest.table[i, "Alpha"] <- round(alpha$alpha,2)
# calculating Alpha
omega <- loop.data %>%
omega()
}
# rename columns
rownames(quest.table) <- c("Classroom Management", "Balance", "Presence", "Natural Behavior", "Additional")
# format and insert table in manuscript
papaja::apa_table(
quest.table,
caption = "Scale analysis for teachers' self-assessment",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# format and insert table in manuscript
knitr::kable(
quest.table,
caption = "Scale analysis for teachers' self-assessment",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# descriptive data
describe(quest.data)
# creating a matrix
quest.table <- matrix(data = NA, nrow = 5, ncol = 9)
rownames(quest.table) <- c("LM", "LB", "LP", "LV", "LZ")
colnames(quest.table) <- c("N Items","M","SD","Min","Max","Skewness","Kurtosis","Alpha", "Omega")
# creating a loop
i <- "LM"
for (i in c("LM", "LB", "LP", "LV", "LZ")) {
loop.data <- quest.data %>%
dplyr::select(starts_with(match = i))
quest.table[i, "N Items"] <- length(loop.data)
# calculating mean
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, "M"]
# calculating SD
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
sd() %>%
round(., digits = 2) ->
quest.table[i, "SD"]
# calculating Min
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
min() %>%
round(., digits = 2) ->
quest.table[i, "Min"]
# calculating Max
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
max() %>%
round(., digits = 2) ->
quest.table[i, "Max"]
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
# calculating Kurtosis
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
kurtosis() %>%
round(., digits = 2) ->
quest.table[i, "Kurtosis"]
# calculating Alpha
alpha <- loop.data %>%
cronbach.alpha()
quest.table[i, "Alpha"] <- round(alpha$alpha,2)
# calculating Alpha
omega <- loop.data %>%
omega()
}
# rename columns
rownames(quest.table) <- c("Classroom Management", "Balance", "Presence", "Natural Behavior", "Additional")
# format and insert table in manuscript
knitr::kable(
quest.table,
caption = "Scale analysis for teachers' self-assessment",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
# descriptive data
describe(quest.data)
# creating a matrix
quest.table <- matrix(data = NA, nrow = 5, ncol = 8)
rownames(quest.table) <- c("LM", "LB", "LP", "LV", "LZ")
colnames(quest.table) <- c("N Items","M","SD","Min","Max","Skewness","Kurtosis","Alpha")
# creating a loop
i <- "LM"
for (i in c("LM", "LB", "LP", "LV", "LZ")) {
loop.data <- quest.data %>%
dplyr::select(starts_with(match = i))
quest.table[i, "N Items"] <- length(loop.data)
# calculating mean
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
mean() %>%
round(., digits = 2) ->
quest.table[i, "M"]
# calculating SD
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
sd() %>%
round(., digits = 2) ->
quest.table[i, "SD"]
# calculating Min
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
min() %>%
round(., digits = 2) ->
quest.table[i, "Min"]
# calculating Max
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
max() %>%
round(., digits = 2) ->
quest.table[i, "Max"]
# calculating Skewness
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
skewness() %>%
round(., digits = 2) ->
quest.table[i, "Skewness"]
# calculating Kurtosis
loop.data %>%
mutate(mean = rowMeans(.)) %>%
pull(mean) %>%
kurtosis() %>%
round(., digits = 2) ->
quest.table[i, "Kurtosis"]
# calculating Alpha
alpha <- loop.data %>%
cronbach.alpha()
quest.table[i, "Alpha"] <- round(alpha$alpha,2)
# calculating Alpha
omega <- loop.data %>%
omega()
}
# rename columns
rownames(quest.table) <- c("Classroom Management", "Balance", "Presence", "Natural Behavior", "Additional")
# format and insert table in manuscript
knitr::kable(
quest.table,
caption = "Scale analysis for teachers' self-assessment",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "tiny" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
## Barlett-Test
cortest.bartlett(quest.data)
## Kaiser-Meyer-Olkin-Kriterium (KMO-Werte) prüfen und Measure of Adaquacy (MSA)
KMO(quest.data)
# Bartlett-Test
# --> prüft, ob Items miteinander korrelieren; das sollten sie tun
cortest.bartlett(quest.data)
# overall MSA = 0.7
# einzelne MSA-Werte checken; sollten auch alle größer als 0.5 sein
# Item "LZ01_06" hat einen Wert von 0.43 --> Ausschluss
dplyr::select(data.quest, LZ01_06) -> clean.data.quest
# overall MSA = 0.7
# einzelne MSA-Werte checken; sollten auch alle größer als 0.5 sein
# Item "LZ01_06" hat einen Wert von 0.43 --> Ausschluss
select(data.quest, LZ01_06) -> clean.data.quest
# overall MSA = 0.7
# einzelne MSA-Werte checken; sollten auch alle größer als 0.5 sein
# Item "LZ01_06" hat einen Wert von 0.43 --> Ausschluss
select(data.quest, -LZ01_06) -> clean.data.quest
# overall MSA = 0.7
# einzelne MSA-Werte checken; sollten auch alle größer als 0.5 sein
# Item "LZ01_06" hat einen Wert von 0.43 --> Ausschluss
select(data.quest, -one_of(LZ01_06)) -> clean.data.quest
# overall MSA = 0.7
# einzelne MSA-Werte checken; sollten auch alle größer als 0.5 sein
# Item "LZ01_06" hat einen Wert von 0.43 --> Ausschluss
quest.data[,!names(
quest.data) %in%
c("LZ01_06")
] -> clean.data.quest
View(clean.data.quest)
KMO(clean.data.quest)
# Anzahl Faktoren mit MAP-Test (unter anderem)
# mit Varimax-Rotation und ML-Faktorenanalyse
nfactors(clean.data.quest, rotate = varimax, fm = "mle")
# Anzahl Faktoren mit MAP-Test (unter anderem)
# mit Varimax-Rotation und ML-Faktorenanalyse
nfactors(clean.data.quest,
rotate = "varimax",
fm = "mle")
ev <- eigen(cor(clean.data.quest))
ap <- parallel(subject = nrow(clean.data.quest),
var = ncol(clean.data.quest),
rep = 100,
cent = .05)
nS <- nScree(x = ev$values,
aparallel = ap$eigen$qevpea)
plotnScree(nS)
## ML-Faktorenanalyse
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 2,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Nachkommastellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
print
# Ergebnisse ausgeben lassen mit 2 Nachkommastellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
# load data files with modified sclaes
quest.data <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LB01_01:LB01_03,
LM01_01:LM01_08,
LP01_01:LP01_08,
LV01_01:LV01_03) %>%
rename(
LZ01_06 = LM01_06,
LZ01_07 = LM01_07,
LZ01_08 = LM01_08
)
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
psy,
nFactors)
# load data files with modified sclaes
quest.data <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LB01_01:LB01_03,
LM01_01:LM01_08,
LP01_01:LP01_08,
LV01_01:LV01_03) %>%
rename(
LZ01_06 = LM01_06,
LZ01_07 = LM01_07,
LZ01_08 = LM01_08
)
## Bartlett-Test
# --> prüft, ob Items miteinander korrelieren; das sollten sie tun
cortest.bartlett(quest.data)
# overall MSA = 0.7
# einzelne MSA-Werte checken; sollten auch alle größer als 0.5 sein
# Item "LZ01_06 Ich habe vieles mit kurzen Blicken und knappen Gesten geregelt" hat einen Wert von 0.43 --> Ausschluss
quest.data[, !names(quest.data) %in% c("LZ01_06")] -> clean.data.quest
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 2,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 4,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 5,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 3,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 2,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 3,
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
# Mit Uniquenesses kann Kommunalität berechnet werden
1-fit1$uniquenesses
## Maximum-Likelihood-Faktorenanalyse
# passt methodisch am besten, wenn man noch eine konfirmatorische Faktorenanalyse machen will
# 2 Faktoren
# Varimax-Rotation
fit1 <- factanal(x = clean.data.quest,
factors = 4, # inhaltlich macht es keinen Sinn, nur 2 Faktoren anzunehmen
rotation = "varimax")
# Ergebnisse ausgeben lassen mit 2 Dezimalstellen und Faktorenladung < 0.3 unterdrückt
print(fit1,
digits = 2,
cutoff = .3)
# Mit Uniquenesses kann Kommunalität berechnet werden
# --> zeigen an, wie viel Varianz von den einzelnen Items durch die Faktoren erklärt wird
1-fit1$uniquenesses
# Screeplot zur Visualisierung
scree.plot(fit1$uniquenesses)
# Screeplot zur Visualisierung
scree.plot(fit1$correlation)
fit2 <- fa(x= clean.data.quest,
factors = 4,
rotation = "varimax")
fit2 <- fa(x = clean.data.quest,
factors = 4,
rotation = "varimax")
fit2 <- fa(clean.data.quest,
4,
rotation = "varimax")
fit2 <- fa(clean.data.quest,
4,
rotation = "varimax")
# Mit Uniquenesses kann Kommunalität berechnet werden
# --> zeigen an, wie viel Varianz von den einzelnen Items durch die Faktoren erklärt wird (wie wichtig sind die einzelnen Items für Lösung)
1-fit1$uniquenesses
# Screeplot zur Visualisierung
scree.plot(fit1$correlation)
fit2 <- fa(clean.data.quest,
4,
rotation = "varimax")
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
psy,
nFactors)
fit2 <- fa(r = clean.data.quest,
nfactors = 4,
rotate = "varimax")
# Ergebnisse ausgeben
fit2
# Faktorladungen ausgeben
fit2$loadings
# Kommunalitäten ausgeben
fit2$communality
# Sceeplot
plot(fit2$values,
type = "b")
