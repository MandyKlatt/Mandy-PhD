)
knitr::kable(number.perceived.disrup.table,
caption = "N, M, SD, min & max of the perceived ´disruptive person´")
##################### plotting time to first fixation for groups #####################
plot_time_disrup <-
df_ttff_disrup %>%
filter(!Participant %in% c("216", "113", "123")) %>%
ggplot(mapping = aes(x = Group,
y = Disrup_time_fixation_sec)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 2,
alpha = 0.7,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ylim(0,12) +
labs(x ="",
y = "Seconds") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Time to first fixation\n(AOI disruptive person)") +
theme_cowplot() +
theme(legend.position="none")
plot_time_disrup
##################### plotting time to first fixation for groups #####################
plot_time_disrup <-
df_ttff_disrup %>%
filter(!Participant %in% c("216", "113", "123")) %>%
ggplot(mapping = aes(x = Group,
y = Disrup_time_fixation_sec)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 2,
alpha = 0.7,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ylim(0,10) +
labs(x ="",
y = "Seconds") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Time to first fixation\n(AOI disruptive person)") +
theme_cowplot() +
theme(legend.position="none")
plot_time_disrup
##################### plotting "perceived disruptive person" for groups #####################
plot_n_disrup <-
df_ttff_disrup %>%
filter(!Participant %in% c("216", "113", "123")) %>%
ggplot(mapping = aes(x = Group,
y = N)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 2,
alpha = 0.7,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ylim(0,10) +
labs(x ="",
y = "Counts") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Counts of the perceived ´disruptive person´\n") +
theme_cowplot() +
theme(legend.position="none")
plot_n_disrup
# TIME TO FIRST FIXATIONS on disruptive person
# create data frame without outliers
df_no_outliers_ttff <-
df_ttff_disrup %>%
filter(!Participant %in% c("216", "113", "123"))
# t-test for expertise differences
t.test(x = df_no_outliers_ttff$N[df_no_outliers_ttff$Group == "Expert"],
y = df_no_outliers_ttff$N[df_no_outliers_ttff$Group == "Novice"],
var.equal = TRUE)
# TIME TO FIRST FIXATIONS on disruptive person
# effect size for expertise differences
d_n_disrup <- CohenD(x = df_no_outliers_ttff$N[df_no_outliers_ttff$Group == "Expert"],
y = df_no_outliers_ttff$N[df_no_outliers_ttff$Group == "Novice"],
na.rm = TRUE)
round(d_n_disrup, 2)
# TIME TO FIRST FIXATIONS on disruptive person
# t-test for expertise differences
t.test(x = df_no_outliers_ttff$Disrup_time_fixation_sec[df_no_outliers_ttff$Group == "Expert"],
y = df_no_outliers_ttff$Disrup_time_fixation_sec[df_no_outliers_ttff$Group == "Novice"],
var.equal = TRUE)
# TIME TO FIRST FIXATIONS on disruptive person
# effect size for expertise differences
d_time_disrup <- CohenD(x = df_no_outliers_ttff$Disrup_time_fixation_sec[df_no_outliers_ttff$Group == "Expert"],
y = df_no_outliers_ttff$Disrup_time_fixation_sec[df_no_outliers_ttff$Group == "Novice"],
na.rm = TRUE)
round(d_time_disrup, 2)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns --> only subject ID and mean
df_sjt_mean <- df_sjt %>%
dplyr::select(UI06_05, # ID
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 == 201) # exclude ID with no eye tracking data
# remove NAs
df_sjt <- na.omit(df_sjt_mean)
# rename columns
df_sjt_mean <- rename(df_sjt_mean, c("Group" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"))
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(!Group, names_to = "Facets Classroom Management", values_to = "Mean")
View(df_sjt_long)
View(df_sjt)
View(df_sjt_mean)
# define expert and novice with ifelse function
df_sjt_mean <- df_sjt_mean %>%
mutate(Group = ifelse(Group < 200, "Novice", "Expert"))
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns --> only subject ID and mean
df_sjt_mean <- df_sjt %>%
dplyr::select(UI06_05, # ID
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 == 201) # exclude ID with no eye tracking data
# remove NAs
df_sjt <- na.omit(df_sjt_mean)
# rename columns
df_sjt_mean <- rename(df_sjt_mean, c("Group" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"))
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns --> only subject ID and mean
df_sjt_mean <- df_sjt %>%
dplyr::select(UI06_05, # ID
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 == 201) # exclude ID with no eye tracking data
# remove NAs
df_sjt <- na.omit(df_sjt_mean)
# rename columns
df_sjt_mean <- rename(
df_sjt_mean,
c(
"Participant" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"
)
)
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(!Group, names_to = "Facets Classroom Management", values_to = "Mean")
# define expert and novice with ifelse function
df_sjt_mean <- df_sjt_mean %>%
mutate(Group = ifelse(Group < 200, "Novice", "Expert"))
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(!Participant, names_to = "Facets Classroom Management", values_to = "Mean")
# add a new column with expert and novice with ifelse function
df_sjt_mean <- df_sjt_mean %>%
mutate(Group = ifelse(Participant < 200, "Novice", "Expert"))
# filter only for experts
df_sjt_mean_expert <- df_sjt_mean %>%
filter(Group == "Expert")
# Boxplot showing outliers (All)
ggplot(df_sjt_mean_expert, aes(x = "", y = All)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "EXPERT: Boxplot of SJT (All)",
y = "Overall score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean_expert$All, 0.25)
Q3 <- quantile(df_sjt_mean_expert$All, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_all_expert <- df_sjt_mean_expert %>%
filter(All >= LowerBound & All <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean_expert)  # Original data
nrow(df_no_outliers_sjt_all_expert)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_all_expert <- df_sjt_mean_expert %>%
filter(All < LowerBound | All > UpperBound)
# View the removed outliers
df_outliers_sjt_all_expert
# filter only for experts
df_sjt_mean_novice <- df_sjt_mean %>%
filter(Group == "Novice")
# Boxplot showing outliers (All)
ggplot(df_sjt_mean_novice, aes(x = "", y = All)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "NOVICE: Boxplot of SJT (All)",
y = "Overall score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean_novice$All, 0.25)
Q3 <- quantile(df_sjt_mean_novice$All, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_all_novice <- df_sjt_mean_novice %>%
filter(All >= LowerBound & All <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean_novice)  # Original data
nrow(df_no_outliers_sjt_all_novice)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_all_novice <- df_sjt_mean_novice %>%
filter(All < LowerBound | All > UpperBound)
# View the removed outliers
df_outliers_sjt_all_novice
df_outliers_sjt_all_expert
View(df_outliers_sjt_all_expert)
# Boxplot showing outliers (All)
ggplot(df_sjt_mean_expert, aes(x = "", y = All)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "EXPERT: Boxplot of SJT (All)",
y = "Overall score") +
theme_minimal()
df_outliers_sjt_all_novice
View(df_outliers_sjt_all_novice)
### MANAGING MOMENTUM
# Boxplot showing outliers (All)
ggplot(df_sjt_mean_expert, aes(x = "", y = `Managing momentum`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "EXPERTS: Boxplot of SJT (Managing Momentum)",
y = "Score") +
theme_minimal()
# Boxplot showing outliers (All)
ggplot(df_sjt_mean_novice, aes(x = "", y = `Managing momentum`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "NOVICES: Boxplot of SJT (Managing Momentum)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean_novice$`Managing momentum`, 0.25)
Q3 <- quantile(df_sjt_mean_novice$`Managing momentum`, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_mm_novice <- df_sjt_mean_novice %>%
filter(`Managing momentum` >= LowerBound & `Managing momentum` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean_novice)  # Original data
nrow(df_no_outliers_sjt_mm_novice)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_mm_novice <- df_sjt_mean_novice %>%
filter(`Managing momentum` < LowerBound | `Managing momentum` > UpperBound)
# View the removed outliers
df_outliers_sjt_mm_novice
View(df_outliers_sjt_mm_novice)
View(df_no_outliers_sjt_mm_novice)
View(df_outliers_sjt_mm_novice)
# Boxplot showing outliers (MONITORING)
ggplot(df_sjt_mean_expert, aes(x = "", y = Monitoring)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "EXPERT: Boxplot of SJT (Monitoring)",
y = "Score") +
theme_minimal()
# Boxplot showing outliers (MONITORING)
ggplot(df_sjt_mean_novice, aes(x = "", y = Monitoring)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "NOVICES: Boxplot of SJT (Monitoring)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean_novice$Monitoring, 0.25)
Q3 <- quantile(df_sjt_mean_novice$Monitoring, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_novice_m <- df_sjt_mean_novice %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean_novice)  # Original data
nrow(df_no_outliers_sjt_novice_m)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_novice_m <- df_sjt_mean_novice %>%
filter(Monitoring < LowerBound | Monitoring > UpperBound)
# View the removed outliers
df_outliers_sjt_novice_m
View(df_outliers_sjt_novice_m)
# Boxplot showing outliers (All)
ggplot(df_sjt_mean_expert, aes(x = "", y = `Rules and routines`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "EXPERTS: Boxplot of SJT (Rules & routines)",
y = "Score") +
theme_minimal()
# Boxplot showing outliers (RULES & ROUTINES)
ggplot(df_sjt_mean_novice, aes(x = "", y = `Rules and routines`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "NOVICES: Boxplot of SJT (Rules & routines)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean_novice$`Rules and routines`, 0.25)
Q3 <- quantile(df_sjt_mean_novice$`Rules and routines`, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
d
# Filter to remove outliers
df_no_outliers_sjt_novice_r <- df_sjt_mean_novice %>%
filter(`Rules and routines` >= LowerBound & `Rules and routines` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean_novice)  # Original data
nrow(df_no_outliers_sjt_novice_r)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_novice_r <- df_sjt_mean_novice %>%
filter(`Rules and routines` < LowerBound | `Rules and routines` > UpperBound)
# View the removed outliers
df_outliers_sjt_novice_r
View(df_sjt_long)
View(df_outliers_sjt_novice_r)
# mean & SD SJT ALL
sjt_mean <- df_sjt_long %>%
filter(!Participant %in% c("216", "217", "127")) %>%
filter(`Facets Classroom Management` == "All") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# rename columns
df_sjt_mean <- rename(
df_sjt_mean,
c(
"Participant" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"
)
)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns --> only subject ID and mean
df_sjt_mean <- df_sjt %>%
dplyr::select(UI06_05, # ID
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 == 201) # exclude ID with no eye tracking data
# remove NAs
df_sjt <- na.omit(df_sjt_mean)
# rename columns
df_sjt_mean <- rename(
df_sjt_mean,
c(
"Participant" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"
)
)
# add a new column with expert and novice with ifelse function
df_sjt_mean <- df_sjt_mean %>%
mutate(Group = ifelse(Participant < 200, "Novice", "Expert"))
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(!Participant, names_to = "Facets Classroom Management", values_to = "Mean")
View(df_sjt_mean)
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(cols = c(Monitoring, Managing_momentum, Rules_and_routines, All),
names_to = "Facets Classroom Management",
values_to = "Mean")
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(cols = c(Monitoring, `Managing Momentum`, `Rules and routines`, All),
names_to = "Facets Classroom Management",
values_to = "Mean")
# changing from wide to long format
df_sjt_long <- df_sjt_mean %>%
pivot_longer(cols = c(Monitoring, `Managing momentum`, `Rules and routines`, All),
names_to = "Facets Classroom Management",
values_to = "Mean")
# mean & SD SJT ALL
sjt_mean <- df_sjt_long %>%
filter(!Participant %in% c("216", "217", "127")) %>%
filter(`Facets Classroom Management` == "All") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_mean,
caption = "N, M and SD for overall value")
# mean SJT Managing Momentum
sjt_mm <- df_sjt_long %>%
filter(!Participant %in% c("105", "127")) %>%
filter(`Facets Classroom Management` == "Managing momentum") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_mm,
caption = "N, M and SD for managing momentum")
# mean SJT Monitoring
sjt_m <- df_sjt_long %>%
filter(!Participant %in% c("121", "127", "137")) %>%
filter(`Facets Classroom Management` == "Monitoring") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_m,
caption = "N, M and SD for monitoring")
# mean SJT Rules and routins
sjt_r <- df_sjt_long %>%
filter(!Participant %in% c("127")) %>%
filter(`Facets Classroom Management` == "Rules and routines") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_r,
caption = "N, M and SD for rules and routines")
# plotting mean of all aspects
mean_plot <-
df_sjt_long %>%
filter(!Participant %in% c("216",
"217",
"127",
"105",
"121",
"137")) %>%
mutate(Group = factor(Group,
levels = c("Novice",
"Expert")
)
) %>%
ggplot(mapping = aes(x = Group,
y = Mean)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 1,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
labs(x = "") +
ylim(0,1) +
scale_fill_brewer(palette  = "RdBu") +
facet_wrap(vars(`Facets Classroom Management`),
nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("SJT") +
theme(
plot.title = element_text(size = 25,
face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 22)
)
mean_plot
#### ALL ####
# create data frame without outliers
df_sjt_mean_all_no_out <- df_sjt_mean %>%
filter(!Participant %in% c("216", "217", "127"))
# t-test for expertise differences
t.test(x = df_sjt_mean_all_no_out$All[df_sjt_mean_all_no_out$Group == "Expert"],
y = df_sjt_mean_all_no_out$All[df_sjt_mean_all_no_out$Group == "Novice"],
var.equal = TRUE)
# effect size for expertise differences
d_sjt_all <- CohenD(x = df_sjt_mean_all_no_out$All[df_sjt_mean_all_no_out$Group == "Expert"],
y = df_sjt_mean_all_no_out$All[df_sjt_mean_all_no_out$Group == "Novice"],
na.rm = TRUE
)
round(d_sjt_all, 2)
