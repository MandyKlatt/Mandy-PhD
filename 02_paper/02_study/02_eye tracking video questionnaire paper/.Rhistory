SJT_KF_gek) %>% # All
filter(!UI06_05 %in% c(201, 223)) %>%  # exclude ID with no eye tracking data
transmute(
Participant = UI06_05,
SJT_Monitoring = round(SJT_AL_gek, 2),
SJT_Managing_momentum = round(SJT_ST_gek, 2),
SJT_Rules_routines = round(SJT_R_gek, 2),
SJT_All = round(SJT_KF_gek, 2)
)
# classroom questionnaire
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LI06_05, LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) %>% # non- & paraverbal communication
filter(!LI06_05 %in% c(201, 223)) %>% # exclude ID with no eye tracking data
rename(Participant = LI06_05) %>%
group_by(Participant) %>%
transmute(
Participant = Participant,
"Quest_All" = round(mean(c_across(starts_with(
"L"
)), na.rm = TRUE), 2),
"Quest_classroom_management" = round(mean(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
"Quest_non_paraverbal_communication" = round(mean(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2)
)
# create a big data frame with all measures
# put all data frames into list
df_list <- list(df_demo,
df_aoi_numb_dur,
df_aoi_stud,
df_aoi_disrup,
df_sri,
df_sjt,
df_quest)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(Participant > 200) %>%
dplyr::select(.,
-"Participant",
-"Teaching Experience")
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
View(cor_tab)
sum(is.na(df_merge$GRI_mtu))
sum(is.na(df_merge$SJT_All))
sum(is.na(df_aoi_numb_dur$GRI_mtu))
sum(is.na(df_sjt$SJT_All))
nrow(na.omit(df_merge[, c("GRI_mtu", "SJT_All")]))  # Rows used in the cor() function
sum(!is.na(df_aoi_numb_dur$GRI_mtu) & !is.na(df_sjt$SJT_All))  # Rows used in cor.test()
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_All)
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
View(df_aoi_numb_dur)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(Participant > 200)
# %>%
# dplyr::select(.,
#               -"Participant",
#               -"Teaching Experience")
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
df_merge <-
df_list %>% reduce(full_join, by='Participant')
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
View(df_sjt)
df_sjt <- df_sjt[order(-df_sjt$SJT_All), ]
# p-value for GRI x STJ_All
df_sjt <- df_sjt[order(-df_sjt$Participant), ]
# p-value for GRI x STJ_All
df_sjt <- df_sjt[order(df_sjt$Participant), ]
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_All)
# average duration, number fixation, GRI (micro-teaching unit)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Duration_of_interval,
Participant,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
!"Total_duration_of_fixations.Disruptive_Person",
!"Number_of_fixations.Disruptive_Person",
!"Average_duration_of_fixations.Disruptive_Person"
) %>%
rowwise() %>%
transmute(
Participant = Participant,
Duration_of_interval = Duration_of_interval,
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Sum_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Sum_average_duration_fixation = sum(c_across(starts_with("Average_duration")), na.rm = TRUE),
Sum_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Average_duration_mtu = round(Sum_duration_fixation / Sum_number_fixation, digits = 0),
Number_fixation_min_mtu = round(Sum_number_fixation / Duration_of_interval_min, digits = 0),
GRI_mtu = round(Average_duration_mtu / Sum_number_fixation, digits = 2)
) %>%
drop_na() %>%
filter(!TOI %in% c(216)) %>%
dplyr::select(Participant,
Number_fixation_min_mtu,
Average_duration_mtu,
GRI_mtu) -> df_aoi_numb_dur
# average duration, number fixation, GRI (micro-teaching unit)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Duration_of_interval,
Participant,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
!"Total_duration_of_fixations.Disruptive_Person",
!"Number_of_fixations.Disruptive_Person",
!"Average_duration_of_fixations.Disruptive_Person"
) %>%
rowwise() %>%
transmute(
Participant = Participant,
Duration_of_interval = Duration_of_interval,
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Sum_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Sum_average_duration_fixation = sum(c_across(starts_with("Average_duration")), na.rm = TRUE),
Sum_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Average_duration_mtu = round(Sum_duration_fixation / Sum_number_fixation, digits = 0),
Number_fixation_min_mtu = round(Sum_number_fixation / Duration_of_interval_min, digits = 0),
GRI_mtu = round(Average_duration_mtu / Sum_number_fixation, digits = 2)
) %>%
drop_na() %>%
filter(!Participant %in% c(216)) %>%
dplyr::select(Participant,
Number_fixation_min_mtu,
Average_duration_mtu,
GRI_mtu) -> df_aoi_numb_dur
# sjt
df_sjt <-
read_excel("./data/SJT.xlsx") %>%
dplyr::select(UI06_05, # Participant
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 %in% c(201, 223, 216)) %>%  # exclude ID with no eye tracking data
transmute(
Participant = UI06_05,
SJT_Monitoring = round(SJT_AL_gek, 2),
SJT_Managing_momentum = round(SJT_ST_gek, 2),
SJT_Rules_routines = round(SJT_R_gek, 2),
SJT_All = round(SJT_KF_gek, 2)
)
# sjt
df_sjt <-
read_excel("./data/SJT.xlsx") %>%
dplyr::select(UI06_05, # Participant
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 %in% c(201, 223, 216)) %>%  # exclude ID with no eye tracking data
transmute(
Participant = UI06_05,
SJT_Monitoring = round(SJT_AL_gek, 2),
SJT_Managing_momentum = round(SJT_ST_gek, 2),
SJT_Rules_routines = round(SJT_R_gek, 2),
SJT_All = round(SJT_KF_gek, 2)
) %>%
arrange(Participant)
# sjt
df_sjt <-
read_excel("./data/SJT.xlsx") %>%
dplyr::select(UI06_05, # Participant
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 %in% c(201, 223, 216)) %>%  # exclude ID with no eye tracking data
transmute(
Participant = UI06_05,
SJT_Monitoring = round(SJT_AL_gek, 2),
SJT_Managing_momentum = round(SJT_ST_gek, 2),
SJT_Rules_routines = round(SJT_R_gek, 2),
SJT_All = round(SJT_KF_gek, 2)) %>%
arrange(Participant)
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_All)
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
filter(!Participant %in% c(216))
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
arrange(Participant)
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
arrange(Participant) %>%
filter(!Participant %in% c(216))
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
arrange(Participant) %>%
filter(!Participant %in% c(216)) %>%
dplyr::select(.,
-"Participant",
-"Teaching Experience")
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_All)
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_Monitoring)
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_Monitoring)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
arrange(Participant) %>%
# filter(!Participant %in% c(216)) %>%
dplyr::select(.,
-"Participant",
-"Teaching Experience")
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_Monitoring)
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
cor.test(df_merge$GRI_mtu, df_merge$SJT_Monitoring)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
arrange(Participant) %>%
filter(!Participant %in% c(216)) %>%
dplyr::select(.,
-"Participant",
-"Teaching Experience")
cor.test(df_merge$GRI_mtu, df_merge$SJT_Monitoring)
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
# p-value for GRI x STJ_All
cor.test(df_aoi_numb_dur$GRI_mtu, df_sjt$SJT_All)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
arrange(Participant) %>%
# filter(!Participant %in% c(216)) %>%
dplyr::select(.,
-"Participant",
-"Teaching Experience")
cor.test(df_merge$GRI_mtu, df_merge$SJT_Monitoring)
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
cor.test(df_merge$GRI_mtu, df_merge$SJT_Monitoring)
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix )
# read in data and select and rename relevant columns with transmute
demo.data <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(!LI06_05 == 201,
!LI06_05 == 223) %>% # exclude participant due to missing eye tracking data
transmute(Group = LI06_05,
Gender = LI02_01_1,
Age = LI03_01,
`Teaching Experience` = LI04_01,
School_type = LI18,
Grade = LI16_05,
Subject = LI10_05,
Semester = LI11_01,
Internship = LI13_01,
`Extracurricular Teaching Experience` = LI14,
`Secondary Teaching Activities` = LI17
)
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# creating new column with total participants to calculate percent of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
demo.data$School_type[demo.data$School_type == 2] <- "1"
# creating new column to calculate percent of school type
demo.data <-
demo.data %>%
group_by(School_type, Group) %>%
mutate(Count_Schooltype = sum(n())) %>%
mutate(Percent_schooltype = round((Count_Schooltype/Sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
demo.data$Percent_schooltype <- as.numeric(demo.data$Percent_schooltype)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# changing Type of School into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
demo.data$School_type <- factor(x = demo.data$School_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# changing `Secondary Teaching Activities` to count experience (no experience = 2 --> 0)
demo.data$`Secondary Teaching Activities` = ifelse(demo.data$`Secondary Teaching Activities` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Secondary Teaching Activities` <- as.numeric(demo.data$`Secondary Teaching Activities`)
# create new columns that give proportion of Gender
# percent = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percent = Gender/Sum_participants) %>%
#   mutate(Gender_percent = round(sum(Gender_percent)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Women in percent" = round(sum(Gender/Sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(Age),
digits = 2),
"SD Age in years" = round(sd(Age),
digits = 2),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`)
)
knitr::kable(demo.table,
caption = "Demographic information & teaching experience")
# # create a basic table (tibble) using tidyverse functions
# exp.table <- demo.data %>%
#   group_by(Group) %>%
#   summarise(N=n(),
#            "M Exp." = round(mean(`Teaching Experience`), 2),
#             "SD Exp." = round(sd(`Teaching Experience`), 2),
#             "Min Exp." = min(`Teaching Experience`),
#             "Max Exp." = max(`Teaching Experience`),
#             "M Semester" = round(mean(Semester), 2),
#             "SD Semester" = round(sd(Semester), 2),
#             "Min Semester" = min(Semester),
#             "Max Semester" = max(Semester),
#             "M Internship" = round(mean(Internship), 2),
#             "SD Internship" = round(sd(Internship), 2),
#             "Min Internship" = min(Internship),
#             "Max Internship" = max(Internship),
#             "Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
#             "Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
#            )
# return a character vector with names of .tsv data in data folder
file_names <- list.files(path = "data",
pattern = "interval_complete.tsv")
# read every object names in file_names and save it as a tibble
for (i in file_names) {
work_data <-
read_tsv(file = paste0("data/", i),
locale = locale(decimal_mark = ",")) %>%
dplyr::select(Group,
Participant,
TOI,
Duration_of_interval,
Start_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Average_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Time_to_first_fixation")
)
assign(value = work_data,
x = str_remove(paste0("tib_", i),
pattern = ".tsv"))
}
# bind every tibble that contains "interval_complete" to a new tible
df_aoi <-
mget(ls(pattern = "interval_complete")) %>%
bind_rows()
# extract only participants ID number
df_aoi$Participant <- as.numeric(
str_extract(df_aoi$Participant,
"\\d{3}")
)
# exclude invalid participants
df_aoi <- df_aoi %>%
filter(!Participant == 223)
# remove temporary data for a cleaner workspace
rm(list = ls(pattern = "^tib_ProVisio"))
rm(work_data)
rm(file_names)
rm(i)
df_aoi %>%
filter(TOI %in% c("Chatting_with_neighbour",
"Clicking_pen",
"Drawing",
"Drumming_with_hands",
"Head_on_table",
"Heckling",
"Looking_at_phone",
"Snipping_with_fingers",
"Whispering"
)
) %>%
dplyr::select(Participant,
TOI,
Time_to_first_fixation.Disruptive_Person,
) %>%
rowwise() %>%
drop_na() %>%
group_by(Participant) %>%
filter(!Time_to_first_fixation.Disruptive_Person == 0, # exclude all participants with 0 msec
!Time_to_first_fixation.Disruptive_Person > 30000) %>% # cut-off 30sec
summarise(N = n(),
Time_to_first_fixation.Disruptive_Person_Sum = sum(Time_to_first_fixation.Disruptive_Person/N)
) %>%
mutate(Group = ifelse(Participant < 200, "Novice", "Expert"),
Sum_disruptions = sum(N),
Disrup_time_fixation_sec = round(Time_to_first_fixation.Disruptive_Person_Sum / 1000,
digits = 2)) -> df_ttff_disrup # changing milliseconds into seconds
# Boxplot showing outliers
ggplot(df_ttff_disrup, aes(x = "", y = Disrup_time_fixation_sec)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of time to first fixation in seconds (AOI disruptive person)",
y = "Time to first fixation in seconds") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_ttff_disrup$Disrup_time_fixation_sec, 0.25)
Q3 <- quantile(df_ttff_disrup$Disrup_time_fixation_sec, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_ttff <- df_ttff_disrup %>%
filter(Disrup_time_fixation_sec >= LowerBound & Disrup_time_fixation_sec <= UpperBound)
View(df_no_outliers_ttff)
############### M, SD, min, max time to first fixation "Disruptive Person"
number.perceived.disrup.table <-
df_no_outliers_ttff %>%
group_by(Group) %>%
summarise(
N = n(),
"M in sec" = round(mean(N), digits = 2),
"SD in sec" = round(sd(N), digits = 2),
"Min in sec" = round(min(N), digits = 2),
"Max in sec" = round(max(N), digits = 2)
)
knitr::kable(number.perceived.disrup.table,
caption = "N, M, SD, min & max time to first fixation in seconds (AOI disruptive person)")
View(number.perceived.disrup.table)
############### M, SD, min, max of the perceived "Disruptive Person"
number.perceived.disrup.table <-
df_no_outliers_ttff %>%
group_by(Group, N) %>%
summarise(
N = n(),
"M in sec" = round(mean(N), digits = 2),
"SD in sec" = round(sd(N), digits = 2),
"Min in sec" = round(min(N), digits = 2),
"Max in sec" = round(max(N), digits = 2)
)
knitr::kable(number.perceived.disrup.table,
caption = "N, M, SD, min & max time to first fixation in seconds (AOI disruptive person)")
