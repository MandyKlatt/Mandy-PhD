filter(`Managing momentum` < LowerBound | `Managing momentum` > UpperBound)
# View the removed outliers
df_outliers_sjt_mm
### MONITORING
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = Monitoring)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Monitoring)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$All, 0.25)
Q3 <- quantile(df_sjt_mean$All, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` >= LowerBound & `Managing momentum` <= UpperBound)
# Filter to remove outliers
df_no_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$`Managing momentum`, 0.25)
Q3 <- quantile(df_sjt_mean$`Managing momentum`, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` >= LowerBound & `Managing momentum` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_mm)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_mm <- df_sjt_mean %>%
filter(`Managing momentum` < LowerBound | `Managing momentum` > UpperBound)
# View the removed outliers
df_outliers_sjt_mm
### MANAGING MOMENTUM
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = `Managing momentum`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Managing Momentum)",
y = "Score") +
theme_minimal()
# Filter to remove outliers
df_no_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_m)  # After removing outliers
### MONITORING
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = Monitoring)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Monitoring)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$Monitoring, 0.25)
Q3 <- quantile(df_sjt_mean$Monitoring, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring >= LowerBound & Monitoring <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_m)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_m <- df_sjt_mean %>%
filter(Monitoring < LowerBound | Monitoring > UpperBound)
# View the removed outliers
df_outliers_sjt_m
### RULES & ROUTINES
# Boxplot showing outliers (All)
ggplot(df_sjt_mean, aes(x = "", y = `Rules and routines`)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of SJT (Rules & routines)",
y = "Score") +
theme_minimal()
# Calculate the IQR and bounds
Q1 <- quantile(df_sjt_mean$`Rules and routines`, 0.25)
Q3 <- quantile(df_sjt_mean$`Rules and routines`, 0.75)
IQR <- Q3 - Q1
LowerBound <- Q1 - 1.5 * IQR
UpperBound <- Q3 + 1.5 * IQR
# Filter to remove outliers
df_no_outliers_sjt_r <- df_sjt_mean %>%
filter(`Rules and routines` >= LowerBound & `Rules and routines` <= UpperBound)
# Check the number of rows before and after filtering
nrow(df_sjt_mean)  # Original data
nrow(df_no_outliers_sjt_r)  # After removing outliers
# Create a dataframe with only the outliers
df_outliers_sjt_r <- df_sjt_mean %>%
filter(`Rules and routines` < LowerBound | `Rules and routines` > UpperBound)
# View the removed outliers
df_outliers_sjt_r
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix)
# read in data and select and rename relevant columns with transmute
demo.data <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(!LI06_05 == 201,
!LI06_05 == 223) %>% # exclude participant due to missing eye tracking data
transmute(Group = LI06_05,
Gender = LI02_01_1,
Age = LI03_01,
`Teaching Experience` = LI04_01,
School_type = LI18,
Grade = LI16_05,
Subject = LI10_05,
Semester = LI11_01,
Internship = LI13_01,
`Extracurricular Teaching Experience` = LI14,
`Secondary Teaching Activities` = LI17
)
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# creating new column with total participants to calculate percent of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
demo.data$School_type[demo.data$School_type == 2] <- "1"
# creating new column to calculate percent of school type
demo.data <-
demo.data %>%
group_by(School_type, Group) %>%
mutate(Count_Schooltype = sum(n())) %>%
mutate(Percent_schooltype = round((Count_Schooltype/Sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
demo.data$Percent_schooltype <- as.numeric(demo.data$Percent_schooltype)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# changing Type of School into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
demo.data$School_type <- factor(x = demo.data$School_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# changing `Secondary Teaching Activities` to count experience (no experience = 2 --> 0)
demo.data$`Secondary Teaching Activities` = ifelse(demo.data$`Secondary Teaching Activities` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Secondary Teaching Activities` <- as.numeric(demo.data$`Secondary Teaching Activities`)
# create new columns that give proportion of Gender
# percent = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percent = Gender/Sum_participants) %>%
#   mutate(Gender_percent = round(sum(Gender_percent)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Women in percent" = round(sum(Gender/Sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(Age),
digits = 2),
"SD Age in years" = round(sd(Age),
digits = 2),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`)
)
knitr::kable(demo.table,
caption = "Demographic information & teaching experience")
# # create a basic table (tibble) using tidyverse functions
# exp.table <- demo.data %>%
#   group_by(Group) %>%
#   summarise(N=n(),
#            "M Exp." = round(mean(`Teaching Experience`), 2),
#             "SD Exp." = round(sd(`Teaching Experience`), 2),
#             "Min Exp." = min(`Teaching Experience`),
#             "Max Exp." = max(`Teaching Experience`),
#             "M Semester" = round(mean(Semester), 2),
#             "SD Semester" = round(sd(Semester), 2),
#             "Min Semester" = min(Semester),
#             "Max Semester" = max(Semester),
#             "M Internship" = round(mean(Internship), 2),
#             "SD Internship" = round(sd(Internship), 2),
#             "Min Internship" = min(Internship),
#             "Max Internship" = max(Internship),
#             "Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
#             "Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
#            )
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix)
# return a character vector with names of .tsv data in data folder
file_names <- list.files(path = "data",
pattern = "interval_complete.tsv")
# read every object names in file_names and save it as a tibble
for (i in file_names) {
work_data <-
read_tsv(file = paste0("data/", i),
locale = locale(decimal_mark = ",")) %>%
dplyr::select(Group,
Participant,
TOI,
Duration_of_interval,
Start_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Average_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Time_to_first_fixation")
)
assign(value = work_data,
x = str_remove(paste0("tib_", i),
pattern = ".tsv"))
}
# bind every tibble that contains "interval_complete" to a new tible
df_aoi <-
mget(ls(pattern = "interval_complete")) %>%
bind_rows()
# extract only participants ID number
df_aoi$Participant <- as.numeric(
str_extract(df_aoi$Participant,
"\\d{3}")
)
# exclude invalid participants
df_aoi <- df_aoi %>%
filter(!Participant == 223)
# remove temporary data for a cleaner workspace
rm(list = ls(pattern = "^tib_ProVisio"))
rm(work_data)
rm(file_names)
rm(i)
# filter group, participants, total duration & number fixation (micro-teaching unit)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select (
Group,
Participant,
Duration_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
!"Total_duration_of_fixations.Disruptive_Person",
!"Number_of_fixations.Disruptive_Person",
!"Average_duration_of_fixations.Disruptive_Person"
) %>%
rowwise() %>%
transmute(
Group = Group,
Participant = Participant,
Duration_of_interval = Duration_of_interval,
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Duration_of_interval_sec = round(Duration_of_interval/1000, digits = 2),
Sum_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Sum_average_duration_fixation = sum(c_across(starts_with("Average_duration")), na.rm = TRUE),
Sum_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Average_duration_mtu = round(Sum_duration_fixation / Sum_number_fixation, digits = 0),
Number_fixation_sec_mtu = round(Sum_number_fixation / Duration_of_interval_sec, digits = 2),
Number_fixation_min_mtu = round(Sum_number_fixation / Duration_of_interval_min, digits = 0),
Group = as_factor(Group)
) %>%
drop_na() -> df_aoi_sum
######## N, M, SD, min & max number of fixation per minute (micro-teaching unit)
nof.table <-
df_aoi_sum %>%
group_by(Group) %>%
summarise(
N = n(),
"M" = round(mean(Number_fixation_min_mtu), digits = 2),
"SD" = round(sd(Number_fixation_min_mtu), digits = 2),
"Min" = round(min(Number_fixation_min_mtu), digits = 2),
"Max" = round(max(Number_fixation_min_mtu), digits = 2)
)
knitr::kable(nof.table,
caption = "N, M, SD, min & max number of fixation per minute (micro-teaching unit)")
# plotting number of fixations (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group, y = Number_fixation_min_mtu)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 150) +
labs(x = "", y = "Number of fixations per minute") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Number of fixations per minute\n(micro-teaching unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_number_group
plot_number_group
# plotting number of fixations (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group, y = Number_fixation_min_mtu)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 150) +
labs(x = "", y = "Anzahl der Fixationen pro Minute") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Anzahl der Fixationen pro Minute\n(Micro-Teaching Unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_number_group
plot_number_group
# plotting number of fixations (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group, y = Number_fixation_min_mtu)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 150) +
labs(x = "", y = "Anzahl der Fixationen pro Minute") +
scale_x_discrete(labels=c("Novice" = "Unerfahren",
"Expert" = "Erfahren")) +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Anzahl der Fixationen pro Minute\n(Micro-Teaching Unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_number_group
plot_number_group
# plotting number of fixations (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group, y = Number_fixation_min_mtu)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 200) +
labs(x = "", y = "Anzahl der Fixationen pro Minute") +
scale_x_discrete(labels=c("Novice" = "Unerfahren",
"Expert" = "Erfahren")) +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Anzahl der Fixationen pro Minute\n(Micro-Teaching Unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_number_group
plot_number_group
# plotting number of fixations (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group, y = Number_fixation_min_mtu)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 180) +
labs(x = "", y = "Anzahl der Fixationen pro Minute") +
scale_x_discrete(labels=c("Novice" = "Unerfahren",
"Expert" = "Erfahren")) +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Anzahl der Fixationen pro Minute\n(Micro-Teaching Unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_number_group
plot_number_group
# Boxplot showing outliers
ggplot(df_aoi_sum, aes(x = "", y = Average_duration_mtu)) +
geom_boxplot(outlier.color = "red", outlier.shape = 19, outlier.size = 3) +
labs(title = "Boxplot of Average duration of fixations",
y = "Average duration of fixations in msec") +
theme_minimal()
######## N, M, SD, min & max average duration of fixations (micro-teaching unit)
dur.table <-
df_aoi_sum %>%
group_by(Group) %>%
summarise(
N = n(),
"M in ms" = round(mean(Average_duration_mtu), digits = 2),
"SD in ms" = round(sd(Average_duration_mtu), digits = 2),
"Min in ms" = round(min(Average_duration_mtu), digits = 2),
"Max in ms" = round(max(Average_duration_mtu), digits = 2)
)
knitr::kable(dur.table,
caption = "N, M, SD, min & max duration of fixations in milliseconds (micro-teaching unit)")
# plotting average duration (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group,
y = Average_duration_mtu)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 2,
alpha = 0.7,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ylim(0, 1000) +
labs(x ="",
y = "Millisekunden") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Dauer der Fixationen\n(Micro-Teaching Unit)") +
scale_x_discrete(labels=c("Novice" = "Unerfahren",
"Expert" = "Erfahren")) +
theme_cowplot() +
theme(legend.position="none") -> plot_average_duration_group
plot_average_duration_group
knitr::kable(nof.table,
caption = "N, M, SD, min & max number of fixation per minute (micro-teaching unit)")
knitr::kable(dur.table,
caption = "N, M, SD, min & max duration of fixations in milliseconds (micro-teaching unit)")
# AVERAGE DURATION OF FIXATIONS on all AOIs
# t-test for expertise differences
t.test(x = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Novice"],
var.equal = TRUE)
# AVERAGE DURATION OF FIXATIONS on all AOIs
# effect size for expertise differences
d_aver_all <- CohenD(x = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Novice"],
na.rm = TRUE)
round(d_aver_all, 2)
# NUMBER OF FIXATIONS PER MINUTE (micro-teaching unit)
# t-test for expertise differences
t.test(
x = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Novice"],
var.equal = TRUE
)
# NUMBER OF FIXATIONS PER MINUTE (micro-teaching unit)
# effect size for expertise differences
d_number_all <- CohenD(
x = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Novice"],
na.rm = TRUE
)
round(d_number_all, 2)
# AVERAGE DURATION OF FIXATIONS on all AOIs
# t-test for expertise differences
t.test(x = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Novice"],
var.equal = TRUE)
