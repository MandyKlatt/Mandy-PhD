labs(x = "", y = "Mean Scores") +
ylim(0, 4) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
arrange(Participant) %>%
select(
Participant,
Group,
LM01_01:LM01_05,  # Classroom Management
LM01_06:LM01_08,  # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
rename(
CM_01 = LM01_01, CM_02 = LM01_02, CM_03 = LM01_03, CM_04 = LM01_04, CM_05 = LM01_05,
DH_01 = LM01_06, DH_02 = LM01_07, DH_03 = LM01_08,
P_01 = LP01_01, P_02 = LP01_02, P_03 = LP01_03, P_04 = LP01_04, P_05 = LP01_05,
P_06 = LP01_06, P_07 = LP01_07, P_08 = LP01_08
) %>%
na.omit()  # Remove NAs
# Create Dataset for Plotting with Overall Measure --------------------------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`Classroom Management` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Disruption Handling` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Presence` = round(mean(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),  # Excluding Participant column
`Overall` = round(mean(c(CM_01, CM_02, CM_03, CM_04, CM_05, DH_01, DH_02, DH_03, P_01, P_02, P_03, P_04, P_05, P_06, P_07, P_08), na.rm = TRUE), 2)  # Correct Overall value
) %>%
ungroup() %>%
pivot_longer(cols = c(`Classroom Management`, `Disruption Handling`, `Presence`, `Overall`),
names_to = "Scales Self-evaluation", values_to = "Mean")
View(df_self_all)
View(df_quest_long)
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(
Group = factor(Group, levels = c("Novice", "Expert")),
`Scales Self-evaluation` = factor(`Scales Self-evaluation`, levels = c("Classroom Management", "Disruption Handling", "Presence", "Overall"))  # Reorder scales
) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
ylim(0, 4) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
arrange(Participant) %>%
select(
Participant,
Group,
LM01_01:LM01_08,  # Classroom Management and Disruption Handling combined
LP01_01:LP01_08   # Presence
) %>%
rename(
CM_01 = LM01_01, CM_02 = LM01_02, CM_03 = LM01_03, CM_04 = LM01_04, CM_05 = LM01_05,
CM_06 = LM01_06, CM_07 = LM01_07, CM_08 = LM01_08,  # Renaming combined columns
P_01 = LP01_01, P_02 = LP01_02, P_03 = LP01_03, P_04 = LP01_04, P_05 = LP01_05,
P_06 = LP01_06, P_07 = LP01_07, P_08 = LP01_08
) %>%
na.omit()  # Remove NAs
# Create Dataset for Plotting with Combined Scales -------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`Classroom Management` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),  # Combine Classroom Management and Disruption Handling
`Presence` = round(mean(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),  # Excluding Participant column
`Overall` = round(mean(c(CM_01, CM_02, CM_03, CM_04, CM_05, CM_06, CM_07, CM_08, P_01, P_02, P_03, P_04, P_05, P_06, P_07, P_08), na.rm = TRUE), 2)  # Correct Overall value
) %>%
ungroup() %>%
pivot_longer(cols = c(`Classroom Management`, `Presence`, `Overall`),
names_to = "Scales Self-evaluation", values_to = "Mean")
View(df_quest_long)
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(
Group = factor(Group, levels = c("Novice", "Expert")),
`Scales Self-evaluation` = factor(`Scales Self-evaluation`, levels = c("Classroom Management", "Presence", "Overall"))  # Reorder scales
) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
ylim(0, 4) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
arrange(Participant) %>%
select(
Participant,
Group,
LM01_01:LM01_08,  # Classroom Management and Disruption Handling combined
LP01_01:LP01_08   # Presence
) %>%
rename(
CM_01 = LM01_01, CM_02 = LM01_02, CM_03 = LM01_03, CM_04 = LM01_04, CM_05 = LM01_05,
CM_06 = LM01_06, CM_07 = LM01_07, CM_08 = LM01_08,  # Renaming combined columns
P_01 = LP01_01, P_02 = LP01_02, P_03 = LP01_03, P_04 = LP01_04, P_05 = LP01_05,
P_06 = LP01_06, P_07 = LP01_07, P_08 = LP01_08
) %>%
na.omit()  # Remove NAs
# Create Dataset for Plotting with Combined Scales -------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`Classroom Management` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),  # Combine Classroom Management and Disruption Handling
`Presence` = round(mean(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),  # Excluding Participant column
`Overall` = round(mean(c(CM_01, CM_02, CM_03, CM_04, CM_05, CM_06, CM_07, CM_08, P_01, P_02, P_03, P_04, P_05, P_06, P_07, P_08), na.rm = TRUE), 2)  # Correct Overall value
) %>%
ungroup() %>%
pivot_longer(cols = c(`Classroom Management`, `Presence`, `Overall`),
names_to = "Scales Self-evaluation", values_to = "Mean")
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(
Group = factor(Group, levels = c("Novice", "Expert")),
`Scales Self-evaluation` = factor(`Scales Self-evaluation`, levels = c("Classroom Management", "Presence", "Overall"))  # Reorder scales
) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
ylim(0, 4) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
# t-Test and Effect Sizes ------------------------------------------------
# t-Test Function for Long Format ----------------------------------------
t_test_stats_long <- function(data, group_col, scale_filter, scale_name) {
# Subset Data for the Specific Scale
filtered_data <- data %>%
filter(`Scales Self-evaluation` == scale_filter)
# Check if there are exactly two levels in the group
if (length(unique(filtered_data[[group_col]])) != 2) {
warning(paste("Skipping t-test for", scale_name, ": Group must have exactly two levels"))
return(tibble(
`Scale` = scale_name,
`t-value` = NA,
`p-value` = NA,
`Cohen's d` = NA
))
}
# Perform t-Test
t_test <- t.test(
Mean ~ get(group_col),
data = filtered_data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = filtered_data %>% filter(!!rlang::sym(group_col) == "Expert") %>% pull(Mean),
y = filtered_data %>% filter(!!rlang::sym(group_col) == "Novice") %>% pull(Mean)
)
# Return Results
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Perform t-Tests for Each Scale
t_test_all <- t_test_stats_long(df_quest_long, "Group", "Overall", "Overall Evaluation")
t_test_cm <- t_test_stats_long(df_quest_long, "Group", "Classroom Management", "Classroom Management")
t_test_presence <- t_test_stats_long(df_quest_long, "Group", "Presence", "Presence")
# Combine Results into a Single Table
t_test_results <- bind_rows(t_test_all, t_test_cm, t_test_presence)
# Display Results in APA-Conform Table
kable(t_test_results, caption = "t-Test and Effect Sizes for Self-Evaluation Scales") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Internal Consistency (Omega) -------------------------------------------
# Helper Function for Omega Calculation
calculate_omega_total <- function(data, scale_name) {
if (nrow(data) == 0 || ncol(data) == 0) {
warning(paste("No valid data for", scale_name))
return(NA)
}
# Try Omega Calculation
result <- tryCatch(
omega(data),
error = function(e) {
warning(paste("Omega calculation failed for", scale_name, ":", e$message))
return(NULL)
}
)
# Check if Result is Valid and Extract omega.tot
if (is.null(result) || !"omega.tot" %in% names(result)) {
warning(paste("Omega total not available for", scale_name))
return(NA)
}
return(round(result$omega.tot, 2))
}
### CLASSROOM MANAGEMENT -------------------------------------------------
# Select relevant columns and remove NAs
df_cm <- df_quest %>% select(starts_with("CM"))
# Calculate omega for Classroom Management
omega_cm <- calculate_omega_total(df_cm, "Classroom Management")
### PRESENCE ------------------------------------------------------------
# Select relevant columns and remove NAs
df_presence <- df_quest %>% select(starts_with("P") & !starts_with("Participant"))
# Calculate omega for Presence
omega_presence <- calculate_omega_total(df_presence, "Presence")
### OVERALL TEST -----------------------------------------------------
# Select relevant columns and remove NAs (for overall evaluation)
df_self_all <- df_quest %>%
select(starts_with("CM"), starts_with("P") & !starts_with("Participant")) %>%
mutate(across(everything(), as.numeric)) %>%  # Ensure numeric data
drop_na()
# Calculate omega for Overall Evaluation
omega_self_all <- calculate_omega_total(df_self_all, "Overall Evaluation")
### COMBINE RESULTS INTO AN APA-CONFORM TABLE ----------------------------
# APA-Conform Table ------------------------------------------------------
omega_results <- tibble(
Facet = c("Overall Evaluation", "Classroom Management", "Presence"),
`Omega Total` = c(omega_self_all, omega_cm, omega_presence)
)
# Display APA-Conform Table ----------------------------------------------
kable(omega_results, caption = "Internal Consistency (Omega) for Self-evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Demo Data
df_demo <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(!LI06_05 %in% c(201, 223)) %>%  # Exclude participants without eye-tracking data
transmute(
Participant = LI06_05,
`Teaching Experience` = LI04_01
) %>%
arrange(Participant)
View(df_demo)
# Step 1: List all .tsv files in the "data" folder that contain "interval_complete"
file_names <- list.files(path = "data", pattern = "interval_complete.tsv", full.names = TRUE)
# Step 2: Read and bind all .tsv files into a single tibble
df_aoi <- file_names %>%
map_dfr(~ read_tsv(.x, locale = locale(decimal_mark = ",")) %>%
select(
Group,
Participant,
TOI,
Duration_of_interval,
Start_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Average_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Time_to_first_fixation")
))
# Step 3: Extract only the participant's ID number (3 digits)
df_aoi <- df_aoi %>%
mutate(Participant = as.numeric(str_extract(Participant, "\\d{3}")))
# Step 4: Exclude invalid participant ID 223
df_aoi <- df_aoi %>%
filter(Participant != 223)
# ET-Measures (Micro-Teaching Unit) - Exclude Disruptive Person
df_aoi_numb_dur <- df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Participant,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
Duration_of_interval  # Ensure this variable is included
) %>%
dplyr::select(
-contains("Disruptive_Person")  # Exclude Disruptive Person
) %>%
rowwise() %>%
transmute(
Participant,
Duration_of_interval_min = round(Duration_of_interval / 60000, 2),
Number_fixation_min_mtu = round(sum(c_across(starts_with("Number_of")), na.rm = TRUE) /
Duration_of_interval_min, 0),
Average_duration_mtu = round(sum(c_across(starts_with("Total_duration")), na.rm = TRUE) /
sum(c_across(starts_with("Number_of")), na.rm = TRUE), 0),
GRI_mtu = round(Average_duration_mtu / Number_fixation_min_mtu, 2)
) %>%
arrange(Participant)
View(df_aoi_numb_dur)
# ET-Measures (Micro-Teaching Unit) - Exclude Disruptive Person
df_aoi_numb_dur <- df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Participant,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
Duration_of_interval  # Ensure this variable is included
) %>%
dplyr::select(
-contains("Disruptive_Person")  # Exclude Disruptive Person
) %>%
rowwise() %>%
transmute(
Participant,
Duration_of_interval_min = round(Duration_of_interval / 60000, 2),
Number_fixation_min_mtu = round(sum(c_across(starts_with("Number_of")), na.rm = TRUE) /
Duration_of_interval_min, 0),
Average_duration_mtu = round(sum(c_across(starts_with("Total_duration")), na.rm = TRUE) /
sum(c_across(starts_with("Number_of")), na.rm = TRUE), 0),
GRI_mtu = round(Average_duration_mtu / Number_fixation_min_mtu, 2)
) %>%
selct(Participant,
Number_fixation_min_mtu,
Average_duration_mtu,
GRI_mtu) %>%
arrange(Participant)
# ET-Measures (Micro-Teaching Unit) - Exclude Disruptive Person
df_aoi_numb_dur <- df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Participant,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
Duration_of_interval  # Ensure this variable is included
) %>%
dplyr::select(
-contains("Disruptive_Person")  # Exclude Disruptive Person
) %>%
rowwise() %>%
transmute(
Participant,
Duration_of_interval_min = round(Duration_of_interval / 60000, 2),
Number_fixation_min_mtu = round(sum(c_across(starts_with("Number_of")), na.rm = TRUE) /
Duration_of_interval_min, 0),
Average_duration_mtu = round(sum(c_across(starts_with("Total_duration")), na.rm = TRUE) /
sum(c_across(starts_with("Number_of")), na.rm = TRUE), 0),
GRI_mtu = round(Average_duration_mtu / Number_fixation_min_mtu, 2)
) %>%
select(Participant,
Number_fixation_min_mtu,
Average_duration_mtu,
GRI_mtu) %>%
arrange(Participant)
View(df_aoi_numb_dur)
# ET-Measures (AOI Students) - Exclude Disruptive Person
df_aoi_stud <- df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select (
Group,
Duration_of_interval,
Participant,
"Total_duration_of_fixations.Anna",
"Total_duration_of_fixations.Bianca",
"Total_duration_of_fixations.Carl(a)",
"Number_of_fixations.Anna",
"Number_of_fixations.Bianca",
"Number_of_fixations.Carl(a)"
) %>%
rowwise() %>%
transmute(
Group = as_factor(Group),
Duration_of_interval_min = round(Duration_of_interval / 60000, 2),
Duration_of_interval_sec = round(Duration_of_interval / 1000, 2),
Participant = Participant,
Stud_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Stud_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Stud_number_fixation_min = round(Stud_number_fixation / Duration_of_interval_min, 2),
Average_duration_stud = round(Stud_duration_fixation / Stud_number_fixation, 0)
) %>%
select(Participant,
Stud_number_fixation_min,
Average_duration_stud
) %>%
arrange(Participant) %>%
drop_na()
# ET-Measures (AOI Disruptive Person)
# Number of fixations per second
# Define the different types of disruptions and categories
disruptions <- c(
"Chatting_with_neighbour",
"Clicking_pen",
"Drawing",
"Drumming_with_hands",
"Head_on_table",
"Heckling",
"Looking_at_phone",
"Snipping_with_fingers",
"Whispering"
)
verbal_disruptions <- c("Chatting_with_neighbour",
"Heckling",
"Whispering")
physical_disruptions <- c("Clicking_pen",
"Drumming_with_hands",
"Snipping_with_fingers")
lack_of_eagerness <- c("Looking_at_phone",
"Head_on_table",
"Drawing")
# Step 1: Filter and prepare the data
df_aoi_disrup <- df_aoi %>%
filter(TOI %in% disruptions) %>%  # Filter rows based on the disruption list
select(
Group,
Participant,
TOI,
Duration_of_interval,
"Number_of_fixations.Disruptive_Person"
) %>%
mutate(
Group = as_factor(Group),  # Convert Group column to a factor
Disruption_Category = case_when(
# Assign categories based on disruption type
TOI %in% verbal_disruptions ~ "Verbal disruptions",
TOI %in% physical_disruptions ~ "Physical disruptions",
TOI %in% lack_of_eagerness ~ "Lack of eagerness to learn",
TRUE ~ NA_character_
),
Duration_of_interval_sec = round(Duration_of_interval / 1000, 2)  # Convert duration to seconds
) %>%
filter(!is.na(Disruption_Category))  # Keep only rows with valid categories
# Step 2: Aggregate data by Participant and Disruption Category
df_aoi_numb_disrup <- df_aoi_disrup %>%
group_by(Participant, Disruption_Category) %>%
summarise(
Total_Number_of_Fixations = sum(`Number_of_fixations.Disruptive_Person`, na.rm = TRUE),
Total_Duration_of_Interval_Sec = sum(Duration_of_interval_sec, na.rm = TRUE),
.groups = "drop"  # Avoid unnecessary grouping
)
# Step 3: Pivot the data to create a single row for each Participant
df_summary <- df_aggregated %>%
pivot_wider(
names_from = Disruption_Category,
values_from = c(Total_Number_of_Fixations, Total_Duration_of_Interval_Sec),
values_fill = 0  # Replace missing values with 0
)
# Step 3: Pivot the data to create a single row for each Participant
df_summary <- df_aoi_numb_disrup %>%
pivot_wider(
names_from = Disruption_Category,
values_from = c(Total_Number_of_Fixations, Total_Duration_of_Interval_Sec),
values_fill = 0  # Replace missing values with 0
)
View(df_summary)
