Participant = as.numeric(str_extract(Participant, "\\d{3}")),
Group = case_when(  # Assign group based on Participant ID
Participant > 200 ~ "Expert",
Participant < 200 ~ "Novice",
TRUE ~ NA_character_  # In case there's any other value or missing
)
)
# Step 4: Exclude invalid participant ID 223
df_aoi <- df_aoi %>%
filter(Participant != 223)
##################### GRI in MICRO-TEACHING UNIT ########################
##################### Data Preparation ########################
# Step 1: Calculate GRI (Gaze Relational Index) for each participant
df_gri <- df_aoi_sum %>%
mutate(GRI = Avg_fixation_duration / Number_fixation_min_mtu)
##################### GRI in MICRO-TEACHING UNIT ########################
#################### Data Preparation ########################
df_aoi_sum <- df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Group,
Participant,
Duration_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
-contains("Disruptive_Person")
) %>%
rowwise() %>%
transmute(
Group = factor(Group, levels = c("Expert", "Novice"), labels = c("Experienced", "Inexperienced")),
Participant,
Duration_of_interval_min = Duration_of_interval / 60000,
Sum_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Sum_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Number_fixation_min_mtu = Sum_number_fixation / Duration_of_interval_min,
Avg_fixation_duration = Sum_duration_fixation / Sum_number_fixation
) %>%
drop_na()
##################### Data Preparation ########################
# Step 1: Calculate GRI (Gaze Relational Index) for each participant
df_gri <- df_aoi_sum %>%
mutate(GRI = Avg_fixation_duration / Number_fixation_min_mtu)
##################### Descriptive Statistics ########################
# Step 2: Summarize GRI statistics (N, M, SD, Min, Max) by Group
gri_stats <- df_gri %>%
group_by(Group) %>%
summarise(
N = n(),
M = round(mean(GRI, na.rm = TRUE), 2),
SD = round(sd(GRI, na.rm = TRUE), 2),
Min = round(min(GRI, na.rm = TRUE), 2),
Max = round(max(GRI, na.rm = TRUE), 2)
)
# Display the GRI summary table in APA format
knitr::kable(gri_stats,
caption = "N, M, SD, Min, and Max for Gaze Relational Index (GRI)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### t-Test and Effect Size ########################
# Step 3: Conduct t-Test and Cohen's d
t_test_gri <- t.test(GRI ~ Group, data = df_gri, var.equal = TRUE)
cohen_d_gri <- cohen.d(GRI ~ Group, data = df_gri)
# Step 4: Create a t-Test and Effect Size APA Table
t_test_result_gri <- data.frame(
"Group Comparison" = "Experienced vs. Inexperienced",
"t-value" = round(t_test_gri$statistic, 2),
"df" = t_test_gri$parameter,
"p-value" = format.pval(t_test_gri$p.value, digits = 2, eps = .05),
"Mean Difference" = round(t_test_gri$estimate[1] - t_test_gri$estimate[2], 2),
"Cohen's d" = round(cohen_d_gri$estimate, 2),
"95% CI (d)" = paste0("[", round(cohen_d_gri$conf.int[1], 2), ", ", round(cohen_d_gri$conf.int[2], 2), "]")
)
# Display t-Test and Effect Size results in APA format
knitr::kable(t_test_result_gri,
caption = "t-Test and Effect Size for Gaze Relational Index (GRI)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### Plot: GRI by Group ########################
# Calculate annotation values for the plot
mean_expert_gri <- round(mean(df_gri$GRI[df_gri$Group == "Experienced"], na.rm = TRUE), 2)
sd_expert_gri <- round(sd(df_gri$GRI[df_gri$Group == "Experienced"], na.rm = TRUE), 2)
mean_novice_gri <- round(mean(df_gri$GRI[df_gri$Group == "Inexperienced"], na.rm = TRUE), 2)
sd_novice_gri <- round(sd(df_gri$GRI[df_gri$Group == "Inexperienced"], na.rm = TRUE), 2)
y_max_gri <- max(df_gri$GRI, na.rm = TRUE) * 1.5
# Step 5: Plot GRI by Group
plot_gri_group <- df_gri %>%
ggplot(aes(x = Group, y = GRI, fill = Group)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, width = 0.5) +
geom_jitter(width = 0.15, height = 0.1, alpha = 0.5, color = "black", size = 1.5) +
stat_summary(fun = mean, geom = "point", shape = 4, size = 5, color = "blue", stroke = 1.5) +
scale_fill_brewer(palette = "RdBu") +
ylim(0, y_max_gri) +
labs(title = "Gaze Relational Index\n(Micro-Teaching Unit)", x = "", y = "GRI") +
theme_cowplot() +
theme(legend.position = "none") +
# Annotate mean (M) and SD above the x-axis
annotate("text", x = 1, y = 0.5,  # Adjust y-coordinate to place above the x-axis
label = paste0("italic(M) == ", mean_expert_gri, " * ',' ~ italic(SD) == ", sd_expert_gri),
hjust = 0.5, size = 4, parse = TRUE) +
annotate("text", x = 2, y = 0.5,  # Adjust y-coordinate to place above the x-axis
label = paste0("italic(M) == ", mean_novice_gri, " * ',' ~ italic(SD) == ", sd_novice_gri),
hjust = 0.5, size = 4, parse = TRUE) +
# Annotate p-value and Cohen's d above the plot
annotate("text", x = 1.5, y = y_max_gri * 0.95,
label = paste0("italic(p) == ", round(t_test_gri$p.value, 2), " * ',' ~ italic(d) == ", round(cohen_d_gri$estimate, 2)),
hjust = 0.5, size = 4, fontface = "italic", parse = TRUE)
plot_gri_group
# Save the plot
ggsave(filename = "plots/plot_gri_group.svg",
width = 20,
height = 12,
units = "cm")
#### Number of Fixations per Minute and Average Fixation Duration (AOI Students)
##################### Data Preparation ########################
df_aoi_stud <- df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select(
Group,
Participant,
Duration_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations")
) %>%
rowwise() %>%
transmute(
Group = factor(Group, levels = c("Expert", "Novice"), labels = c("Experienced", "Inexperienced")),
Participant,
Duration_of_interval_min = Duration_of_interval / 60000,
Stud_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Stud_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Stud_number_fixation_min = Stud_number_fixation / Duration_of_interval_min,
Avg_fixation_duration_stud = Stud_duration_fixation / Stud_number_fixation
) %>%
drop_na()
##################### Number of Fixations per Minute ########################
# Descriptive Statistics for Number of Fixations per Minute
nof_stats_stud <- df_aoi_stud %>%
group_by(Group) %>%
summarise(
N = n(),
M = round(mean(Stud_number_fixation_min, na.rm = TRUE), 2),
SD = round(sd(Stud_number_fixation_min, na.rm = TRUE), 2),
Min = round(min(Stud_number_fixation_min, na.rm = TRUE), 2),
Max = round(max(Stud_number_fixation_min, na.rm = TRUE), 2)
)
# Display Table
knitr::kable(nof_stats_stud, caption = "N, M, SD, Min & Max for Number of Fixations per Minute (AOI Students)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
# t-Test and Cohen's d
t_test_nof_stud <- t.test(Stud_number_fixation_min ~ Group, data = df_aoi_stud, var.equal = TRUE)
cohen_d_nof_stud <- cohen.d(Stud_number_fixation_min ~ Group, data = df_aoi_stud)
# APA Table
t_test_result_nof_stud <- data.frame(
"Group Comparison" = "Experienced vs. Inexperienced",
"t-value" = round(t_test_nof_stud$statistic, 2),
"df" = t_test_nof_stud$parameter,
"p-value" = format.pval(t_test_nof_stud$p.value, digits = 2, eps = .05),
"Mean Difference" = round(t_test_nof_stud$estimate[1] - t_test_nof_stud$estimate[2], 2),
"Cohen's d" = round(cohen_d_nof_stud$estimate, 2),
"95% CI (d)" = paste0("[", round(cohen_d_nof_stud$conf.int[1], 2), ", ", round(cohen_d_nof_stud$conf.int[2], 2), "]")
)
knitr::kable(t_test_result_nof_stud, caption = "t-Test and Effect Size for Number of Fixations per Minute (AOI Students)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Plot: Number of Fixations per Minute
y_max_nof_stud <- max(df_aoi_stud$Stud_number_fixation_min) * 1.5
plot_nof_stud <- df_aoi_stud %>%
ggplot(aes(x = Group, y = Stud_number_fixation_min, fill = Group)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, width = 0.5) +
geom_jitter(width = 0.15, height = 0.1, alpha = 0.5, color = "black", size = 1.5) +
stat_summary(fun = mean, geom = "point", shape = 4, size = 5, color = "blue", stroke = 1.2) +
scale_fill_brewer(palette = "RdBu") +
ylim(0, y_max_nof_stud) +
labs(title = "Number of Fixations per Minute\n(AOI Students)", x = "", y = "Fixations per Minute") +
theme_cowplot() +
theme(legend.position = "none") +
annotate("text", x = 1, y = 3,
label = paste0("italic(M) == ", round(nof_stats_stud$M[1], 2), " * ',' ~ italic(SD) == ", round(nof_stats_stud$SD[1], 2)),
hjust = 0.5, size = 4, parse = TRUE) +
annotate("text", x = 2, y = 3,
label = paste0("italic(M) == ", round(nof_stats_stud$M[2], 2), " * ',' ~ italic(SD) == ", round(nof_stats_stud$SD[2], 2)),
hjust = 0.5, size = 4, parse = TRUE) +
annotate("text", x = 1.5, y = y_max_nof_stud * 0.95,
label = paste0("italic(p) == ", round(t_test_nof_stud$p.value, 2), " * ',' ~ italic(d) == ", round(cohen_d_nof_stud$estimate, 2)),
hjust = 0.5, size = 4, fontface = "italic", parse = TRUE)
plot_nof_stud
ggsave(filename = "plots/plot_nof_stud.svg",
width = 20,
height = 12,
units = "cm")
# ##################### Average Fixation Duration ########################
# # Descriptive Statistics for Average Fixation Duration
# fixation_stats_stud <- df_aoi_stud %>%
#   group_by(Group) %>%
#   summarise(
#     N = n(),
#     M = round(mean(Avg_fixation_duration_stud, na.rm = TRUE), 2),
#     SD = round(sd(Avg_fixation_duration_stud, na.rm = TRUE), 2),
#     Min = round(min(Avg_fixation_duration_stud, na.rm = TRUE), 2),
#     Max = round(max(Avg_fixation_duration_stud, na.rm = TRUE), 2)
#   )
#
# # Display Table
# knitr::kable(fixation_stats_stud, caption = "N, M, SD, Min & Max for Average Fixation Duration (AOI Students)") %>%
#   kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # t-Test and Cohen's d
# t_test_fixation_stud <- t.test(Avg_fixation_duration_stud ~ Group, data = df_aoi_stud, var.equal = TRUE)
# cohen_d_fixation_stud <- cohen.d(Avg_fixation_duration_stud ~ Group, data = df_aoi_stud)
#
# # APA Table
# t_test_result_fixation_stud <- data.frame(
#   "Group Comparison" = "Experienced vs. Inexperienced",
#   "t-value" = round(t_test_fixation_stud$statistic, 2),
#   "df" = t_test_fixation_stud$parameter,
#   "p-value" = format.pval(t_test_fixation_stud$p.value, digits = 2, eps = .05),
#   "Mean Difference" = round(t_test_fixation_stud$estimate[1] - t_test_fixation_stud$estimate[2], 2),
#   "Cohen's d" = round(cohen_d_fixation_stud$estimate, 2),
#   "95% CI (d)" = paste0("[", round(cohen_d_fixation_stud$conf.int[1], 2), ", ", round(cohen_d_fixation_stud$conf.int[2], 2), "]")
# )
#
# knitr::kable(t_test_result_fixation_stud, caption = "t-Test and Effect Size for Average Fixation Duration (AOI Students)") %>%
#   kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Plot: Average Fixation Duration
# y_max_fixation_stud <- max(df_aoi_stud$Avg_fixation_duration_stud) * 1.5
#
# plot_fixation_duration_stud <- df_aoi_stud %>%
#   ggplot(aes(x = Group, y = Avg_fixation_duration_stud, fill = Group)) +
#   geom_boxplot(outlier.shape = 16, outlier.size = 2, width = 0.5) +
#   geom_jitter(width = 0.15, height = 0.1, alpha = 0.5, color = "black", size = 1.5) +
#   stat_summary(fun = mean, geom = "point", shape = 4, size = 5, color = "blue", stroke = 1.2) +
#   scale_fill_brewer(palette = "RdBu") +
#   ylim(0, y_max_fixation_stud) +
#   labs(title = "Average Fixation Duration\n(AOI Students)", x = "", y = "Fixation Duration (ms)") +
#   theme_cowplot() +
#   theme(legend.position = "none") +
#   annotate("text", x = 1, y = 10,  # Adjust y-coordinate to place above the x-axis
#            label = paste0("italic(M) == ", round(fixation_stats_stud$M[1], 2), " * ',' ~ italic(SD) == ", round(fixation_stats_stud$SD[1], 2)),
#            hjust = 0.5, size = 4, parse = TRUE) +
#   annotate("text", x = 2, y = 10,  # Adjust y-coordinate to place above the x-axis
#            label = paste0("italic(M) == ", round(fixation_stats_stud$M[2], 2), " * ',' ~ italic(SD) == ", round(fixation_stats_stud$SD[2], 2)),
#            hjust = 0.5, size = 4, parse = TRUE) +
#   annotate("text", x = 1.5, y = y_max_fixation_stud * 0.95,
#            label = paste0("italic(p) == ", round(t_test_fixation_stud$p.value, 2), " * ',' ~ italic(d) == ", round(cohen_d_fixation_stud$estimate, 2)),
#            hjust = 0.5, size = 4, fontface = "italic", parse = TRUE)
#
# plot_fixation_duration_stud
#
# ggsave(filename = "plots/plot_fixation_duration_stud.svg",
#        width = 20,
#        height = 12,
#        units = "cm")
##################### TIME TO FIRST FIXATION ########################
# Define disruptions and categories
verbal_disruptions <- c("Chatting_with_neighbour", "Heckling", "Whispering")
physical_disruptions <- c("Clicking_pen", "Drumming_with_hands", "Snipping_with_fingers")
lack_of_eagerness <- c("Looking_at_phone", "Head_on_table", "Drawing")
# Step 1: Data Preparation
df_ttff_disrup <- df_aoi %>%
filter(TOI %in% c(verbal_disruptions, physical_disruptions, lack_of_eagerness)) %>%
dplyr::select(
Participant,
TOI,
Time_to_first_fixation.Disruptive_Person
) %>%
mutate(
Group = ifelse(Participant < 200, "Novice", "Expert"),  # Assigning Group based on Participant
Disruption_Category = case_when(
TOI %in% verbal_disruptions ~ "Verbal disruptions",
TOI %in% physical_disruptions ~ "Physical disruptions",
TOI %in% lack_of_eagerness ~ "Lack of eagerness to learn",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(Disruption_Category)) %>% # Keep only rows with valid categories
drop_na() %>%
filter(
Time_to_first_fixation.Disruptive_Person > 0, # Exclude zero fixation times
Time_to_first_fixation.Disruptive_Person <= 30000 # Cut-off at 30 seconds
) %>%
mutate(
Disrup_time_fixation_sec = round(Time_to_first_fixation.Disruptive_Person / 1000, 2),
log_Disrup_time_fixation_sec = round(log(Disrup_time_fixation_sec), 2) # Log-transformed variable
)
# Summarize the log-transformed variable by Participant
df_ttff_disrup_participant_summary <- df_ttff_disrup %>%
group_by(Participant, Group) %>%
summarise(
log_Disrup_time_fixation_sec = round(mean(log_Disrup_time_fixation_sec, na.rm = TRUE), 2), # Average log time to first fixation per participant
.groups = "drop"
)
##################### DESCRIPTIVE STATISTICS ########################
# Step 2: Descriptive Statistics by Group
log_ttff_disrup_table <- df_ttff_disrup_participant_summary %>%
group_by(Group) %>%
summarise(
N = n(),
"M (log-sec)" = round(mean(log_Disrup_time_fixation_sec, na.rm = TRUE), 2),
"SD (log-sec)" = round(sd(log_Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Min (log-sec)" = round(min(log_Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Max (log-sec)" = round(max(log_Disrup_time_fixation_sec, na.rm = TRUE), 2)
)
knitr::kable(log_ttff_disrup_table,
caption = "N, M, SD, Min & Max Log-Transformed Time to First Fixation (AOI Disruptive Student)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### STATISTICS BY DISRUPTION CATEGORY ########################
# Step 3: Descriptive Statistics by Category and Group
summary_stats_log_category_group <- df_ttff_disrup %>%
group_by(Disruption_Category, Group) %>%
summarise(
N = n_distinct(Participant),  # Count unique participants
"M (log-sec)" = round(mean(log_Disrup_time_fixation_sec, na.rm = TRUE), 2),
"SD (log-sec)" = round(sd(log_Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Min (log-sec)" = round(min(log_Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Max (log-sec)" = round(max(log_Disrup_time_fixation_sec, na.rm = TRUE), 2)
)
# Display the table
knitr::kable(
summary_stats_log_category_group,
caption = "Descriptive Statistics for Log-Transformed Time to First Fixation by Category and Group",
col.names = c("Category", "Group", "N (Participants)", "Mean", "SD", "Min", "Max"), # Ensure the column names match
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### PLOTS ########################
# Plot 1: Log Time to First Fixation by Group
plot_log_ttff_group <- ggplot(df_ttff_disrup_participant_summary, aes(x = Group, y = log_Disrup_time_fixation_sec, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.15, alpha = 0.5, color = "black", size = 1.5) +
labs(x = "Group", y = "Log Time to First Fixation (log-seconds)") +
theme_cowplot() +
scale_fill_brewer(palette = "RdBu") +
ggtitle("Log Time to First Fixation by Group") +
scale_y_continuous(limits = c(-3, 3), breaks = seq(-3, 3, 1)) + # Manuelle Achseneinteilung
theme(legend.position = "none")
# Display the first plot
plot_log_ttff_group
# Plot 2: Log Time to First Fixation by Group and Disruption Category
plot_log_ttff_category <- ggplot(df_ttff_disrup, aes(x = Group, y = log_Disrup_time_fixation_sec, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.15, alpha = 0.5, color = "black", size = 1.5) +
facet_wrap(~Disruption_Category, scales = "fixed", labeller = label_wrap_gen(width = 15)) +  # Use fixed scale for all facets
labs(x = "Group", y = "Log Time to First Fixation (log-seconds)") +
theme_cowplot() +
scale_y_continuous(limits = c(-5, 5), breaks = seq(-5, 5, 1)) + # Manuelle Achseneinteilung
scale_fill_brewer(palette = "RdBu") +
ggtitle("Log Time to First Fixation by Group and Disruption Category") +
theme(legend.position = "none")
# Display the second plot
plot_log_ttff_category
##################### STATISTICAL TESTS ########################
##################### REPEATED MEASURES ANOVA ########################
# Perform the repeated-measures ANOVA with `log_Disrup_time_fixation_sec` as the dependent variable
anova_afex_ttff_log <- afex::aov_ez(
id = "Participant",  # Random effect (each participant is measured multiple times)
dv = "log_Disrup_time_fixation_sec",  # Dependent variable: Log Time to First Fixation (log-seconds)
between = "Group",  # Between-subject factor: Group (Novice vs Expert)
within = "Disruption_Category",  # Within-subject factor: Disruption Categories (Verbal, Physical, Lack of eagerness)
data = df_ttff_disrup  # The data frame that contains the log-transformed TTFF data
)
# Extract the ANOVA table
anova_results_ttff_log <- as.data.frame(anova_afex_ttff_log$anova_table)
# Recalculate generalized eta squared (η²) for effect size
eta_squared_results_ttff_log <- effectsize::eta_squared(anova_afex_ttff_log, partial = FALSE)
# Combine recalculated eta squared with the ANOVA table
anova_table_apa_ttff_log <- anova_results_ttff_log %>%
rownames_to_column(var = "Effect") %>%  # Move row names to a column
left_join(
as.data.frame(eta_squared_results_ttff_log),
by = c("Effect" = "Parameter")  # Match the correct columns
) %>%
mutate(
`F` = round(`F`, 2),  # Round F-values
`η²` = round(Eta2, 3),  # Round generalized eta squared
`p-value` = ifelse(
`Pr(>F)` < 0.05, "< .05", round(`Pr(>F)`, 2)  # Format p-values
)
) %>%
select(Effect, `num Df`, `den Df`, `F`, `p-value`, `η²`)  # Order columns, place η² last
# Display the ANOVA table for Log Time to First Fixation
knitr::kable(
anova_table_apa_ttff_log,
caption = "Repeated-Measures ANOVA Results for Log-Transformed Time to First Fixation (Including Effect Sizes)",
col.names = c("Effect", "Df1", "Df2", "F", "p", "η²"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### POST-HOC TESTS Disruption_Category (within-subject factor) ########################
# Perform post-hoc pairwise comparisons for Disruption_Category (within-subject factor)
post_hoc_disruption <- emmeans(anova_afex_ttff_log, pairwise ~ Disruption_Category)
# Extract post-hoc pairwise contrasts for Disruption_Category
post_hoc_results_disruption <- as.data.frame(post_hoc_disruption$contrasts) %>%
mutate(
Comparison = gsub("_", " ", contrast),
# Replace underscores with spaces
Comparison = gsub("\\.", " ", Comparison),
# Replace periods with spaces
Estimate = round(estimate, 2),
SE = round(SE, 2),
t = round(t.ratio, 2),
p.value = ifelse(p.value < 0.05, "< .05", round(p.value, 2))  # Round p-values to 2 decimals
)
##################### COHEN'S D CALCULATION ########################
# Calculate Cohen's d for each pairwise comparison
d_LackOfEagerness_vs_Physical <- CohenD(
x = df_ttff_disrup$log_Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Lack of eagerness to learn"],
y = df_ttff_disrup$log_Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Physical disruptions"],
na.rm = TRUE
)
d_LackOfEagerness_vs_Verbal <- CohenD(
x = df_ttff_disrup$log_Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Lack of eagerness to learn"],
y = df_ttff_disrup$log_Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Verbal disruptions"],
na.rm = TRUE
)
d_Physical_vs_Verbal <- CohenD(
x = df_ttff_disrup$log_Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Physical disruptions"],
y = df_ttff_disrup$log_Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Verbal disruptions"],
na.rm = TRUE
)
##################### ADD COHEN'S D VALUES TO THE POST-HOC RESULTS ########################
# Create a named vector with the correct Cohen's d values
cohen_d_values <- c(
"Physical disruptions - Lack of eagerness to learn" = round(d_LackOfEagerness_vs_Physical, 2),
"Physical disruptions - Verbal disruptions" = round(d_Physical_vs_Verbal, 2),
"Lack of eagerness to learn - Verbal disruptions" = round(d_LackOfEagerness_vs_Verbal, 2)
)
# Add Cohen's d values to the post-hoc results
post_hoc_results_disruption$Cohen_d <- cohen_d_values[post_hoc_results_disruption$Comparison]
##################### TABLE FOR DISRUPTION CATEGORY ########################
# Ensure the number of column names matches the number of columns in the dataframe
post_hoc_results_disruption <- post_hoc_results_disruption %>%
select(Comparison, Estimate, SE, df, t, p.value, Cohen_d)
# Displaying the post-hoc results for Disruption Category (main effect) with Cohen's d
knitr::kable(
post_hoc_results_disruption,
caption = "Post-Hoc Pairwise Comparisons for Disruption Categories (Including Effect Sizes)",
col.names = c("Comparison", "Estimate", "SE", "df", "t", "p", "Cohen's d"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
# # Normality Tests (Shapiro-Wilk)
# normality_tests <- df_ttff_disrup %>%
#   group_by(Group) %>%
#   summarise(
#     Shapiro_Wilk_p = round(shapiro.test(Disrup_time_fixation_sec)$p.value, 2),
#     .groups = "drop"
#   )
#
# kable(
#   normality_tests,
#   caption = "Shapiro-Wilk Test for Normality by Group",
#   col.names = c("Group", "Shapiro-Wilk p-value"),
#   row.names = FALSE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Mann-Whitney U-Test and Effect Size
# mann_whitney_test <- wilcox.test(Disrup_time_fixation_sec ~ Group, data = df_ttff_disrup, exact = FALSE)
#
# # Effect Size Calculation for Mann-Whitney (r)
# n1 <- nrow(df_ttff_disrup %>% filter(Group == "Novice"))
# n2 <- nrow(df_ttff_disrup %>% filter(Group == "Expert"))
# r_effect <- abs(mann_whitney_test$statistic - (n1 * n2 / 2)) / sqrt((n1 * n2 * (n1 + n2 + 1)) / 12)
#
# mann_whitney_results <- data.frame(
#   "Test" = "Mann-Whitney U",
#   "W" = round(mann_whitney_test$statistic, 2),
#   "p-value" = round(mann_whitney_test$p.value, 2),
#   "Effect Size (r)" = round(r_effect, 3)
# )
#
# kable(
#   mann_whitney_results,
#   caption = "Mann-Whitney U-Test Results for Time to First Fixation",
#   row.names = FALSE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Kruskal-Wallis Test and Pairwise Comparisons
# kruskal_test <- kruskal.test(Disrup_time_fixation_sec ~ Disruption_Category, data = df_ttff_disrup)
#
# kruskal_results <- data.frame(
#   "Test" = "Kruskal-Wallis",
#   "Chi-squared" = round(kruskal_test$statistic, 2),
#   "df" = kruskal_test$parameter,
#   "p-value" = round(kruskal_test$p.value, 2)
# )
#
# kable(
#   kruskal_results,
#   caption = "Kruskal-Wallis Test Results for Differences Between Disruption Categories",
#   row.names = FALSE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Pairwise Wilcoxon test with Bonferroni correction
# pairwise_wilcox <- pairwise.wilcox.test(
#   x = df_ttff_disrup$Disrup_time_fixation_sec,
#   g = df_ttff_disrup$Disruption_Category,
#   p.adjust.method = "bonferroni"
# )
#
# # Extract and round the p-values to 3 decimal places
# pairwise_results <- as.data.frame(pairwise_wilcox$p.value) %>%
#   mutate(across(everything(), ~ round(., 2)))
#
# # Display the results with rounded p-values
# kable(
#   pairwise_results,
#   caption = "Pairwise Wilcoxon Test Results (Bonferroni Corrected)",
#   row.names = TRUE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
