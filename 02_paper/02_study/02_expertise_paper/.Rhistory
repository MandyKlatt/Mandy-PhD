group_by(Participant, Group) %>%
summarise(
Disrup_time_fixation_sec = round(mean(Disrup_time_fixation_sec, na.rm = TRUE), 2), # Average time to first fixation per participant
.groups = "drop"
)
##################### DESCRIPTIVE STATISTICS ########################
# Step 2: Descriptive Statistics by Group
ttff_disrup_table <- df_ttff_disrup_participant_summary %>%
group_by(Group) %>%
summarise(
N = n(),
"M in sec" = round(mean(Disrup_time_fixation_sec, na.rm = TRUE), 2),
"SD in sec" = round(sd(Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Min in sec" = round(min(Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Max in sec" = round(max(Disrup_time_fixation_sec, na.rm = TRUE), 2)
)
knitr::kable(ttff_disrup_table,
caption = "N, M, SD, Min & Max Time to First Fixation in Seconds (AOI Disruptive Person)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### STATISTICS BY DISRUPTION CATEGORY ########################
# Step 3: Descriptive Statistics by Category and Group
summary_stats_category_group <- df_ttff_disrup %>%
group_by(Disruption_Category, Group) %>%
summarise(
N = n_distinct(Participant),  # Count unique participants
Mean = round(mean(Disrup_time_fixation_sec, na.rm = TRUE), 2),
SD = round(sd(Disrup_time_fixation_sec, na.rm = TRUE), 2),
Median = round(median(Disrup_time_fixation_sec, na.rm = TRUE), 2),
IQR = round(IQR(Disrup_time_fixation_sec, na.rm = TRUE), 2),
Min = round(min(Disrup_time_fixation_sec, na.rm = TRUE), 2),
Max = round(max(Disrup_time_fixation_sec, na.rm = TRUE), 2),
.groups = "drop"
)
# Display the table
knitr::kable(
summary_stats_category_group,
caption = "Descriptive Statistics for Time to First Fixation by Category and Group",
col.names = c("Category", "Group", "N (Participants)", "Mean", "SD", "Median", "IQR", "Min", "Max"), # Ensure the column names match
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### PLOTS ########################
# Plot 1: Time to First Fixation by Group
plot_ttff_group <- ggplot(df_ttff_disrup, aes(x = Group, y = Disrup_time_fixation_sec, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.15, alpha = 0.5, color = "black", size = 1.5) +
labs(x = "Group", y = "Time to First Fixation (seconds)") +
theme_cowplot() +
scale_fill_brewer(palette = "RdBu") +
ggtitle("Time to First Fixation by Group") +
theme(legend.position = "none") +
annotate("text", x = 1, y = max(df_ttff_disrup$Disrup_time_fixation_sec, na.rm = TRUE) * 1.1,
label = paste0("Median = ", round(median(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Novice"], na.rm = TRUE), 2),
"\nIQR = ", round(IQR(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Novice"], na.rm = TRUE), 2)),
hjust = 0.5, size = 4) +
annotate("text", x = 2, y = max(df_ttff_disrup$Disrup_time_fixation_sec, na.rm = TRUE) * 1.1,
label = paste0("Median = ", round(median(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Expert"], na.rm = TRUE), 2),
"\nIQR = ", round(IQR(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Expert"], na.rm = TRUE), 2)),
hjust = 0.5, size = 4)
# Display the first plot
plot_ttff_group
# Plot 2: Time to First Fixation by Group and Disruption Category
plot_ttff_category <- ggplot(df_ttff_disrup, aes(x = Group, y = Disrup_time_fixation_sec, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.15, alpha = 0.5, color = "black", size = 1.5) +
facet_wrap(~Disruption_Category, scales = "fixed", labeller = label_wrap_gen(width = 15)) +  # Use fixed scale for all facets
ylim(0, 30) +
labs(x = "Group", y = "Time to First Fixation (seconds)") +
theme_cowplot() +
scale_fill_brewer(palette = "RdBu") +
ggtitle("Time to First Fixation by Group and Disruption Category") +
theme(legend.position = "none")
# Display the second plot
plot_ttff_category
##################### STATISTICAL TESTS ########################
##################### REPEATED MEASURES ANOVA ########################
# Perform the repeated-measures ANOVA with `Disrup_time_fixation_sec` as the dependent variable
anova_afex_ttff <- afex::aov_ez(
id = "Participant",  # Random effect (each participant is measured multiple times)
dv = "Disrup_time_fixation_sec",  # Dependent variable: Time to First Fixation (seconds)
between = "Group",  # Between-subject factor: Group (Novice vs Expert)
within = "Disruption_Category",  # Within-subject factor: Disruption Categories (Verbal, Physical, Lack of eagerness)
data = df_ttff_disrup  # The data frame that contains the TTFF data
)
# Extract the ANOVA table
anova_results_ttff <- as.data.frame(anova_afex_ttff$anova_table)
# Recalculate generalized eta squared (η²) for effect size
eta_squared_results_ttff <- effectsize::eta_squared(anova_afex_ttff, partial = FALSE)
# Combine recalculated eta squared with the ANOVA table
anova_table_apa_ttff <- anova_results_ttff %>%
rownames_to_column(var = "Effect") %>%  # Move row names to a column
left_join(
as.data.frame(eta_squared_results_ttff),
by = c("Effect" = "Parameter")  # Match the correct columns
) %>%
mutate(
`F` = round(`F`, 2),  # Round F-values
`η²` = round(Eta2, 3),  # Round generalized eta squared
`p-value` = ifelse(
`Pr(>F)` < 0.05, "< .05", round(`Pr(>F)`, 2)  # Format p-values
)
) %>%
select(Effect, `num Df`, `den Df`, `F`, `p-value`, `η²`)  # Order columns, place η² last
# Display the ANOVA table for Time to First Fixation
knitr::kable(
anova_table_apa_ttff,
caption = "Repeated-Measures ANOVA Results for Time to First Fixation (Including Effect Sizes)",
col.names = c("Effect", "Df1", "Df2", "F", "p", "η²"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### POST-HOC TESTS Disruption_Category (within-subject factor) ########################
# Perform post-hoc pairwise comparisons for Disruption_Category (within-subject factor)
post_hoc_disruption <- emmeans(anova_afex_ttff, pairwise ~ Disruption_Category)
# Extract post-hoc pairwise contrasts for Disruption_Category
post_hoc_results_disruption <- as.data.frame(post_hoc_disruption$contrasts) %>%
mutate(
Comparison = gsub("_", " ", contrast),
# Replace underscores with spaces
Comparison = gsub("\\.", " ", Comparison),
# Replace periods with spaces
Estimate = round(estimate, 2),
SE = round(SE, 2),
t = round(t.ratio, 2),
p.value = ifelse(p.value < 0.05, "< .05", round(p.value, 2))  # Round p-values to 2 decimals
)
##################### COHEN'S D CALCULATION ########################
# Calculate Cohen's d for each pairwise comparison
d_LackOfEagerness_vs_Physical <- CohenD(
x = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Lack of eagerness to learn"],
y = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Physical disruptions"],
na.rm = TRUE
)
d_LackOfEagerness_vs_Verbal <- CohenD(
x = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Lack of eagerness to learn"],
y = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Verbal disruptions"],
na.rm = TRUE
)
d_Physical_vs_Verbal <- CohenD(
x = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Physical disruptions"],
y = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Verbal disruptions"],
na.rm = TRUE
)
##################### ADD COHEN'S D VALUES TO THE POST-HOC RESULTS ########################
# Create a named vector with the correct Cohen's d values
cohen_d_values <- c(
"Physical disruptions - Lack of eagerness to learn" = round(d_LackOfEagerness_vs_Physical, 2),
"Physical disruptions - Verbal disruptions" = round(d_Physical_vs_Verbal, 2),
"Lack of eagerness to learn - Verbal disruptions" = round(d_LackOfEagerness_vs_Verbal, 2)
)
# Add Cohen's d values to the post-hoc results
post_hoc_results_disruption$Cohen_d <- cohen_d_values[post_hoc_results_disruption$Comparison]
##################### TABLE FOR DISRUPTION CATEGORY ########################
# Ensure the number of column names matches the number of columns in the dataframe
post_hoc_results_disruption <- post_hoc_results_disruption %>%
select(Comparison, Estimate, SE, df, t, p.value, Cohen_d)
# Displaying the post-hoc results for Disruption Category (main effect) with Cohen's d
knitr::kable(
post_hoc_results_disruption,
caption = "Post-Hoc Pairwise Comparisons for Disruption Categories (Including Effect Sizes)",
col.names = c("Comparison", "Estimate", "SE", "df", "t", "p", "Cohen's d"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
# # Normality Tests (Shapiro-Wilk)
# normality_tests <- df_ttff_disrup %>%
#   group_by(Group) %>%
#   summarise(
#     Shapiro_Wilk_p = round(shapiro.test(Disrup_time_fixation_sec)$p.value, 2),
#     .groups = "drop"
#   )
#
# kable(
#   normality_tests,
#   caption = "Shapiro-Wilk Test for Normality by Group",
#   col.names = c("Group", "Shapiro-Wilk p-value"),
#   row.names = FALSE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Mann-Whitney U-Test and Effect Size
# mann_whitney_test <- wilcox.test(Disrup_time_fixation_sec ~ Group, data = df_ttff_disrup, exact = FALSE)
#
# # Effect Size Calculation for Mann-Whitney (r)
# n1 <- nrow(df_ttff_disrup %>% filter(Group == "Novice"))
# n2 <- nrow(df_ttff_disrup %>% filter(Group == "Expert"))
# r_effect <- abs(mann_whitney_test$statistic - (n1 * n2 / 2)) / sqrt((n1 * n2 * (n1 + n2 + 1)) / 12)
#
# mann_whitney_results <- data.frame(
#   "Test" = "Mann-Whitney U",
#   "W" = round(mann_whitney_test$statistic, 2),
#   "p-value" = round(mann_whitney_test$p.value, 2),
#   "Effect Size (r)" = round(r_effect, 3)
# )
#
# kable(
#   mann_whitney_results,
#   caption = "Mann-Whitney U-Test Results for Time to First Fixation",
#   row.names = FALSE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Kruskal-Wallis Test and Pairwise Comparisons
# kruskal_test <- kruskal.test(Disrup_time_fixation_sec ~ Disruption_Category, data = df_ttff_disrup)
#
# kruskal_results <- data.frame(
#   "Test" = "Kruskal-Wallis",
#   "Chi-squared" = round(kruskal_test$statistic, 2),
#   "df" = kruskal_test$parameter,
#   "p-value" = round(kruskal_test$p.value, 2)
# )
#
# kable(
#   kruskal_results,
#   caption = "Kruskal-Wallis Test Results for Differences Between Disruption Categories",
#   row.names = FALSE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
#
# # Pairwise Wilcoxon test with Bonferroni correction
# pairwise_wilcox <- pairwise.wilcox.test(
#   x = df_ttff_disrup$Disrup_time_fixation_sec,
#   g = df_ttff_disrup$Disruption_Category,
#   p.adjust.method = "bonferroni"
# )
#
# # Extract and round the p-values to 3 decimal places
# pairwise_results <- as.data.frame(pairwise_wilcox$p.value) %>%
#   mutate(across(everything(), ~ round(., 2)))
#
# # Display the results with rounded p-values
# kable(
#   pairwise_results,
#   caption = "Pairwise Wilcoxon Test Results (Bonferroni Corrected)",
#   row.names = TRUE
# ) %>%
#   kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Normality Tests (Shapiro-Wilk)
normality_tests <- df_ttff_disrup %>%
group_by(Group) %>%
summarise(
Shapiro_Wilk_p = round(shapiro.test(Disrup_time_fixation_sec)$p.value, 2),
.groups = "drop"
)
kable(
normality_tests,
caption = "Shapiro-Wilk Test for Normality by Group",
col.names = c("Group", "Shapiro-Wilk p-value"),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Mann-Whitney U-Test and Effect Size
mann_whitney_test <- wilcox.test(Disrup_time_fixation_sec ~ Group, data = df_ttff_disrup, exact = FALSE)
##################### TIME TO FIRST FIXATION ########################
# Define disruptions and categories
verbal_disruptions <- c("Chatting_with_neighbour", "Heckling", "Whispering")
physical_disruptions <- c("Clicking_pen", "Drumming_with_hands", "Snipping_with_fingers")
lack_of_eagerness <- c("Looking_at_phone", "Head_on_table", "Drawing")
# Step 1: Data Preparation
df_ttff_disrup <- df_aoi %>%
filter(TOI %in% c(verbal_disruptions, physical_disruptions, lack_of_eagerness)) %>%
dplyr::select(
Participant,
TOI,
Time_to_first_fixation.Disruptive_Person
) %>%
mutate(
Group = ifelse(Participant < 200, "Novice", "Expert"),  # Assigning Group based on Participant
Disruption_Category = case_when(
TOI %in% verbal_disruptions ~ "Verbal disruptions",
TOI %in% physical_disruptions ~ "Physical disruptions",
TOI %in% lack_of_eagerness ~ "Lack of eagerness to learn",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(Disruption_Category)) %>% # Keep only rows with valid categories
drop_na() %>%
filter(
Time_to_first_fixation.Disruptive_Person > 0, # Exclude zero fixation times
Time_to_first_fixation.Disruptive_Person <= 30000 # Cut-off at 30 seconds
) %>%
mutate(
Disrup_time_fixation_sec = round(Time_to_first_fixation.Disruptive_Person / 1000, 2)
)
# Summarize the Disrup_time_fixation_sec by Participant
df_ttff_disrup_participant_summary <- df_ttff_disrup %>%
group_by(Participant, Group) %>%
summarise(
Disrup_time_fixation_sec = round(mean(Disrup_time_fixation_sec, na.rm = TRUE), 2), # Average time to first fixation per participant
.groups = "drop"
)
##################### DESCRIPTIVE STATISTICS ########################
# Step 2: Descriptive Statistics by Group
ttff_disrup_table <- df_ttff_disrup_participant_summary %>%
group_by(Group) %>%
summarise(
N = n(),
"M in sec" = round(mean(Disrup_time_fixation_sec, na.rm = TRUE), 2),
"SD in sec" = round(sd(Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Min in sec" = round(min(Disrup_time_fixation_sec, na.rm = TRUE), 2),
"Max in sec" = round(max(Disrup_time_fixation_sec, na.rm = TRUE), 2)
)
knitr::kable(ttff_disrup_table,
caption = "N, M, SD, Min & Max Time to First Fixation in Seconds (AOI Disruptive Person)") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### STATISTICS BY DISRUPTION CATEGORY ########################
# Step 3: Descriptive Statistics by Category and Group
summary_stats_category_group <- df_ttff_disrup %>%
group_by(Disruption_Category, Group) %>%
summarise(
N = n_distinct(Participant),  # Count unique participants
Mean = round(mean(Disrup_time_fixation_sec, na.rm = TRUE), 2),
SD = round(sd(Disrup_time_fixation_sec, na.rm = TRUE), 2),
Median = round(median(Disrup_time_fixation_sec, na.rm = TRUE), 2),
IQR = round(IQR(Disrup_time_fixation_sec, na.rm = TRUE), 2),
Min = round(min(Disrup_time_fixation_sec, na.rm = TRUE), 2),
Max = round(max(Disrup_time_fixation_sec, na.rm = TRUE), 2),
.groups = "drop"
)
# Display the table
knitr::kable(
summary_stats_category_group,
caption = "Descriptive Statistics for Time to First Fixation by Category and Group",
col.names = c("Category", "Group", "N (Participants)", "Mean", "SD", "Median", "IQR", "Min", "Max"), # Ensure the column names match
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### PLOTS ########################
# Plot 1: Time to First Fixation by Group
plot_ttff_group <- ggplot(df_ttff_disrup, aes(x = Group, y = Disrup_time_fixation_sec, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.15, alpha = 0.5, color = "black", size = 1.5) +
labs(x = "Group", y = "Time to First Fixation (seconds)") +
theme_cowplot() +
scale_fill_brewer(palette = "RdBu") +
ggtitle("Time to First Fixation by Group") +
theme(legend.position = "none") +
annotate("text", x = 1, y = max(df_ttff_disrup$Disrup_time_fixation_sec, na.rm = TRUE) * 1.1,
label = paste0("Median = ", round(median(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Novice"], na.rm = TRUE), 2),
"\nIQR = ", round(IQR(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Novice"], na.rm = TRUE), 2)),
hjust = 0.5, size = 4) +
annotate("text", x = 2, y = max(df_ttff_disrup$Disrup_time_fixation_sec, na.rm = TRUE) * 1.1,
label = paste0("Median = ", round(median(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Expert"], na.rm = TRUE), 2),
"\nIQR = ", round(IQR(df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Group == "Expert"], na.rm = TRUE), 2)),
hjust = 0.5, size = 4)
# Display the first plot
plot_ttff_group
# Plot 2: Time to First Fixation by Group and Disruption Category
plot_ttff_category <- ggplot(df_ttff_disrup, aes(x = Group, y = Disrup_time_fixation_sec, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.15, alpha = 0.5, color = "black", size = 1.5) +
facet_wrap(~Disruption_Category, scales = "fixed", labeller = label_wrap_gen(width = 15)) +  # Use fixed scale for all facets
ylim(0, 30) +
labs(x = "Group", y = "Time to First Fixation (seconds)") +
theme_cowplot() +
scale_fill_brewer(palette = "RdBu") +
ggtitle("Time to First Fixation by Group and Disruption Category") +
theme(legend.position = "none")
# Display the second plot
plot_ttff_category
##################### STATISTICAL TESTS ########################
##################### REPEATED MEASURES ANOVA ########################
# Perform the repeated-measures ANOVA with `Disrup_time_fixation_sec` as the dependent variable
anova_afex_ttff <- afex::aov_ez(
id = "Participant",  # Random effect (each participant is measured multiple times)
dv = "Disrup_time_fixation_sec",  # Dependent variable: Time to First Fixation (seconds)
between = "Group",  # Between-subject factor: Group (Novice vs Expert)
within = "Disruption_Category",  # Within-subject factor: Disruption Categories (Verbal, Physical, Lack of eagerness)
data = df_ttff_disrup  # The data frame that contains the TTFF data
)
# Extract the ANOVA table
anova_results_ttff <- as.data.frame(anova_afex_ttff$anova_table)
# Recalculate generalized eta squared (η²) for effect size
eta_squared_results_ttff <- effectsize::eta_squared(anova_afex_ttff, partial = FALSE)
# Combine recalculated eta squared with the ANOVA table
anova_table_apa_ttff <- anova_results_ttff %>%
rownames_to_column(var = "Effect") %>%  # Move row names to a column
left_join(
as.data.frame(eta_squared_results_ttff),
by = c("Effect" = "Parameter")  # Match the correct columns
) %>%
mutate(
`F` = round(`F`, 2),  # Round F-values
`η²` = round(Eta2, 3),  # Round generalized eta squared
`p-value` = ifelse(
`Pr(>F)` < 0.05, "< .05", round(`Pr(>F)`, 2)  # Format p-values
)
) %>%
select(Effect, `num Df`, `den Df`, `F`, `p-value`, `η²`)  # Order columns, place η² last
# Display the ANOVA table for Time to First Fixation
knitr::kable(
anova_table_apa_ttff,
caption = "Repeated-Measures ANOVA Results for Time to First Fixation (Including Effect Sizes)",
col.names = c("Effect", "Df1", "Df2", "F", "p", "η²"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### POST-HOC TESTS Disruption_Category (within-subject factor) ########################
# Perform post-hoc pairwise comparisons for Disruption_Category (within-subject factor)
post_hoc_disruption <- emmeans(anova_afex_ttff, pairwise ~ Disruption_Category)
# Extract post-hoc pairwise contrasts for Disruption_Category
post_hoc_results_disruption <- as.data.frame(post_hoc_disruption$contrasts) %>%
mutate(
Comparison = gsub("_", " ", contrast),
# Replace underscores with spaces
Comparison = gsub("\\.", " ", Comparison),
# Replace periods with spaces
Estimate = round(estimate, 2),
SE = round(SE, 2),
t = round(t.ratio, 2),
p.value = ifelse(p.value < 0.05, "< .05", round(p.value, 2))  # Round p-values to 2 decimals
)
##################### COHEN'S D CALCULATION ########################
# Calculate Cohen's d for each pairwise comparison
d_LackOfEagerness_vs_Physical <- CohenD(
x = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Lack of eagerness to learn"],
y = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Physical disruptions"],
na.rm = TRUE
)
d_LackOfEagerness_vs_Verbal <- CohenD(
x = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Lack of eagerness to learn"],
y = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Verbal disruptions"],
na.rm = TRUE
)
d_Physical_vs_Verbal <- CohenD(
x = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Physical disruptions"],
y = df_ttff_disrup$Disrup_time_fixation_sec[df_ttff_disrup$Disruption_Category == "Verbal disruptions"],
na.rm = TRUE
)
##################### ADD COHEN'S D VALUES TO THE POST-HOC RESULTS ########################
# Create a named vector with the correct Cohen's d values
cohen_d_values <- c(
"Physical disruptions - Lack of eagerness to learn" = round(d_LackOfEagerness_vs_Physical, 2),
"Physical disruptions - Verbal disruptions" = round(d_Physical_vs_Verbal, 2),
"Lack of eagerness to learn - Verbal disruptions" = round(d_LackOfEagerness_vs_Verbal, 2)
)
# Add Cohen's d values to the post-hoc results
post_hoc_results_disruption$Cohen_d <- cohen_d_values[post_hoc_results_disruption$Comparison]
##################### TABLE FOR DISRUPTION CATEGORY ########################
# Ensure the number of column names matches the number of columns in the dataframe
post_hoc_results_disruption <- post_hoc_results_disruption %>%
select(Comparison, Estimate, SE, df, t, p.value, Cohen_d)
# Displaying the post-hoc results for Disruption Category (main effect) with Cohen's d
knitr::kable(
post_hoc_results_disruption,
caption = "Post-Hoc Pairwise Comparisons for Disruption Categories (Including Effect Sizes)",
col.names = c("Comparison", "Estimate", "SE", "df", "t", "p", "Cohen's d"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Normality Tests (Shapiro-Wilk)
normality_tests <- df_ttff_disrup %>%
group_by(Group) %>%
summarise(
Shapiro_Wilk_p = round(shapiro.test(Disrup_time_fixation_sec)$p.value, 2),
.groups = "drop"
)
kable(
normality_tests,
caption = "Shapiro-Wilk Test for Normality by Group",
col.names = c("Group", "Shapiro-Wilk p-value"),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Mann-Whitney U-Test and Effect Size
mann_whitney_test <- wilcox.test(Disrup_time_fixation_sec ~ Group, data = df_ttff_disrup, exact = FALSE)
# Effect Size Calculation for Mann-Whitney (r)
n1 <- nrow(df_ttff_disrup %>% filter(Group == "Novice"))
n2 <- nrow(df_ttff_disrup %>% filter(Group == "Expert"))
r_effect <- abs(mann_whitney_test$statistic - (n1 * n2 / 2)) / sqrt((n1 * n2 * (n1 + n2 + 1)) / 12)
mann_whitney_results <- data.frame(
"Test" = "Mann-Whitney U",
"W" = round(mann_whitney_test$statistic, 2),
"p-value" = round(mann_whitney_test$p.value, 2),
"Effect Size (r)" = round(r_effect, 3)
)
kable(
mann_whitney_results,
caption = "Mann-Whitney U-Test Results for Time to First Fixation",
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Kruskal-Wallis Test and Pairwise Comparisons
kruskal_test <- kruskal.test(Disrup_time_fixation_sec ~ Disruption_Category, data = df_ttff_disrup)
kruskal_results <- data.frame(
"Test" = "Kruskal-Wallis",
"Chi-squared" = round(kruskal_test$statistic, 2),
"df" = kruskal_test$parameter,
"p-value" = round(kruskal_test$p.value, 2)
)
kable(
kruskal_results,
caption = "Kruskal-Wallis Test Results for Differences Between Disruption Categories",
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Pairwise Wilcoxon test with Bonferroni correction
pairwise_wilcox <- pairwise.wilcox.test(
x = df_ttff_disrup$Disrup_time_fixation_sec,
g = df_ttff_disrup$Disruption_Category,
p.adjust.method = "bonferroni"
)
# Extract and round the p-values to 3 decimal places
pairwise_results <- as.data.frame(pairwise_wilcox$p.value) %>%
mutate(across(everything(), ~ round(., 2)))
# Display the results with rounded p-values
kable(
pairwise_results,
caption = "Pairwise Wilcoxon Test Results (Bonferroni Corrected)",
row.names = TRUE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
