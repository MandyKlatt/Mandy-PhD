theme(
plot.title = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 12)
)
print(mean_plot)
# Statistical Tests ------------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, facet_name) {
group_col <- ensym(group_col)  # Ensure proper quoting of group column
value_col <- ensym(value_col)  # Ensure proper quoting of value column
# Perform t-Test
t_test <- t.test(
formula = as.formula(paste0(quo_name(value_col), " ~ ", quo_name(group_col))),
data = data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = data %>% filter(!!group_col == "Expert") %>% pull(!!value_col),
y = data %>% filter(!!group_col == "Novice") %>% pull(!!value_col)
)
tibble(
`Facet` = facet_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
## Generate t-Test Tables
t_test_all <- t_test_stats(df_sjt, "Group", "All", "Overall")
t_test_mm <- t_test_stats(df_sjt, "Group", "Managing momentum", "Managing Momentum")
# Statistical Tests ------------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, facet_name) {
group_col <- ensym(group_col)  # Ensure proper quoting of group column
value_col <- ensym(value_col)  # Ensure proper quoting of value column
# Perform t-Test
t_test <- t.test(
formula = as.formula(paste0("`", quo_name(value_col), "` ~ ", quo_name(group_col))),
data = data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = data %>% filter(!!group_col == "Expert") %>% pull(!!value_col),
y = data %>% filter(!!group_col == "Novice") %>% pull(!!value_col)
)
tibble(
`Facet` = facet_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
## Generate t-Test Tables
t_test_all <- t_test_stats(df_sjt, "Group", "All", "Overall")
t_test_mm <- t_test_stats(df_sjt, "Group", "Managing momentum", "Managing Momentum")
t_test_m <- t_test_stats(df_sjt, "Group", "Monitoring", "Monitoring")
t_test_r <- t_test_stats(df_sjt, "Group", "Rules and routines", "Rules and Routines")
## Combine Results into a Table
t_test_results <- bind_rows(t_test_all, t_test_mm, t_test_m, t_test_r)
## Display APA-Conform Table
kable(t_test_results, caption = "t-Test and Effect Sizes for SJT Facets") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Internal Consistency (Omega) -------------------------------------------
## Managing Momentum
df_sjt_mm <- df_sjt %>%
select(starts_with("WT_S1_F1F2_AL"):starts_with("WT_S4_F4F6_AL")) %>%
na.omit()
## Display APA-Conform Table
kable(t_test_results, caption = "t-Test and Effect Sizes for SJT Facets") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
print(mean_plot)
# Internal Consistency (Omega) -------------------------------------------
# Data Import ------------------------------------------------------------
df_sjt <- read_excel("./data/SJT.xlsx")
# Omega Calculation: Managing Momentum -----------------------------------
df_sjt_mm <- df_sjt %>%
select(matches("^WT_S1_F1F2_AL|WT_S2_F2F3_AL|WT_S3_F3F4_AL|WT_S4_F4F6_AL")) %>%
na.omit()
if (ncol(df_sjt_mm) > 1) {
omega_mm <- omega(df_sjt_mm)
} else {
omega_mm <- NULL
warning("Managing Momentum: Not enough valid columns for omega calculation.")
}
# Omega Calculation: Monitoring ------------------------------------------
df_sjt_m <- df_sjt %>%
select(matches("^WT_S5_F1F2_ST|WT_S6_F2F3_ST|WT_S7_F3F4_ST|WT_S8_F4F5_ST|WT_S9_F4F5_ST")) %>%
na.omit()
if (ncol(df_sjt_m) > 1) {
omega_m <- omega(df_sjt_m)
} else {
omega_m <- NULL
warning("Monitoring: Not enough valid columns for omega calculation.")
}
# Omega Calculation: Rules and Routines ----------------------------------
df_sjt_r <- df_sjt %>%
select(matches("^WT_S11_F1F5_R|WT_S12_F2F4_R|WT_S13_F3F6_R|WT_S14_F4F6_R")) %>%
na.omit()
if (ncol(df_sjt_r) > 1) {
omega_r <- omega(df_sjt_r)
} else {
omega_r <- NULL
warning("Rules and Routines: Not enough valid columns for omega calculation.")
}
# Combine Omega Results --------------------------------------------------
omega_table <- tibble(
Facet = c("Managing Momentum", "Monitoring", "Rules and Routines"),
`Omega Total` = c(
if (!is.null(omega_mm)) round(omega_mm$total$omega_total, 2) else NA,
if (!is.null(omega_m)) round(omega_m$total$omega_total, 2) else NA,
if (!is.null(omega_r)) round(omega_r$total$omega_total, 2) else NA
)
)
# Internal Consistency (Omega) -------------------------------------------
# Data Import
df_sjt <- read_excel("./data/SJT.xlsx")
# Helper Function for Omega Calculation
calculate_omega_total <- function(data, scale_name) {
if (nrow(data) == 0 || ncol(data) == 0) {
warning(paste("No valid data for", scale_name))
return(NA)
}
# Try Omega Calculation
result <- tryCatch(
omega(data),
error = function(e) {
warning(paste("Omega calculation failed for", scale_name, ":", e$message))
return(NULL)
}
)
# Check if Result is Valid and Extract omega.tot
if (is.null(result) || !"omega.tot" %in% names(result)) {
warning(paste("Omega total not available for", scale_name))
return(NA)
}
return(round(result$omega.tot, 2))
}
# Omega Calculation: Managing Momentum -----------------------------------
df_sjt_mm <- df_sjt %>%
select(matches("^WT_S1_F1F2_AL|WT_S2_F2F3_AL|WT_S3_F3F4_AL|WT_S4_F4F6_AL")) %>%
na.omit()
omega_total_mm <- calculate_omega_total(df_sjt_mm, "Managing Momentum")
# Omega Calculation: Monitoring ------------------------------------------
df_sjt_m <- df_sjt %>%
select(matches("^WT_S5_F1F2_ST|WT_S6_F2F3_ST|WT_S7_F3F4_ST|WT_S8_F4F5_ST|WT_S9_F4F5_ST")) %>%
na.omit()
omega_total_m <- calculate_omega_total(df_sjt_m, "Monitoring")
# Omega Calculation: Rules and Routines ----------------------------------
df_sjt_r <- df_sjt %>%
select(matches("^WT_S11_F1F5_R|WT_S12_F2F4_R|WT_S13_F3F6_R|WT_S14_F4F6_R")) %>%
na.omit()
omega_total_r <- calculate_omega_total(df_sjt_r, "Rules and Routines")
# Combine Omega Results --------------------------------------------------
omega_table <- tibble(
Facet = c("Managing Momentum", "Monitoring", "Rules and Routines"),
`Omega Total` = c(omega_total_mm, omega_total_m, omega_total_r)
)
# Display APA-Conform Table ----------------------------------------------
kable(omega_table, caption = "Internal Consistency (Omega Total) for SJT Facets") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
# select relevant columns --> only subject ID and mean
df_sjt <- df_sjt %>%
dplyr::select(UI06_05, # ID
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 == 201) # exclude ID with no eye tracking data
# remove NAs
df_sjt <- na.omit(df_sjt)
# rename columns
df_sjt <- rename(df_sjt, c("Group" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"))
# changing from wide to long format
df_sjt_long <- df_sjt %>%
pivot_longer(!Group, names_to = "Facets Classroom Management", values_to = "Mean")
# define expert and novice with ifelse function
df_sjt_long$Group = ifelse(df_sjt_long$Group < 200, "Novice","Expert")
#################### N, MEAN & SD ############
# mean & SD SJT ALL
sjt_mean <- df_sjt_long %>%
filter(`Facets Classroom Management` == "All") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_mean,
caption = "N, M and SD for overall value")
# mean SJT Managing Momentum
sjt_mm <- df_sjt_long %>%
filter(`Facets Classroom Management` == "Managing momentum") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_mm,
caption = "N, M and SD for managing momentum")
# mean SJT Monitoring
sjt_m <- df_sjt_long %>%
filter(`Facets Classroom Management` == "Monitoring") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_m,
caption = "N, M and SD for monitoring")
# mean SJT Rules and routins
sjt_r <- df_sjt_long %>%
filter(`Facets Classroom Management` == "Rules and routines") %>%
group_by(Group) %>%
summarise(N = n(),
"M" = round(mean(Mean), 2),
"SD" = round(sd(Mean), 2),
"Min" = round(min(Mean), 2),
"Max" = round(max(Mean), 2),
)
# insert a table into HTML
knitr::kable(sjt_r,
caption = "N, M and SD for rules and routines")
#################### Plots ############
# plotting mean of all aspects
mean_plot <-
df_sjt_long %>%
mutate(Group = factor(Group,
levels = c("Novice",
"Expert")
)
) %>%
ggplot(mapping = aes(x = Group,
y = Mean)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 1,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
labs(x = "") +
ylim(0,1) +
scale_fill_brewer(palette  = "RdBu") +
facet_wrap(vars(`Facets Classroom Management`),
nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("SJT") +
theme(
plot.title = element_text(size = 25,
face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 22)
)
mean_plot
# read in data
df_sjt <-
read_excel("./data/SJT.xlsx")
### MANAGING MOMENTUM
# select relevant columns
df_sjt_mm <- df_sjt %>%
dplyr::select(WT_S1_F1F2_AL:WT_S4_F4F6_AL)
# remove NAs
df_sjt_mm <- na.omit(df_sjt_mm)
# calculate omega with omega() function
omega_sjt_mm <- omega(df_sjt_mm)
# display the results
print(omega_sjt_mm)
### MONITORING
# select relevant columns
df_sjt_m <- df_sjt %>%
dplyr::select(WT_S5_F1F2_ST:WT_S9_F4F5_ST)
# remove NAs
df_sjt_m <- na.omit(df_sjt_m)
# calculate omega with omega() function
omega_sjt_m <- omega(df_sjt_m)
# display the results
print(omega_sjt_m)
### RULES & ROUTINES
# select relevant columns
df_sjt_r <- df_sjt %>%
dplyr::select(WT_S11_F1F5_R:WT_S14_F4F6_R)
# remove NAs
df_sjt_r <- na.omit(df_sjt_r)
# calculate omega with omega() function
omega_sjt_r <- omega(df_sjt_r)
# display the results
print(omega_sjt_r)
# Internal Consistency (Omega) -------------------------------------------
# Data Import ------------------------------------------------------------
df_sjt <- read_excel("path/to/SJT.xlsx")  # Update the path as necessary
# Internal Consistency (Omega) -------------------------------------------
# Data Import
df_sjt <- read_excel("./data/SJT.xlsx")
# Internal Consistency (Omega) -------------------------------------------
# Data Import
df_sjt <- read_excel("./data/SJT.xlsx")
# Subset Data for Each Scale ---------------------------------------------
## Managing Momentum
df_managing_momentum <- df_sjt %>%
select(matches("^WT_S1|^WT_S2|^WT_S3|^WT_S4")) %>%
na.omit()
## Monitoring
df_monitoring <- df_sjt %>%
select(matches("^WT_S5|^WT_S6|^WT_S7|^WT_S8|^WT_S9")) %>%
na.omit()
## Rules and Routines
df_rules_routines <- df_sjt %>%
select(matches("^WT_S11|^WT_S12|^WT_S13|^WT_S14")) %>%
na.omit()
## Overall Mean (All Items Combined)
df_overall <- df_sjt %>%
select(matches("^WT_S")) %>%  # Select all items starting with "WT_S"
na.omit()
# Calculate Omega Total for Each Scale -----------------------------------
## Helper Function for Omega Calculation
calculate_omega <- function(data, scale_name) {
tryCatch({
result <- omega(data)
return(round(result$total$omega.tot, 2))  # Extract Omega Total
}, error = function(e) {
warning(paste("Omega calculation failed for", scale_name, ":", e$message))
return(NA)
})
}
## Calculate Omegas
omega_managing_momentum <- calculate_omega(df_managing_momentum, "Managing Momentum")
omega_monitoring <- calculate_omega(df_monitoring, "Monitoring")
omega_rules_routines <- calculate_omega(df_rules_routines, "Rules and Routines")
omega_overall <- calculate_omega(df_overall, "Overall Test")
omega_overall <- calculate_omega(df_overall, "Overall Test")
# Combine Results into a Table -------------------------------------------
omega_results <- tibble(
Facet = c("Managing Momentum", "Monitoring", "Rules and Routines", "Overall Test"),
`Omega Total` = c(
omega_managing_momentum,
omega_monitoring,
omega_rules_routines,
omega_overall
)
)
# Display APA-Conform Table ----------------------------------------------
kable(omega_results, caption = "Internal Consistency (Omega Total) for SJT Facets and Overall Test") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
View(omega_results)
View(omega_sjt_m)
# Internal Consistency (Omega) -------------------------------------------
# Data Import ------------------------------------------------------------
df_sjt <- read_excel("path/to/SJT.xlsx")  # Replace "path/to/SJT.xlsx" with the correct file path
# Subset Data for Each Scale ---------------------------------------------
## Managing Momentum (WT_S1 through WT_S4)
df_managing_momentum <- df_sjt %>%
select(matches("^WT_S[1-4]_.*_AL")) %>%
na.omit()
## Monitoring (WT_S5 through WT_S9)
df_monitoring <- df_sjt %>%
select(matches("^WT_S[5-9]_.*_ST")) %>%
na.omit()
## Rules and Routines (WT_S11 through WT_S14)
df_rules_routines <- df_sjt %>%
select(matches("^WT_S1[1-4]_.*_R")) %>%
na.omit()
# Calculate Omega --------------------------------------------------------
## Helper Function for Omega
calculate_omega <- function(data, scale_name) {
tryCatch({
result <- omega(data, nfactors = 1)
omega_total <- round(result$total$omega.tot, 2)
omega_h <- round(result$total$omega_h, 2)
list("Omega_Total" = omega_total, "Omega_Hierarchical" = omega_h)
}, error = function(e) {
warning(paste("Omega calculation failed for", scale_name, ":", e$message))
return(list("Omega_Total" = NA, "Omega_Hierarchical" = NA))
})
}
## Compute Omega for Each Scale
omega_mm <- calculate_omega(df_managing_momentum, "Managing Momentum")
omega_m <- calculate_omega(df_monitoring, "Monitoring")
omega_rr <- calculate_omega(df_rules_routines, "Rules and Routines")
# Combine Omega Results --------------------------------------------------
omega_table <- tibble(
Facet = c("Managing Momentum", "Monitoring", "Rules and Routines"),
`Omega Total` = c(omega_mm$Omega_Total, omega_m$Omega_Total, omega_rr$Omega_Total),
`Omega Hierarchical` = c(omega_mm$Omega_Hierarchical, omega_m$Omega_Hierarchical, omega_rr$Omega_Hierarchical)
)
# Display APA-Conform Table ----------------------------------------------
kable(omega_table, caption = "Internal Consistency (Omega) for SJT Facets", digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Internal Consistency (Omega) -------------------------------------------
# Data Import ------------------------------------------------------------
df_sjt <- read_excel("./data/SJT.xlsx")
# Helper Function for Omega Calculation -----------------------------------
calculate_omega_total <- function(data, scale_name) {
if (nrow(data) == 0 || ncol(data) == 0) {
warning(paste("No valid data for", scale_name))
return(NA)
}
# Try Omega Calculation
result <- tryCatch(
omega(data),
error = function(e) {
warning(paste("Omega calculation failed for", scale_name, ":", e$message))
return(NULL)
}
)
# Check if Result is Valid and Extract omega.tot
if (is.null(result) || !"omega.tot" %in% names(result)) {
warning(paste("Omega total not available for", scale_name))
return(NA)
}
return(round(result$omega.tot, 2))
}
# Omega Calculation: Managing Momentum -----------------------------------
df_sjt_mm <- df_sjt %>%
select(matches("^WT_S1_F1F2_AL|WT_S2_F2F3_AL|WT_S3_F3F4_AL|WT_S4_F4F6_AL")) %>%
na.omit()
omega_total_mm <- calculate_omega_total(df_sjt_mm, "Managing Momentum")
# Omega Calculation: Monitoring ------------------------------------------
df_sjt_m <- df_sjt %>%
select(matches("^WT_S5_F1F2_ST|WT_S6_F2F3_ST|WT_S7_F3F4_ST|WT_S8_F4F5_ST|WT_S9_F4F5_ST")) %>%
na.omit()
omega_total_m <- calculate_omega_total(df_sjt_m, "Monitoring")
# Omega Calculation: Rules and Routines ----------------------------------
df_sjt_r <- df_sjt %>%
select(matches("^WT_S11_F1F5_R|WT_S12_F2F4_R|WT_S13_F3F6_R|WT_S14_F4F6_R")) %>%
na.omit()
omega_total_r <- calculate_omega_total(df_sjt_r, "Rules and Routines")
# Combine Omega Results --------------------------------------------------
omega_table <- tibble(
Facet = c("Managing Momentum", "Monitoring", "Rules and Routines"),
`Omega Total` = c(omega_total_mm, omega_total_m, omega_total_r)
)
# Display APA-Conform Table ----------------------------------------------
kable(omega_table, caption = "Internal Consistency (Omega Total) for SJT Facets") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Internal Consistency (Omega) -------------------------------------------
# Data Import
df_sjt <- read_excel("./data/SJT.xlsx")
# Subset Data for Each Scale ---------------------------------------------
## Managing Momentum
df_managing_momentum <- df_sjt %>%
select(matches("^WT_S1|^WT_S2|^WT_S3|^WT_S4")) %>%
na.omit()
## Monitoring
df_monitoring <- df_sjt %>%
select(matches("^WT_S5|^WT_S6|^WT_S7|^WT_S8|^WT_S9")) %>%
na.omit()
## Rules and Routines
df_rules_routines <- df_sjt %>%
select(matches("^WT_S11|^WT_S12|^WT_S13|^WT_S14")) %>%
na.omit()
## Overall Mean (All Items Combined)
df_overall <- df_sjt %>%
select(matches("^WT_S")) %>%  # Select all items starting with "WT_S"
na.omit()
# Calculate Omega Total for Each Scale -----------------------------------
## Helper Function for Omega Calculation
calculate_omega <- function(data, scale_name) {
tryCatch({
result <- omega(data)
return(round(result$total$omega.tot, 2))  # Extract Omega Total
}, error = function(e) {
warning(paste("Omega calculation failed for", scale_name, ":", e$message))
return(NA)
})
}
## Calculate Omegas
omega_managing_momentum <- calculate_omega(df_managing_momentum, "Managing Momentum")
omega_monitoring <- calculate_omega(df_monitoring, "Monitoring")
omega_monitoring <- calculate_omega(df_monitoring, "Monitoring")
omega_rules_routines <- calculate_omega(df_rules_routines, "Rules and Routines")
omega_overall <- calculate_omega(df_overall, "Overall Test")
omega_overall <- calculate_omega(df_overall, "Overall Test")
# Combine Results into a Table -------------------------------------------
omega_results <- tibble(
Facet = c("Managing Momentum", "Monitoring", "Rules and Routines", "Overall Test"),
`Omega Total` = c(
omega_managing_momentum,
omega_monitoring,
omega_rules_routines,
omega_overall
)
)
# Display APA-Conform Table ----------------------------------------------
kable(omega_results, caption = "Internal Consistency (Omega Total) for SJT Facets and Overall Test") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Read Data
df_sjt <- read_excel("path/to/SJT.xlsx")
