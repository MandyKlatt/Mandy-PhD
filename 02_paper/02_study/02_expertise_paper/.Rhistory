) %>%
filter(!is.na(Disruption_Category)) # Keep only rows with valid categories
# Step 2: Summarize data by disruption category
disruption_summary <- df_aoi_disrup %>%
group_by(Group, Participant, Disruption_Category) %>%
summarise(
total_duration_sec = round(sum(Duration_of_interval_sec, na.rm = TRUE), 2), # Total time in seconds
fixation_count = round(sum(`Number_of_fixations.Disruptive_Person`, na.rm = TRUE), 2), # Total fixations
fixations_per_second = round(fixation_count / total_duration_sec, 2), # Number of fixations per second
.groups = "drop"
)
# Step 3: Summarize by participant
individual_summary <- disruption_summary %>%
group_by(Group, Participant) %>%
summarise(
mean_fixations_per_second = round(mean(fixations_per_second, na.rm = TRUE), 2), # Mean number of fixations
.groups = "drop"
)
##################### DESCRIPTIVE STATISTICS ########################
# Descriptive statistics for number of fixations
overall_stats <- individual_summary %>%
group_by(Group) %>%
summarise(
N = n(), # Number of participants
Mean = round(mean(mean_fixations_per_second, na.rm = TRUE), 2), # Mean number of fixations
SD = round(sd(mean_fixations_per_second, na.rm = TRUE), 2), # Standard deviation
Min = round(min(mean_fixations_per_second, na.rm = TRUE), 2), # Minimum value
Max = round(max(mean_fixations_per_second, na.rm = TRUE), 2), # Maximum value
.groups = "drop"
)
# Display the overall descriptive statistics table
kable(
overall_stats,
caption = "Descriptive Statistics (N, Mean, SD, Min, Max) for Number of Fixations by Group (AOI Disruptive Person)",
col.names = c("Group", "N", "M", "SD", "Min", "Max"),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Descriptive statistics by disruption category
category_stats <- disruption_summary %>%
group_by(Disruption_Category, Group) %>%
summarise(
N = n_distinct(Participant), # Count unique participants
Mean = round(mean(fixations_per_second, na.rm = TRUE), 2), # Mean number of fixations
SD = round(sd(fixations_per_second, na.rm = TRUE), 2), # Standard deviation
Min = round(min(fixations_per_second, na.rm = TRUE), 2), # Minimum value
Max = round(max(fixations_per_second, na.rm = TRUE), 2), # Maximum value
.groups = "drop"
)
# Display the descriptive statistics table by category
kable(
category_stats,
caption = "Descriptive Statistics (N, Mean, SD, Min, Max) for Number of Fixations by Group and Category (AOI Disruptive Person)",
col.names = c("Group", "Category", "N", "M", "SD", "Min", "Max"),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### FIRST PLOT: Number of Fixations AOI Disruptive Person ########################
# Calculate values for annotations
mean_novice <- round(mean(individual_summary$mean_fixations_per_second[individual_summary$Group == "Novice"], na.rm = TRUE), 2)
sd_novice <- round(sd(individual_summary$mean_fixations_per_second[individual_summary$Group == "Novice"], na.rm = TRUE), 2)
mean_expert <- round(mean(individual_summary$mean_fixations_per_second[individual_summary$Group == "Expert"], na.rm = TRUE), 2)
sd_expert <- round(sd(individual_summary$mean_fixations_per_second[individual_summary$Group == "Expert"], na.rm = TRUE), 2)
# t-Test and effect size
t_test <- t.test(mean_fixations_per_second ~ Group, data = individual_summary, var.equal = TRUE)
p_value <- round(t_test$p.value, 2)
cohen_d <- round(cohen.d(mean_fixations_per_second ~ Group, data = individual_summary)$estimate, 2)
# Number of fixations plot with annotations
y_max_overall <- max(individual_summary$mean_fixations_per_second, na.rm = TRUE) * 1.5
plot_number_fix_disrup <- ggplot(individual_summary,
aes(x = Group, y = mean_fixations_per_second, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(
width = 0.1,
alpha = 0.7,
color = "black",
size = 1.5
) +
labs(x = "", y = "Number of Fixations per Second") +
ggtitle("Number of Fixations per Second \n(AOI Disruptive Person)") +
scale_fill_brewer(palette = "RdBu") +
theme_cowplot() +
ylim(0, y_max_overall) +
theme(legend.position = "none") +
annotate(
"text",
x = 1,
y = y_max_overall * 0.85,
label = paste0("M = ", mean_novice, "\nSD = ", sd_novice),
hjust = 0.5,
size = 4,
fontface = "italic"
) +
annotate(
"text",
x = 2,
y = y_max_overall * 0.85,
label = paste0("M = ", mean_expert, "\nSD = ", sd_expert),
hjust = 0.5,
size = 4,
fontface = "italic"
) +
annotate(
"text",
x = 1.5,
y = y_max_overall * 0.95,
label = paste0("p = ", p_value, "\nd = ", cohen_d),
hjust = 0.5,
size = 4,
fontface = "italic"
)
ggsave(filename = "plots/plot_number_fix_disrup.svg",
width = 20,
height = 12,
units = "cm")
##################### SECOND PLOT: NUMBER OF FIXATIONS BY CATEGORY (AOI DISRUPTIVE PERSON) ########################
# Create the plot
plot_category_fix_disrup <- disruption_summary %>%
ggplot(mapping = aes(x = Group, y = fixations_per_second, fill = Group)) +
geom_boxplot(outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
facet_wrap(~Disruption_Category, scales = "fixed", labeller = label_wrap_gen(width = 15)) + # Fixed y-axis across facets
labs(x = "", y = "Number of Fixations per Second") +
ggtitle("Number of Fixations per Second Splitted by Disruption Category and Group\n(AOI Disruptive Person)") +
scale_fill_brewer(palette = "RdBu") +
theme_cowplot() +
theme(
legend.position = "none",
strip.text = element_text(size = 10) # Adjust facet text size if necessary
)
ggsave(filename = "plots/plot_category_fix_disrup.svg",
width = 24,
height = 12,
units = "cm")
# Display the plots
plot_number_fix_disrup
plot_category_fix_disrup
##################### STATISTICAL TESTS ########################
# Table summarizing overall t-test and Cohen's d
overall_effect <- data.frame(
Group = c("Overall"),
`t-value` = round(t_test$statistic, 2),
`p-value` = p_value,
`Cohen's d` = cohen_d
)
# Display t-test and effect size table
kable(
overall_effect,
caption = "t-Test and Effect Size for Number of Fixations (AOI DIsruptive Person)",
col.names = c("Group", "t-value", "p-value", "Cohen's d"),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### REPEATED MEASURES ANOVA ########################
# Perform the repeated-measures ANOVA
anova_afex <- afex::aov_ez(
id = "Participant", # Random effect
dv = "fixations_per_second", # Dependent variable
between = "Group", # Between-subject factor
within = "Disruption_Category", # Within-subject factor
data = disruption_summary
)
# Extract the ANOVA table
anova_results <- as.data.frame(anova_afex$anova_table)
# Recalculate generalized eta squared (η²)
eta_squared_results <- effectsize::eta_squared(anova_afex, partial = FALSE)
# Combine recalculated eta squared with the ANOVA table
anova_table_apa <- anova_results %>%
rownames_to_column(var = "Effect") %>% # Move row names to a column
left_join(
as.data.frame(eta_squared_results),
by = c("Effect" = "Parameter") # Match the correct columns
) %>%
mutate(
`F` = round(`F`, 2), # Round F-values
`η²` = round(Eta2, 3), # Round generalized eta squared
`p-value` = ifelse(
`Pr(>F)` < 0.05, "< .05", round(`Pr(>F)`, 3) # Format p-values
)
) %>%
select(Effect, `num Df`, `den Df`, `F`, `p-value`, `η²`) # Order columns, place η² last
# Display the table
kable(
anova_table_apa,
caption = "Repeated-Measures ANOVA Results (Including Effect Sizes)",
col.names = c("Effect", "Df1", "Df2", "F", "p", "η²"),
digits = 2
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### POST-HOC TESTS ########################
# Perform post-hoc pairwise comparisons for Disruption_Category (within-subject factor)
post_hoc_disruption <- emmeans(anova_afex, pairwise ~ Disruption_Category)
# Extract post-hoc pairwise contrasts for Disruption_Category
post_hoc_results_disruption <- as.data.frame(post_hoc_disruption$contrasts) %>%
mutate(
Comparison = gsub("_", " ", contrast),  # Replace underscores with spaces
Comparison = gsub("\\.", " ", Comparison), # Replace periods with spaces
Estimate = round(estimate, 2),
SE = round(SE, 2),
t = round(t.ratio, 2),
p.value = ifelse(p.value < 0.05, "< .05", round(p.value, 2))
)
##################### COHEN'S D CALCULATION ########################
# Define the disruption categories
categories <- c("Lack of eagerness to learn", "Physical disruptions", "Verbal disruptions")
# Initialize an empty list to store the Cohen's d values
cohen_d_values <- vector("list", length = nrow(post_hoc_results_disruption))
# Loop over the post-hoc results to calculate Cohen's d for each comparison
for (i in 1:nrow(post_hoc_results_disruption)) {
# Extract the two categories being compared
group1 <- strsplit(post_hoc_results_disruption$Comparison[i], " - ")[[1]][1]
group2 <- strsplit(post_hoc_results_disruption$Comparison[i], " - ")[[1]][2]
# Get the data for the two groups being compared using fixations_per_second
group1_data <- disruption_summary$fixations_per_second[disruption_summary$Disruption_Category == group1]
group2_data <- disruption_summary$fixations_per_second[disruption_summary$Disruption_Category == group2]
# Calculate the means and standard deviations for each group
mean1 <- mean(group1_data, na.rm = TRUE)
mean2 <- mean(group2_data, na.rm = TRUE)
sd1 <- sd(group1_data, na.rm = TRUE)
sd2 <- sd(group2_data, na.rm = TRUE)
# Calculate the pooled standard deviation
pooled_sd <- sqrt(((length(group1_data) - 1) * sd1^2 + (length(group2_data) - 1) * sd2^2) / (length(group1_data) + length(group2_data) - 2))
# Calculate Cohen's d using the formula (mean difference / pooled SD)
d_value <- (mean1 - mean2) / pooled_sd
# Store the absolute value of Cohen's d
cohen_d_values[[i]] <- abs(round(d_value, 2))  # Take the absolute value of Cohen's d
}
# Add the Cohen's d values to the post-hoc results
post_hoc_results_disruption$Cohen_d <- unlist(cohen_d_values)
##################### TABLE FOR DISRUPTION CATEGORY ########################
# Ensure the number of column names matches the number of columns in the data frame
post_hoc_results_disruption <- post_hoc_results_disruption %>%
select(Comparison, Estimate, SE, df, t, p.value, Cohen_d)
# Displaying the table
knitr::kable(
post_hoc_results_disruption,
caption = "Post-Hoc Pairwise Comparisons for Disruption Categories (Including Effect Sizes)",
col.names = c("Comparison", "Estimate", "SE", "df", "t", "p", "Cohen's d"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### AVERAGE DURATION ON AOI DISRUPTIVE PERSON ########################
##################### DATA PREPARATION ########################
# Define the different types of disruptions and categories
disruptions <- c("Chatting_with_neighbour", "Clicking_pen", "Drawing",
"Drumming_with_hands", "Head_on_table", "Heckling",
"Looking_at_phone", "Snipping_with_fingers", "Whispering")
verbal_disruptions <- c("Chatting_with_neighbour", "Heckling", "Whispering")
physical_disruptions <- c("Clicking_pen", "Drumming_with_hands", "Snipping_with_fingers")
lack_of_eagerness <- c("Looking_at_phone", "Head_on_table", "Drawing")
# Step 1: Filter and prepare the data
df_aoi_disrup <- df_aoi %>%
filter(TOI %in% disruptions) %>% # Filter rows based on the disruption list
select(Group, Participant, TOI,
"Total_duration_of_fixations.Disruptive_Person",
"Number_of_fixations.Disruptive_Person") %>%
mutate(
Group = as_factor(Group), # Convert Group column to a factor
Disruption_Category = case_when( # Assign categories based on disruption type
TOI %in% verbal_disruptions ~ "Verbal disruptions",
TOI %in% physical_disruptions ~ "Physical disruptions",
TOI %in% lack_of_eagerness ~ "Lack of eagerness to learn",
TRUE ~ NA_character_
),
Average_duration_disrup = round(Total_duration_of_fixations.Disruptive_Person /
Number_of_fixations.Disruptive_Person, 2) # Average duration in milliseconds
) %>%
filter(!is.na(Disruption_Category) & !is.na(Average_duration_disrup)) # Remove NAs
##################### DESCRIPTIVE STATISTICS ########################
# Step 2: Summarize data by disruption category
disruption_summary <- df_aoi_disrup %>%
group_by(Group, Participant, Disruption_Category) %>%
summarise(
mean_duration_ms = round(mean(Average_duration_disrup, na.rm = TRUE), 2),
.groups = "drop"
)
# Step 3: Summarize by participant
individual_summary <- disruption_summary %>%
group_by(Group, Participant) %>%
summarise(
mean_duration = round(mean(mean_duration_ms, na.rm = TRUE), 2), # Mean duration per participant
.groups = "drop"
)
# Overall descriptive statistics
overall_stats <- individual_summary %>%
group_by(Group) %>%
summarise(
N = n(), # Number of participants
Mean = round(mean(mean_duration, na.rm = TRUE), 2), # Mean duration
SD = round(sd(mean_duration, na.rm = TRUE), 2), # Standard deviation
Min = round(min(mean_duration, na.rm = TRUE), 2), # Minimum value
Max = round(max(mean_duration, na.rm = TRUE), 2), # Maximum value
.groups = "drop"
)
# Display the overall descriptive statistics table
knitr::kable(
overall_stats,
caption = "Descriptive Statistics (N, Mean, SD, Min, Max) for Average Duration by Group",
col.names = c("Group", "N", "M", "SD", "Min", "Max"),
row.names = FALSE
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
# Descriptive statistics by category
category_stats <- disruption_summary %>%
group_by(Disruption_Category, Group) %>%
summarise(
N = n(), # Number of data points
Mean = round(mean(mean_duration_ms, na.rm = TRUE), 2), # Mean duration
SD = round(sd(mean_duration_ms, na.rm = TRUE), 2), # Standard deviation
Min = round(min(mean_duration_ms, na.rm = TRUE), 2), # Minimum value
Max = round(max(mean_duration_ms, na.rm = TRUE), 2), # Maximum value
.groups = "drop"
)
# Display the descriptive statistics table by category
knitr::kable(
category_stats,
caption = "Descriptive Statistics (N, Mean, SD, Min, Max) for Average Duration by Group and Category",
col.names = c("Category", "Group", "N", "M", "SD", "Min", "Max"),
row.names = FALSE
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### PLOTTING ########################
# Overall plot
mean_novice <- round(mean(individual_summary$mean_duration[individual_summary$Group == "Novice"], na.rm = TRUE), 2)
sd_novice <- round(sd(individual_summary$mean_duration[individual_summary$Group == "Novice"], na.rm = TRUE), 2)
mean_expert <- round(mean(individual_summary$mean_duration[individual_summary$Group == "Expert"], na.rm = TRUE), 2)
sd_expert <- round(sd(individual_summary$mean_duration[individual_summary$Group == "Expert"], na.rm = TRUE), 2)
# t-Test and effect size
t_test <- t.test(mean_duration ~ Group, data = individual_summary, var.equal = TRUE)
p_value <- round(t_test$p.value, 2)
cohen_d <- round(effsize::cohen.d(mean_duration ~ Group, data = individual_summary)$estimate, 2)
# Overall plot
y_max_overall <- max(individual_summary$mean_duration, na.rm = TRUE) * 1.5
plot_overall_dur_disrup <- ggplot(individual_summary, aes(x = Group, y = mean_duration, fill = Group)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.1, alpha = 0.7, color = "black", size = 1.5) +
labs(x = "", y = "Average Fixation Duration (ms)") +
ggtitle("Average Fixation Duration\n(AOI Disruptive Person)") +
scale_fill_brewer(palette = "RdBu") +
theme_cowplot() +
ylim(0, y_max_overall) +
theme(legend.position = "none") +
annotate("text", x = 1, y = y_max_overall * 0.85,
label = paste0("M = ", mean_novice, "\nSD = ", sd_novice),
hjust = 0.5, size = 4, fontface = "italic") +
annotate("text", x = 2, y = y_max_overall * 0.85,
label = paste0("M = ", mean_expert, "\nSD = ", sd_expert),
hjust = 0.5, size = 4, fontface = "italic") +
annotate("text", x = 1.5, y = y_max_overall * 0.95,
label = paste0("p = ", p_value, "\nd = ", cohen_d),
hjust = 0.5, size = 4, fontface = "italic")
ggsave(
filename = "plots/plot_overall_dur_disrup.svg",
width = 20,
height = 12,
units = "cm"
)
# Plot by category
plot_category_dur_disrup <- disruption_summary %>%
ggplot(aes(x = Group, y = mean_duration_ms, fill = Group)) +  # Ensure using correct column name here
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.1, alpha = 0.7, size = 1.5, color = "black") +
facet_wrap(~Disruption_Category, scales = "fixed", labeller = label_wrap_gen(width = 20)) +
ylim(0, 2000) +
labs(x = "", y = "Average Fixation Duration (ms)") +
ggtitle("Average Duration of Fixations Splitted by Disruption Category and Group\n(AOI Disruptive Person)") +
scale_fill_brewer(palette = "RdBu") +
theme_cowplot() +
theme(
legend.position = "none",
strip.text = element_text(size = 10)
)
ggsave(
filename = "plots/plot_category_dur_disrup.svg",
width = 24,
height = 12,
units = "cm"
)
# Display plots
plot_overall_dur_disrup
plot_category_dur_disrup
##################### REPEATED MEASURES ANOVA ########################
# Perform the repeated-measures ANOVA with `mean_duration_ms` as the dependent variable
anova_afex <- afex::aov_ez(
id = "Participant",  # Random effect
dv = "mean_duration_ms",  # Dependent variable
between = "Group",  # Between-subject factor
within = "Disruption_Category",  # Within-subject factor
data = disruption_summary
)
# Extract the ANOVA table
anova_results <- as.data.frame(anova_afex$anova_table)
# Recalculate generalized eta squared (η²)
eta_squared_results <- effectsize::eta_squared(anova_afex, partial = FALSE)
# Combine recalculated eta squared with the ANOVA table
anova_table_apa <- anova_results %>%
rownames_to_column(var = "Effect") %>%  # Move row names to a column
left_join(
as.data.frame(eta_squared_results),
by = c("Effect" = "Parameter")  # Match the correct columns
) %>%
mutate(
`F` = round(`F`, 2),  # Round F-values
`η²` = round(Eta2, 3),  # Round generalized eta squared
`p-value` = ifelse(
`Pr(>F)` < 0.05, "< .05", round(`Pr(>F)`, 3)  # Format p-values
)
) %>%
select(Effect, `num Df`, `den Df`, `F`, `p-value`, `η²`)  # Order columns, place η² last
# Display the ANOVA table
kable(
anova_table_apa,
caption = "Repeated-Measures ANOVA Results for Average Duration (Including Effect Sizes)",
col.names = c("Effect", "Df1", "Df2", "F", "p", "η²"),
digits = 2
) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### POST-HOC TESTS Group (between-subject factor) ########################
# Perform post-hoc pairwise comparisons for Group (between-subject factor)
post_hoc_group <- emmeans(anova_afex, pairwise ~ Group)
# Calculate Cohen's d manually
# Extract group means, standard deviations, and sample sizes from the data
group_stats <- individual_summary %>%
group_by(Group) %>%
summarise(
Mean = mean(mean_duration, na.rm = TRUE),
SD = sd(mean_duration, na.rm = TRUE),
N = n(),
.groups = "drop"
)
# Calculate pooled standard deviation for Cohen's d
pooled_sd <- sqrt(
((group_stats$N[1] - 1) * group_stats$SD[1]^2 + (group_stats$N[2] - 1) * group_stats$SD[2]^2) /
(sum(group_stats$N) - 2)
)
# Calculate Cohen's d
cohen_d <- round((group_stats$Mean[1] - group_stats$Mean[2]) / pooled_sd, 2)
# Add Cohen's d to the post-hoc results table
post_hoc_results_group <- as.data.frame(post_hoc_group$contrasts) %>%
mutate(
Comparison = gsub("_", " ", contrast),  # Replace underscores with spaces
Estimate = round(estimate, 2),
SE = round(SE, 2),
t = round(t.ratio, 2),
df = round(df, 2),
p.value = ifelse(p.value < 0.05, "< .05", round(p.value, 2)),
`Cohen's d` = cohen_d
) %>%
select(Comparison, Estimate, SE, df, t, p.value, `Cohen's d`)
##################### TABLE FOR GROUP ########################
# Display the post-hoc test results for Group
knitr::kable(
post_hoc_results_group,
caption = "Post-Hoc Pairwise Comparisons for Group (Including Effect Sizes)",
col.names = c("Comparison", "Estimate", "SE", "df", "t", "p", "Cohen's d"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
##################### POST-HOC TESTS Disruption_Category (within-subject factor) ########################
# Perform post-hoc pairwise comparisons for Disruption_Category (within-subject factor)
post_hoc_disruption <- emmeans(anova_afex, pairwise ~ Disruption_Category)
# Extract post-hoc pairwise contrasts for Disruption_Category
post_hoc_results_disruption <- as.data.frame(post_hoc_disruption$contrasts) %>%
mutate(
Comparison = gsub("_", " ", contrast),  # Replace underscores with spaces
Comparison = gsub("\\.", " ", Comparison), # Replace periods with spaces
Estimate = round(estimate, 2),
SE = round(SE, 2),
t = round(t.ratio, 2),
p.value = ifelse(p.value < 0.05, "< .05", round(p.value, 2))
)
##################### COHEN'S D CALCULATION ########################
# Define the disruption categories
categories <- c("Lack of eagerness to learn", "Physical disruptions", "Verbal disruptions")
# Initialize an empty list to store the Cohen's d values
cohen_d_values <- vector("list", length = nrow(post_hoc_results_disruption))
# Loop over the post-hoc results to calculate Cohen's d for each comparison
for (i in 1:nrow(post_hoc_results_disruption)) {
# Extract the two categories being compared
group1 <- strsplit(post_hoc_results_disruption$Comparison[i], " - ")[[1]][1]
group2 <- strsplit(post_hoc_results_disruption$Comparison[i], " - ")[[1]][2]
# Calculate Cohen's d for the pair of categories
d_value <- CohenD(
x = disruption_summary$mean_duration_ms[disruption_summary$Disruption_Category == group1],
y = disruption_summary$mean_duration_ms[disruption_summary$Disruption_Category == group2],
na.rm = TRUE
)
# Store the absolute value of Cohen's d
cohen_d_values[[i]] <- abs(round(d_value, 2))  # Take the absolute value of Cohen's d
}
# Add the Cohen's d values to the post-hoc results
post_hoc_results_disruption$Cohen_d <- unlist(cohen_d_values)
##################### TABLE FOR DISRUPTION CATEGORY ########################
# Ensure the number of column names matches the number of columns in the dataframe
post_hoc_results_disruption <- post_hoc_results_disruption %>%
select(Comparison, Estimate, SE, df, t, p.value, Cohen_d)
# Displaying the table
knitr::kable(
post_hoc_results_disruption,
caption = "Post-Hoc Pairwise Comparisons for Disruption Categories (Including Effect Sizes)",
col.names = c("Comparison", "Estimate", "SE", "df", "t", "p", "Cohen's d"),
digits = 2
) %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
