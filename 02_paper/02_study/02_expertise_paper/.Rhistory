)
# Display APA-Conform Table ----------------------------------------------
kable(omega_results, caption = "Internal Consistency (Omega) for SJT Facets") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(
LI06_05,
LM01_01:LM01_05,  # Classroom Management
LM01_05:LM01_08, # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
filter(LI06_05 != 201,
LI06_05 != 223) %>%  # Exclude specific IDs
mutate(Group = ifelse(LI06_05 < 200, "Novice", "Expert")) %>%  # Group Definition
select(-LI06_05) %>%  # Drop ID column
na.omit()  # Remove NAs
View(df_quest)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(
LI06_05,
LM01_01:LM01_05,  # Classroom Management
LM01_05:LM01_08, # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
filter(LI06_05 != 201,
LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
select(-LI06_05) %>%  # Drop the original ID column
na.omit()  # Remove NAs
View(df_quest)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(
LI06_05,
LM01_01:LM01_05,  # Classroom Management
LM01_05:LM01_08, # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
filter(LI06_05 != 201,
LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
na.omit()  # Remove NAs
View(df_quest)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
arrange(Participant) %>%
select(
Participant,
Group,
LM01_01:LM01_05,  # Classroom Management
LM01_05:LM01_08,  # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
na.omit()  # Remove NAs
View(df_quest)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
select(
Participant,
Group,
LM01_01:LM01_05,  # Classroom Management
LM01_06:LM01_08,  # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
rename(
CM_01 = LM01_01, CM_02 = LM01_02, CM_03 = LM01_03, CM_04 = LM01_04, CM_05 = LM01_05,
DH_01 = LM01_06, DH_02 = LM01_07, DH_03 = LM01_08,
P_01 = LP01_01, P_02 = LP01_02, P_03 = LP01_03, P_04 = LP01_04, P_05 = LP01_05,
P_06 = LP01_06, P_07 = LP01_07, P_08 = LP01_08
) %>%
na.omit()  # Remove NAs
View(df_quest)
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`M CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`M DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`M P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
)
# Display APA-Conform Table
kable(df_quest_table,
caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`Mean CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Mean DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Mean P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
) %>%
# Ensure the table is in the correct format for APA-style
kable(caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(
bootstrap_options = c("striped", "hover"),
full_width = FALSE,
position = "center"
) %>%
column_spec(2:13, width = "1.5cm", align = "r")  # Right-align the numeric columns
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`Mean CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Mean DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Mean P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
) %>%
# Ensure the table is in the correct format for APA-style
kable(caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(
bootstrap_options = c("striped", "hover"),
full_width = FALSE,
position = "center"
) %>%
column_spec(2:13, width = "1.5cm", col_align = "r")  # Right-align the numeric columns
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(
tidyverse,     # A collection of packages (e.g., ggplot2, dplyr, tidyr) for data manipulation, visualization, and general workflows.
lubridate,     # For working with dates and times (e.g., parsing, manipulation, arithmetic).
viridis,       # Provides colorblind-friendly color palettes for plots and visualizations.
grid,          # A base R package for low-level grid graphics, useful for customizing complex plots.
gridExtra,     # Extends grid by allowing multiple grid-based plots to be arranged into a single layout.
cowplot,       # Simplifies creating publication-quality multi-panel plots, often combined with ggplot2.
readxl,        # For reading Excel files (.xls, .xlsx) into R without requiring external dependencies.
ARTofR,        # For applying aligned rank transform (ART) to factorial data for nonparametric analysis.
moments,       # Provides functions to compute statistical moments (e.g., skewness, kurtosis).
ltm,           # Used for latent trait models, including item response theory (IRT) analysis.
sjPlot,        # A package to create publication-ready tables and visualizations for statistical models.
kableExtra,    # Enhances the `knitr::kable()` function for producing polished and customizable tables in R Markdown.
xtable,        # Converts R objects to LaTeX/HTML tables, especially useful for integration with Sweave/knitr.
DescTools,     # A toolbox of descriptive statistics, effect size calculations, and data manipulation utilities.
formattable,   # Allows creation of "formattable" data frames with customized formatting for reporting.
psych,         # Provides tools for psychological research, including reliability analysis and descriptive statistics.
apaTables,     # Simplifies the creation of APA-style tables for inclusion in papers or reports.
rstatix,       # User-friendly pipe-compatible functions for common statistical tests and effect sizes.
effsize,       # Computes effect sizes (e.g., Cohen's d) for t-tests and other statistical comparisons.
knitr,         # Enables dynamic reporting by weaving R code and outputs into documents (e.g., R Markdown).
papaja,        # Helps produce APA-style manuscripts directly from R Markdown.
afex,          # Performs ANOVAs, including mixed-designs and generalized linear models, with a focus on user-friendliness.
emmeans        # Computes estimated marginal means (or least-squares means) for post-hoc comparisons in models.
)
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`Mean CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Mean DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Mean P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
) %>%
# Ensure the table is in the correct format for APA-style
kable(caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(
bootstrap_options = c("striped", "hover"),
full_width = FALSE,
position = "center"
) %>%
column_spec(2:13, width = "1.5cm", col_align = "r")  # Right-align the numeric columns
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`Mean CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Mean DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Mean P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
) %>%
# Ensure the table is in the correct format for APA-style
kable(caption = "Summary Statistics for Self-evaluation", align = "c") %>%
kable_styling(
bootstrap_options = c("striped", "hover"),
full_width = FALSE,
position = "center"
) %>%
column_spec(2:13, width = "1.5cm", align = "r")  # Right-align the numeric columns
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`M CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`M DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`M P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
)
# Display APA-Conform Table
kable(df_quest_table,
caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
View(df_quest)
View(df_quest_table)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
arrange(Participant) %>%
select(
Participant,
Group,
LM01_01:LM01_05,  # Classroom Management
LM01_06:LM01_08,  # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
rename(
CM_01 = LM01_01, CM_02 = LM01_02, CM_03 = LM01_03, CM_04 = LM01_04, CM_05 = LM01_05,
DH_01 = LM01_06, DH_02 = LM01_07, DH_03 = LM01_08,
P_01 = LP01_01, P_02 = LP01_02, P_03 = LP01_03, P_04 = LP01_04, P_05 = LP01_05,
P_06 = LP01_06, P_07 = LP01_07, P_08 = LP01_08
) %>%
na.omit()  # Remove NAs
View(df_quest)
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
mutate(
Group = ifelse(LI06_05 < 200, "Novice", "Expert"),  # Group Definition
Participant = LI06_05  # Add new column "Participant"
) %>%
arrange(Participant) %>%
select(
Participant,
Group,
LM01_01:LM01_05,  # Classroom Management
LM01_06:LM01_08,  # Disruption Handling
LP01_01:LP01_08   # Presence
) %>%
rename(
CM_01 = LM01_01, CM_02 = LM01_02, CM_03 = LM01_03, CM_04 = LM01_04, CM_05 = LM01_05,
DH_01 = LM01_06, DH_02 = LM01_07, DH_03 = LM01_08,
P_01 = LP01_01, P_02 = LP01_02, P_03 = LP01_03, P_04 = LP01_04, P_05 = LP01_05,
P_06 = LP01_06, P_07 = LP01_07, P_08 = LP01_08
) %>%
na.omit()  # Remove NAs
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`M CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`M DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`M P` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P")), na.rm = TRUE), 2)
)
# Inspect the data for the Presence scale (P_01 to P_08)
presence_data <- df_quest %>%
select(starts_with("P")) %>%
summary()  # Get summary statistics to identify any extreme values
print(presence_data)
# Inspect distribution of Presence scale values
df_quest %>%
rowwise() %>%
transmute(Presence = mean(c_across(starts_with("P")), na.rm = TRUE)) %>%
ggplot(aes(x = Presence)) +
geom_histogram(binwidth = 0.2, fill = "blue", color = "white", alpha = 0.7) +
labs(title = "Distribution of Presence Scores", x = "Presence Mean", y = "Frequency")
print(presence_data)
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`M CM` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`SD CM` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Min CM` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Max CM` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`M DH` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`SD DH` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Min DH` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Max DH` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`M P` = round(mean(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),
`SD P` = round(sd(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),
`Min P` = round(min(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),
`Max P` = round(max(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2)
)
# Display APA-Conform Table
kable(df_quest_table,
caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Summary Statistics Table -----------------------------------------------
df_quest_table <- df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
`Classroom Management M` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Classroom Management SD` = round(sd(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Classroom Management Min` = round(min(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Classroom Management Max` = round(max(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Disruption Handling M` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Disruption Handling SD` = round(sd(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Disruption Handling Min` = round(min(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Disruption Handling Max` = round(max(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Presence M` = round(mean(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),
`Presence SD` = round(sd(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),
`Presence Min` = round(min(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2),
`Presence Max` = round(max(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2)
)
# Display APA-Conform Table
kable(df_quest_table,
caption = "Summary Statistics for Self-evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
# Create Dataset for Plotting --------------------------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`Classroom Management` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Disruption Handling` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Presence` = round(mean(c_across(starts_with("P")), na.rm = TRUE), 2)
) %>%
ungroup() %>%
pivot_longer(!Group, names_to = "Scales Self-evaluation", values_to = "Mean")
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
# Create Dataset for Plotting --------------------------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`Classroom Management` = round(mean(c_across(starts_with("CM")), na.rm = TRUE), 2),
`Disruption Handling` = round(mean(c_across(starts_with("DH")), na.rm = TRUE), 2),
`Presence` = round(mean(c_across(starts_with("P") & !starts_with("Participant")), na.rm = TRUE), 2)  # Excluding Participant column
) %>%
ungroup() %>%
pivot_longer(!Group, names_to = "Scales Self-evaluation", values_to = "Mean")
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
# Plot Mean Scores by Group ----------------------------------------------
quest_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
ylim(0, 4) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20)
)
print(quest_plot)
