dplyr::select(UI06_05, # Participant
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 %in% c(201, 223)) %>%  # exclude ID with no eye tracking data
transmute(
Participant = UI06_05,
SJT_Monitoring = round(SJT_AL_gek, 2),
SJT_All = round(SJT_KF_gek, 2),
) %>%
arrange(Participant)
# classroom questionnaire
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LI06_05, LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) %>% # non- & paraverbal communication
filter(!LI06_05 %in% c(201, 223)) %>% # exclude ID with no eye tracking data
rename(Participant = LI06_05) %>%
group_by(Participant) %>%
transmute(
Participant = Participant,
"Quest_All" = round(mean(c_across(starts_with(
"L"
)), na.rm = TRUE), 2),
"Quest_classroom_management" = round(mean(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
"Quest_non_paraverbal_communication" = round(mean(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2)
)
# create a big data frame with all measures
# put all data frames into list
df_list <- list(df_demo,
df_aoi_numb_dur,
df_aoi_stud,
df_aoi_disrup,
df_ttff_disrup,
df_sri,
df_sjt,
df_quest)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(`Teaching Experience` > 0) %>%
dplyr::select(Stud_number_fixation_min,
Average_duration_stud,
Number_of_fixations.Disruptive_Person,
Average_duration_disrup,
Disrup_time_fixation_sec,
GRI_mtu,
SJT_All,
SJT_Monitoring,
Quest_All
)
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
### Teaching experience with only experts
# merge all data frames in list
df_merge_experts <-
df_list %>% reduce(full_join, by='Participant') %>%
filter(`Teaching Experience` > 0) %>%
dplyr::select(`Teaching Experience`,
Stud_number_fixation_min,
Average_duration_stud,
Number_of_fixations.Disruptive_Person,
Average_duration_disrup,
Disrup_time_fixation_sec,
GRI_mtu,
SJT_All,
SJT_Monitoring,
Quest_All
)
# create a correlation matrix
cor_tab_experts <-
df_merge_experts %>%
cor(method = "pearson") %>%
round(., digits = 2)
# p-value for GRI x STJ_All
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
# p-value for GRI x STJ_Monitoring
cor.test(df_merge$GRI_mtu, df_merge$SJT_Monitoring)
# p-value for GRI x Teaching Experience
cor.test(df_merge_experts$Stud_number_fixation_min, df_merge_experts$`Teaching Experience`)
View(cor_tab)
# p-value for GRI x STJ_All
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
# p-value for GRI x STJ_Monitoring
cor.test(df_merge$GRI_mtu, df_merge$SJT_Monitoring)
# p-value for GRI x Teaching Experience
cor.test(df_merge_experts$Stud_number_fixation_min, df_merge_experts$`Teaching Experience`)
# p-value for GRI x Teaching Experience
cor.test(df_merge_experts$GRI_mtu, df_merge_experts$`Teaching Experience`)
##################### NUMBER OF FIXATION IN MICRO-TEACHING UNIT ########################
# filter group, participants, total duration & number fixation (micro-teaching unit)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select (
Group,
Participant,
Duration_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
!"Total_duration_of_fixations.Disruptive_Person",
!"Number_of_fixations.Disruptive_Person",
!"Average_duration_of_fixations.Disruptive_Person"
) %>%
rowwise() %>%
transmute(
Group = Group,
Participant = Participant,
Duration_of_interval = Duration_of_interval,
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Duration_of_interval_sec = round(Duration_of_interval/1000, digits = 2),
Sum_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Sum_average_duration_fixation = sum(c_across(starts_with("Average_duration")), na.rm = TRUE),
Sum_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Average_duration_mtu = round(Sum_duration_fixation / Sum_number_fixation, digits = 0),
Number_fixation_msec_mtu = round(Sum_number_fixation / Duration_of_interval, digits = 6),
Number_fixation_sec_mtu = round(Sum_number_fixation / Duration_of_interval_sec, digits = 2),
Number_fixation_min_mtu = round(Sum_number_fixation / Duration_of_interval_min, digits = 0),
Group = as_factor(Group)
) %>%
drop_na() -> df_aoi_sum
# N, M, SD, min & max number of fixation per minute (micro-teaching unit)
nof.table <-
df_aoi_sum %>%
group_by(Group) %>%
summarise(
N = n(),
"M" = round(mean(Number_fixation_min_mtu), digits = 2),
"SD" = round(sd(Number_fixation_min_mtu), digits = 2),
"Min" = round(min(Number_fixation_min_mtu), digits = 2),
"Max" = round(max(Number_fixation_min_mtu), digits = 2)
)
knitr::kable(nof.table,
caption = "N, M, SD, min & max number of fixation per minute (micro-teaching unit)")
# plotting number of fixations (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group, y = Number_fixation_min_mtu)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 150) +
labs(x = "", y = "Number of fixations per minute") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Number of fixations per minute\n(micro-teaching unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_number_group
plot_number_group
# NUMBER OF FIXATIONS PER MINUTE (micro-teaching unit)
# t-test for expertise differences
t.test(
x = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Novice"],
var.equal = TRUE
)
# NUMBER OF FIXATIONS PER MINUTE (micro-teaching unit)
# effect size for expertise differences
d_number_all <- CohenD(
x = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Number_fixation_min_mtu[df_aoi_sum$Group == "Novice"],
na.rm = TRUE
)
round(d_number_all, 2)
# N, M, SD, min & max average duration of fixations (micro-teaching unit)
dur.table <-
df_aoi_sum %>%
group_by(Group) %>%
summarise(
N = n(),
"M in ms" = round(mean(Average_duration_mtu), digits = 2),
"SD in ms" = round(sd(Average_duration_mtu), digits = 2),
"Min in ms" = round(min(Average_duration_mtu), digits = 2),
"Max in ms" = round(max(Average_duration_mtu), digits = 2)
)
knitr::kable(dur.table,
caption = "N, M, SD, min & max duration of fixations in milliseconds (micro-teaching unit)")
# plotting average duration (micro-teaching unit)
df_aoi_sum %>%
ggplot(mapping = aes(x = Group,
y = Average_duration_mtu)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 2,
alpha = 0.7,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ylim(0, 1000) +
labs(x ="",
y = "Milliseconds") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("Average duration of fixations\n(micro-teaching unit)") +
theme_cowplot() +
theme(legend.position="none") -> plot_average_duration_group
plot_average_duration_group
# AVERAGE DURATION OF FIXATIONS on all AOIs
# t-test for expertise differences
t.test(x = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Novice"],
var.equal = TRUE)
# AVERAGE DURATION OF FIXATIONS on all AOIs
# effect size for expertise differences
d_aver_all <- CohenD(x = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Expert"],
y = df_aoi_sum$Average_duration_mtu[df_aoi_sum$Group == "Novice"],
na.rm = TRUE)
round(d_aver_all, 2)
# load data files with modified scales
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LI06_05,
LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) %>% # non- & paraverbal communication
filter(!LI06_05 == 201) %>% # exclude ID with no eye tracking data
mutate(LI06_05 = ifelse(LI06_05 < 200, "Novice", "Expert")) %>%
rename(Group = LI06_05)
# remove NAs
df_quest <- na.omit(df_quest)
# create table with means
df_quest_table <-
df_quest %>%
group_by(Group) %>%
summarise(
N = n(),
"M cm" = round(mean(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
"SD cm" = round(sd(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
"Min cm" = round(min(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
"Max cm" = round(max(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
# "N cm" = length(c_across(starts_with("LP")), na.rm = TRUE),
"M n&pv com" = round(mean(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2),
"SD n&pv com" = round(sd(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2),
"Min n&pv com" = round(min(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2),
"Max n&pv com" = round(max(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2)
)
knitr::kable(df_quest_table,
caption = "Mean, SD, min, max for classroom managament (cm) and non-/paraverbal communication (n&pv com)")
#################### Plots ############
# create table with means
df_quest_plot <-
df_quest %>%
rowwise() %>%
transmute(Group = Group,
"All" = round(mean(c_across(starts_with("L")), na.rm = TRUE), 2),
"Classroom management" = round(mean(c_across(starts_with("LM")), na.rm = TRUE), 2),
"Non-/paraverbal communication" = round(mean(c_across(starts_with("LP")), na.rm = TRUE), 2)
)
# changing from wide to long format
df_quest_long <- df_quest_plot %>%
pivot_longer(!Group, names_to = "Scales Classroom Questionnaire", values_to = "Mean")
# plotting mean of all aspects
quest_plot <-
df_quest_long %>%
mutate(Group = factor(Group,
levels = c("Novice",
"Expert")
)
) %>%
ggplot(mapping = aes(x = Group,
y = Mean)) +
geom_boxplot(mapping = aes(fill = Group),
outlier.shape = NA) +
geom_point(size = 1,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
labs(x = "") +
ylim(0,4) +
scale_fill_brewer(palette  = "RdBu") +
facet_wrap(vars(`Scales Classroom Questionnaire`),
nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Classroom Questionnaire") +
theme(
plot.title = element_text(size = 25,
face = "bold"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 22)
)
quest_plot
#### All ####
# t-test for expertise differences
t.test(x = df_quest_plot$All[df_quest_plot$Group == "Expert"],
y = df_quest_plot$All[df_quest_plot$Group == "Novice"],
var.equal = TRUE
)
# effect size for expertise differences
d_quest_all <- CohenD(x = df_quest_plot$All[df_quest_plot$Group == "Expert"],
y = df_quest_plot$All[df_quest_plot$Group == "Novice"],
na.rm = TRUE
)
round(d_quest_all, 2)
# plotting number of fixations on ALL AOIS
df_gri %>%
ggplot(mapping = aes(x = Group, y = GRI)) +
geom_boxplot(mapping = aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 2,
alpha = 0.7,
position = position_jitter(
seed = 1,
width = 0.1,
height = 0.1
)
) +
ylim(0, 12) +
labs(x = "", y = "average duration of fixations/\nnumber of fixations per minute") +
scale_fill_brewer(palette  = "RdBu") +
ggtitle("GRI\n(micro-teaching unit)") +
theme_cowplot() +
theme(legend.position = "none") -> plot_gri_group
plot_gri_group
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix)
# read in data and select and rename relevant columns with transmute
demo.data <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(!LI06_05 == 201,
!LI06_05 == 223) %>% # exclude participant due to missing eye tracking data
transmute(Group = LI06_05,
Gender = LI02_01_1,
Age = LI03_01,
`Teaching Experience` = LI04_01,
School_type = LI18,
Grade = LI16_05,
Subject = LI10_05,
Semester = LI11_01,
Internship = LI13_01,
`Extracurricular Teaching Experience` = LI14,
`Secondary Teaching Activities` = LI17
)
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# creating new column with total participants to calculate percent of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
demo.data$School_type[demo.data$School_type == 2] <- "1"
# creating new column to calculate percent of school type
demo.data <-
demo.data %>%
group_by(School_type, Group) %>%
mutate(Count_Schooltype = sum(n())) %>%
mutate(Percent_schooltype = round((Count_Schooltype/Sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
demo.data$Percent_schooltype <- as.numeric(demo.data$Percent_schooltype)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# changing Type of School into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
demo.data$School_type <- factor(x = demo.data$School_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# changing `Secondary Teaching Activities` to count experience (no experience = 2 --> 0)
demo.data$`Secondary Teaching Activities` = ifelse(demo.data$`Secondary Teaching Activities` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Secondary Teaching Activities` <- as.numeric(demo.data$`Secondary Teaching Activities`)
# create new columns that give proportion of Gender
# percent = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percent = Gender/Sum_participants) %>%
#   mutate(Gender_percent = round(sum(Gender_percent)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Women in percent" = round(sum(Gender/Sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(Age),
digits = 2),
"SD Age in years" = round(sd(Age),
digits = 2),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`)
)
knitr::kable(demo.table,
caption = "Demographic information & teaching experience")
# # create a basic table (tibble) using tidyverse functions
# exp.table <- demo.data %>%
#   group_by(Group) %>%
#   summarise(N=n(),
#            "M Exp." = round(mean(`Teaching Experience`), 2),
#             "SD Exp." = round(sd(`Teaching Experience`), 2),
#             "Min Exp." = min(`Teaching Experience`),
#             "Max Exp." = max(`Teaching Experience`),
#             "M Semester" = round(mean(Semester), 2),
#             "SD Semester" = round(sd(Semester), 2),
#             "Min Semester" = min(Semester),
#             "Max Semester" = max(Semester),
#             "M Internship" = round(mean(Internship), 2),
#             "SD Internship" = round(sd(Internship), 2),
#             "Min Internship" = min(Internship),
#             "Max Internship" = max(Internship),
#             "Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
#             "Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
#            )
# create a basic table (tibble) using tidyverse functions
exp.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`),
"M Semester" = round(mean(Semester), 2),
"SD Semester" = round(sd(Semester), 2),
"Min Semester" = min(Semester),
"Max Semester" = max(Semester),
"M Internship" = round(mean(Internship), 2),
"SD Internship" = round(sd(Internship), 2),
"Min Internship" = min(Internship),
"Max Internship" = max(Internship),
"Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
"Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
)
exp.table
knitr::kable(demo.table,
caption = "Demographic information & teaching experience")
# create a basic table (tibble) using tidyverse functions
exp.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`),
"M Semester" = round(mean(Semester), 2),
"SD Semester" = round(sd(Semester), 2),
"Min Semester" = min(Semester),
"Max Semester" = max(Semester),
"M Internship" = round(mean(Internship), 2),
"SD Internship" = round(sd(Internship), 2),
"Min Internship" = min(Internship),
"Max Internship" = max(Internship),
"Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
"Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
)
exp.table
