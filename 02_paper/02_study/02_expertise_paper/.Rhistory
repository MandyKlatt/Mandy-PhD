df_aoi_stud,
df_aoi_disrup,
df_ttff_disrup,
df_sri,
df_sjt,
df_quest)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(`Teaching Experience` > 0) %>%
dplyr::select(Stud_number_fixation_min,
Average_duration_stud,
Number_of_fixations.Disruptive_Person,
Average_duration_disrup,
Disrup_time_fixation_sec,
GRI_mtu,
SJT_All,
SJT_Monitoring,
Quest_All
)
View(df_sri)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(`Teaching Experience` > 0) %>%
dplyr::select(GRI_mtu,
SJT_All,
Quest_All,
Mean_disruption_appraisal,
Mean_confidence_appraisal
)
# rating scales
df_sri <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~ read_xlsx("data/Coding_SRI.xlsx", .)) %>%
filter(
!ID %in% c(201,
223),
!disruption_appraisal == -100,
!confidence_appraisal == -100,
!disruption_appraisal == -99,
!confidence_appraisal == -99,
!disruption_appraisal == -88,
!confidence_appraisal == -88,
!prevalence_rating == -100,
!prevalence_rating == -99,
!prevalence_rating == -88
) %>%
rename(Participant = ID) %>%
group_by(Participant) %>%
summarise(
Mean_disrupption_appraisal = round(mean(disruption_appraisal), 2),
Mean_confidence_appraisal = round(mean(confidence_appraisal), 2),
Mean_prevalence_rating = round(mean(prevalence_rating), 2)
)%>%
dplyr::select(Participant,
Mean_disruption_appraisal,
Mean_confidence_appraisal)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(`Teaching Experience` > 0) %>%
dplyr::select(GRI_mtu,
SJT_All,
Quest_All,
Mean_disruption_appraisal,
Mean_confidence_appraisal
)
# rating scales
df_sri <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~ read_xlsx("data/Coding_SRI.xlsx", .)) %>%
filter(
!ID %in% c(201,
223),
!disruption_appraisal == -100,
!confidence_appraisal == -100,
!disruption_appraisal == -99,
!confidence_appraisal == -99,
!disruption_appraisal == -88,
!confidence_appraisal == -88,
!prevalence_rating == -100,
!prevalence_rating == -99,
!prevalence_rating == -88
) %>%
rename(Participant = ID) %>%
group_by(Participant) %>%
summarise(
Mean_disrupption_appraisal = round(mean(disruption_appraisal), 2),
Mean_confidence_appraisal = round(mean(confidence_appraisal), 2),
Mean_prevalence_rating = round(mean(prevalence_rating), 2)
)%>%
dplyr::select(Participant,
Mean_disruption_appraisal,
Mean_confidence_appraisal)
# rating scales
df_sri <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~ read_xlsx("data/Coding_SRI.xlsx", .)) %>%
filter(
!ID %in% c(201,
223),
!disruption_appraisal == -100,
!confidence_appraisal == -100,
!disruption_appraisal == -99,
!confidence_appraisal == -99,
!disruption_appraisal == -88,
!confidence_appraisal == -88,
!prevalence_rating == -100,
!prevalence_rating == -99,
!prevalence_rating == -88
) %>%
rename(Participant = ID) %>%
group_by(Participant) %>%
summarise(
Mean_disrupption_appraisal = round(mean(disruption_appraisal), 2),
Mean_confidence_appraisal = round(mean(confidence_appraisal), 2),
Mean_prevalence_rating = round(mean(prevalence_rating), 2)
)%>%
dplyr::select(Participant,
Mean_disruption_appraisal,
Mean_confidence_appraisal)
# rating scales
df_sri <-
excel_sheets("data/Coding_SRI.xlsx") %>%
map_df(~ read_xlsx("data/Coding_SRI.xlsx", .)) %>%
filter(
!ID %in% c(201,
223),
!disruption_appraisal == -100,
!confidence_appraisal == -100,
!disruption_appraisal == -99,
!confidence_appraisal == -99,
!disruption_appraisal == -88,
!confidence_appraisal == -88,
!prevalence_rating == -100,
!prevalence_rating == -99,
!prevalence_rating == -88
) %>%
rename(Participant = ID) %>%
group_by(Participant) %>%
summarise(
Mean_disruption_appraisal = round(mean(disruption_appraisal), 2),
Mean_confidence_appraisal = round(mean(confidence_appraisal), 2),
Mean_prevalence_rating = round(mean(prevalence_rating), 2)
)%>%
dplyr::select(Participant,
Mean_disruption_appraisal,
Mean_confidence_appraisal)
# sjt
df_sjt <-
read_excel("./data/SJT.xlsx") %>%
dplyr::select(UI06_05, # Participant
SJT_AL_gek, # Monitoring
SJT_ST_gek, # Managing momentum
SJT_R_gek, # Rules and routines
SJT_KF_gek) %>% # All
filter(!UI06_05 %in% c(201, 223)) %>%  # exclude ID with no eye tracking data
transmute(
Participant = UI06_05,
SJT_Monitoring = round(SJT_AL_gek, 2),
SJT_All = round(SJT_KF_gek, 2),
) %>%
arrange(Participant)
# classroom questionnaire
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(LI06_05, LM01_01:LM01_08, # classroom management
LP01_01:LP01_08) %>% # non- & paraverbal communication
filter(!LI06_05 %in% c(201, 223)) %>% # exclude ID with no eye tracking data
rename(Participant = LI06_05) %>%
group_by(Participant) %>%
transmute(
Participant = Participant,
"Quest_All" = round(mean(c_across(starts_with(
"L"
)), na.rm = TRUE), 2),
"Quest_classroom_management" = round(mean(c_across(starts_with(
"LM"
)), na.rm = TRUE), 2),
"Quest_non_paraverbal_communication" = round(mean(c_across(starts_with(
"LP"
)), na.rm = TRUE), 2)
)
# create a big data frame with all measures
# put all data frames into list
df_list <- list(df_demo,
df_aoi_numb_dur,
df_aoi_stud,
df_aoi_disrup,
df_ttff_disrup,
df_sri,
df_sjt,
df_quest)
# merge all data frames in list
df_merge <-
df_list %>% reduce(full_join, by='Participant') %>%
# filter(`Teaching Experience` > 0) %>%
dplyr::select(GRI_mtu,
SJT_All,
Quest_All,
Mean_disruption_appraisal,
Mean_confidence_appraisal
)
# create a correlation matrix
cor_tab <-
df_merge %>%
cor(method = "pearson") %>%
round(., digits = 2)
View(cor_tab)
# p-value for GRI x STJ_All
cor.test(df_merge$GRI_mtu, df_merge$SJT_All)
# p-value for GRI x Quest_All
cor.test(df_merge$GRI_mtu, df_merge$Quest_All)
# p-value for GRI x Disruption Rating
cor.test(df_merge$GRI_mtu, df_merge$Mean_disruption_appraisal)
# p-value for GRI x Confidence Rating
cor.test(df_merge$GRI_mtu, df_merge$Mean_confidence_appraisal)
# p-value for GRI x Teaching Experience
cor.test(df_merge_experts$GRI_mtu, df_merge_experts$`Teaching Experience`)
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix)
# install.packages("needs")
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR,
moments,
ltm,
sjPlot,
kableExtra,
xtable,
DescTools,
formattable,
psych,
apaTables,
rstatix)
# read in data and select and rename relevant columns with transmute
demo.data <-
read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
filter(!LI06_05 == 201,
!LI06_05 == 223) %>% # exclude participant due to missing eye tracking data
transmute(Group = LI06_05,
Gender = LI02_01_1,
Age = LI03_01,
`Teaching Experience` = LI04_01,
School_type = LI18,
Grade = LI16_05,
Subject = LI10_05,
Semester = LI11_01,
Internship = LI13_01,
`Extracurricular Teaching Experience` = LI14,
`Secondary Teaching Activities` = LI17
)
# define expert and novice with ifelse function
demo.data$Group = ifelse(demo.data$Group < 200, "Novice","Expert")
# changing gender to count female gender (male = 2 --> 0)
demo.data$Gender = ifelse(demo.data$Gender == 2, "1","0")
# changing character Gender into numeric
demo.data$Gender <- as.numeric(demo.data$Gender)
# creating new column with total participants to calculate percent of gender
demo.data <- demo.data %>%
group_by(Group) %>%
mutate(Sum_participants = n())
# replacing 2 to 1 (Oberschule = Gymnasisium --> Secondary school)
demo.data$School_type[demo.data$School_type == 2] <- "1"
# creating new column to calculate percent of school type
demo.data <-
demo.data %>%
group_by(School_type, Group) %>%
mutate(Count_Schooltype = sum(n())) %>%
mutate(Percent_schooltype = round((Count_Schooltype/Sum_participants) * 100,
digits = 2))
# changing character Percent_schooltype into numeric
demo.data$Percent_schooltype <- as.numeric(demo.data$Percent_schooltype)
# changing character Semester into numeric
demo.data$Semester <- as.numeric(demo.data$Semester)
# changing Type of School into character
# LI18:
# 1: Grundschule
# 2: Oberschule
# 3: Gymnasium
# 4: Förderschule/Sondershausen
# 5: Berufsbildende Schule
# -1: andere Schulform
demo.data$School_type <- factor(x = demo.data$School_type,
levels = c("1","3","4","5","-1"), # Mögliche Werte # andere Möglichkeit: unique(demo.data$School_type)
labels = c("Primary School","Secondary School", "Special Education","Vocational School", "Other Schooltype")) # Bezeichnungen
# changing `Extracurricular Teaching Experience` to count experience (no experience = 2 --> 0)
demo.data$`Extracurricular Teaching Experience` = ifelse(demo.data$`Extracurricular Teaching Experience` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Extracurricular Teaching Experience` <- as.numeric(demo.data$`Extracurricular Teaching Experience`)
# changing `Secondary Teaching Activities` to count experience (no experience = 2 --> 0)
demo.data$`Secondary Teaching Activities` = ifelse(demo.data$`Secondary Teaching Activities` == 1, "1","0")
# changing character Extra. Exp. into numeric
demo.data$`Secondary Teaching Activities` <- as.numeric(demo.data$`Secondary Teaching Activities`)
# create new columns that give proportion of Gender
# percent = female gender divided by all female Gender
# demo.data <- demo.data  %>%
#   group_by(Group) %>%
#   mutate(Gender_percent = Gender/Sum_participants) %>%
#   mutate(Gender_percent = round(sum(Gender_percent)*100, digits=0))
# create a basic table (tibble) using tidyverse functions
demo.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"Women in percent" = round(sum(Gender/Sum_participants) * 100,
digits = 2),
"M Age in years" = round(mean(Age),
digits = 2),
"SD Age in years" = round(sd(Age),
digits = 2),
"Min Age in years" = min(Age),
"Max Age in years" = max(Age),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`)
)
knitr::kable(demo.table,
caption = "Demographic information & teaching experience")
# create a basic table (tibble) using tidyverse functions
exp.table <- demo.data %>%
group_by(Group) %>%
summarise(N=n(),
"M Exp." = round(mean(`Teaching Experience`), 2),
"SD Exp." = round(sd(`Teaching Experience`), 2),
"Min Exp." = min(`Teaching Experience`),
"Max Exp." = max(`Teaching Experience`),
"M Semester" = round(mean(Semester), 2),
"SD Semester" = round(sd(Semester), 2),
"Min Semester" = min(Semester),
"Max Semester" = max(Semester),
"M Internship" = round(mean(Internship), 2),
"SD Internship" = round(sd(Internship), 2),
"Min Internship" = min(Internship),
"Max Internship" = max(Internship),
"Extracurricular Teaching Experience" = round(sum(`Extracurricular Teaching Experience`/Sum_participants) * 100, digits = 2),
"Secondary Teaching Activities" = round(sum(`Secondary Teaching Activities`/Sum_participants) * 100)
)
# return a character vector with names of .tsv data in data folder
file_names <- list.files(path = "data",
pattern = "interval_complete.tsv")
# read every object names in file_names and save it as a tibble
for (i in file_names) {
work_data <-
read_tsv(file = paste0("data/", i),
locale = locale(decimal_mark = ",")) %>%
dplyr::select(Group,
Participant,
TOI,
Duration_of_interval,
Start_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Average_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Time_to_first_fixation")
)
assign(value = work_data,
x = str_remove(paste0("tib_", i),
pattern = ".tsv"))
}
# bind every tibble that contains "interval_complete" to a new tible
df_aoi <-
mget(ls(pattern = "interval_complete")) %>%
bind_rows()
# extract only participants ID number
df_aoi$Participant <- as.numeric(
str_extract(df_aoi$Participant,
"\\d{3}")
)
# exclude invalid participants
df_aoi <- df_aoi %>%
filter(!Participant == 223)
# remove temporary data for a cleaner workspace
rm(list = ls(pattern = "^tib_ProVisio"))
rm(work_data)
rm(file_names)
rm(i)
View(df_aoi)
# filter group, participants, total duration & number fixation (micro-teaching unit)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select (
Group,
Participant,
Duration_of_interval,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"),
starts_with("Average_duration"),
!"Total_duration_of_fixations.Disruptive_Person",
!"Number_of_fixations.Disruptive_Person",
!"Average_duration_of_fixations.Disruptive_Person"
) %>%
rowwise() %>%
transmute(
Group = Group,
Participant = Participant,
Duration_of_interval = Duration_of_interval,
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Duration_of_interval_sec = round(Duration_of_interval/1000, digits = 2),
Sum_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Sum_average_duration_fixation = sum(c_across(starts_with("Average_duration")), na.rm = TRUE),
Sum_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Average_duration_mtu = round(Sum_duration_fixation / Sum_number_fixation, digits = 0),
Number_fixation_msec_mtu = round(Sum_number_fixation / Duration_of_interval, digits = 6),
Number_fixation_sec_mtu = round(Sum_number_fixation / Duration_of_interval_sec, digits = 2),
Number_fixation_min_mtu = round(Sum_number_fixation / Duration_of_interval_min, digits = 0),
Group = as_factor(Group)
) %>%
drop_na() -> df_aoi_sum
View(df_aoi_sum)
# filter group & total duration & number fixation (AOI students)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select (
Group,
Duration_of_interval,
Participant,
"Total_duration_of_fixations.Anna",
"Total_duration_of_fixations.Bianca",
"Total_duration_of_fixations.Carl(a)",
"Number_of_fixations.Anna",
"Number_of_fixations.Bianca",
"Number_of_fixations.Carl(a)"
) %>%
rowwise() %>%
transmute(
Group = as_factor(Group),
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Duration_of_interval_sec = round(Duration_of_interval/1000, digits = 2),
Participant = Participant,
Stud_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Stud_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Stud_number_fixation_min = round(Stud_number_fixation / Duration_of_interval_min, digits = 2),
Stud_number_fixation_sec = round(Stud_number_fixation / Duration_of_interval_sec, digits = 2),
Average_duration_stud = round(Stud_duration_fixation / Stud_number_fixation, digits = 0)
) -> df_aoi_stud
# filter group & total duration & number fixation (AOI others)
df_aoi %>%
filter(TOI == "Lesson") %>%
dplyr::select (
Group,
Duration_of_interval,
Participant,
"Total_duration_of_fixations.Board_Screen",
"Total_duration_of_fixations.Classroom_Others",
"Total_duration_of_fixations.Material_Students",
"Total_duration_of_fixations.Material_Teacher",
"Total_duration_of_fixations.Nametag_Anna",
"Total_duration_of_fixations.Nametag_Bianca",
"Total_duration_of_fixations.Nametag_Carl(a)",
"Number_of_fixations.Board_Screen",
"Number_of_fixations.Classroom_Others",
"Number_of_fixations.Material_Students",
"Number_of_fixations.Material_Teacher",
"Number_of_fixations.Nametag_Anna",
"Number_of_fixations.Nametag_Bianca",
"Number_of_fixations.Nametag_Carl(a)"
) %>%
rowwise() %>%
transmute(
Group = as_factor(Group),
Duration_of_interval_min = round(Duration_of_interval/60000, digits = 2),
Duration_of_interval_sec = round(Duration_of_interval/1000, digits = 2),
Participant = Participant,
Others_duration_fixation = sum(c_across(starts_with("Total_duration")), na.rm = TRUE),
Others_number_fixation = sum(c_across(starts_with("Number_of")), na.rm = TRUE),
Others_number_fixation_min = round(Others_number_fixation / Duration_of_interval_min, digits = 2),
Average_duration_others = round(Others_duration_fixation / Others_number_fixation, digits = 0)
) -> df_aoi_others
# N, M, SD, min & max number of fixations per minute (AOI students)
nof.min.others.table <-
df_aoi_others %>%
group_by(Group) %>%
summarise(
N = n(),
"M" = round(mean(Others_number_fixation_min), digits = 2),
"SD" = round(sd(Others_number_fixation_min), digits = 2),
"Min" = round(min(Others_number_fixation_min), digits = 2),
"Max" = round(max(Others_number_fixation_min), digits = 2)
)
knitr::kable(nof.min.others.table,
caption = "N, M, SD, min & max number of fixations per minute (AOI others)")
