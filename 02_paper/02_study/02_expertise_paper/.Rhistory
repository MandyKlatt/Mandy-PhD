data = data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = data %>% filter(!!group_col == "Expert") %>% pull(!!value_col),
y = data %>% filter(!!group_col == "Novice") %>% pull(!!value_col)
)
tibble(
`Facet` = facet_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# T-Test and Effect Sizes ------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, scale_name) {
group_col <- ensym(group_col)  # Ensure proper quoting of group column
value_col <- ensym(value_col)  # Ensure proper quoting of value column
# Perform t-Test
t_test <- t.test(
formula = as.formula(paste0("`", quo_name(value_col), "` ~ ", quo_name(group_col))),
data = data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = data %>% filter(!!group_col == "Expert") %>% pull(!!value_col),
y = data %>% filter(!!group_col == "Novice") %>% pull(!!value_col)
)
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
## Generate t-Test Tables
t_test_all <- t_test_stats(df_sjt, "Group", "All", "Overall")
## Generate t-Test Tables
t_test_all <- t_test_stats(df_quest, "Group", "All", "Overall")
# T-Test and Effect Sizes ------------------------------------------------
## Helper Function for t-Test and Cohen's d
t_test_stats <- function(data, group_col, value_col, scale_name) {
# Perform t-Test
t_test <- t.test(
formula = as.formula(paste0("`", value_col, "` ~ ", group_col)),
data = data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = data %>% filter(!!sym(group_col) == "Expert") %>% pull(!!sym(value_col)),
y = data %>% filter(!!sym(group_col) == "Novice") %>% pull(!!sym(value_col))
)
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Prepare Data for t-Tests -----------------------------------------------
## Overall Evaluation
t_test_all <- t_test_stats(df_quest_plot, "Group", "All", "Overall Evaluation")
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(
LI06_05,
LM01_01:LM01_08,  # Classroom Management
LP01_01:LP01_08   # Non-/Paraverbal Communication
) %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
na.omit() %>%  # Remove NAs
rename(Group = LI06_05) %>%
mutate(Group = ifelse(Group < 200, "Novice", "Expert")) # Define groups
# Reshape Data to Long Format --------------------------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`All` = round(mean(c_across(LM01_01:LP01_08), na.rm = TRUE), 2),
`Classroom Management` = round(mean(c_across(LM01_01:LM01_08), na.rm = TRUE), 2),
`Non-/Paraverbal Communication` = round(mean(c_across(LP01_01:LP01_08), na.rm = TRUE), 2)
) %>%
ungroup() %>%
pivot_longer(
!Group,
names_to = "Scales Self-evaluation",
values_to = "Mean"
)
# Descriptive Statistics Tables ------------------------------------------
## Function to Calculate Descriptive Stats
descriptive_stats <- function(data, scale) {
data %>%
filter(`Scales Self-evaluation` == scale) %>%
group_by(Group) %>%
summarise(
N = n(),
M = round(mean(Mean), 2),
SD = round(sd(Mean), 2),
Min = round(min(Mean), 2),
Max = round(max(Mean), 2),
.groups = "drop"
)
}
## Generate Tables
quest_all <- descriptive_stats(df_quest_long, "All")
quest_cm <- descriptive_stats(df_quest_long, "Classroom Management")
quest_npvc <- descriptive_stats(df_quest_long, "Non-/Paraverbal Communication")
## Display APA-Conform Tables
kable(quest_all, caption = "Descriptive Statistics for Overall Self-Evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_cm, caption = "Descriptive Statistics for Classroom Management") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_npvc, caption = "Descriptive Statistics for Non-/Paraverbal Communication") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Plotting Self-Evaluation Facets ----------------------------------------
mean_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(), # Remove x-axis text
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 10) # Increase facet label font size
)
print(mean_plot)
# Statistical Tests ------------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, scale_name) {
t_test <- t.test(
formula = as.formula(paste0("`", value_col, "` ~ ", group_col)),
data = data,
var.equal = TRUE
)
cohen_d <- CohenD(
x = data %>% filter(!!sym(group_col) == "Expert") %>% pull(!!sym(value_col)),
y = data %>% filter(!!sym(group_col) == "Novice") %>% pull(!!sym(value_col))
)
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Generate t-Test Tables
t_test_all <- t_test_stats(df_quest_long, "Group", "All", "Overall")
# Plotting Self-Evaluation Facets ----------------------------------------
mean_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(), # Remove x-axis text
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8) # Increase facet label font size
)
print(mean_plot)
cohen_d <- CohenD(
x = data %>% filter(!!sym(group_col) == "Expert") %>% pull(!!sym(value_col)),
y = data %>% filter(!!sym(group_col) == "Novice") %>% pull(!!sym(value_col))
)
# Statistical Tests ------------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, scale_name) {
t_test <- t.test(
formula = as.formula(paste0("`", value_col, "` ~ ", group_col)),
data = data,
var.equal = TRUE
)
cohen_d <- CohenD(
x = data %>% filter(!!sym(group_col) == "Expert") %>% pull(!!sym(value_col)),
y = data %>% filter(!!sym(group_col) == "Novice") %>% pull(!!sym(value_col))
)
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Generate t-Test Tables
t_test_all <- t_test_stats(df_quest_long, "Group", "Overall", "Overall")
# Generate t-Test Tables
t_test_all <- t_test_stats(df_quest_long, "Group", "All", "All")
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(
LI06_05,
LM01_01:LM01_08,  # Classroom Management
LP01_01:LP01_08   # Non-/Paraverbal Communication
) %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
na.omit() %>%  # Remove NAs
rename(Group = LI06_05) %>%
mutate(Group = ifelse(Group < 200, "Novice", "Expert")) # Define groups
# Reshape Data to Long Format --------------------------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`All` = round(mean(c_across(LM01_01:LP01_08), na.rm = TRUE), 2),
`Classroom Management` = round(mean(c_across(LM01_01:LM01_08), na.rm = TRUE), 2),
`Non-/Paraverbal Communication` = round(mean(c_across(LP01_01:LP01_08), na.rm = TRUE), 2)
) %>%
ungroup() %>%
pivot_longer(
!Group,
names_to = "Scales Self-evaluation",
values_to = "Mean"
)
# Descriptive Statistics Tables ------------------------------------------
## Function to Calculate Descriptive Stats
descriptive_stats <- function(data, scale) {
data %>%
filter(`Scales Self-evaluation` == scale) %>%
group_by(Group) %>%
summarise(
N = n(),
M = round(mean(Mean), 2),
SD = round(sd(Mean), 2),
Min = round(min(Mean), 2),
Max = round(max(Mean), 2),
.groups = "drop"
)
}
## Generate Tables
quest_all <- descriptive_stats(df_quest_long, "All")
quest_cm <- descriptive_stats(df_quest_long, "Classroom Management")
quest_npvc <- descriptive_stats(df_quest_long, "Non-/Paraverbal Communication")
## Display APA-Conform Tables
kable(quest_all, caption = "Descriptive Statistics for Overall Self-Evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_cm, caption = "Descriptive Statistics for Classroom Management") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_cm, caption = "Descriptive Statistics for Classroom Management") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_npvc, caption = "Descriptive Statistics for Non-/Paraverbal Communication") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Plotting Self-Evaluation Facets ----------------------------------------
mean_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(), # Remove x-axis text
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8) # Increase facet label font size
)
print(mean_plot)
# Statistical Tests ------------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, scale_name) {
t_test <- t.test(
formula = as.formula(paste0("`", value_col, "` ~ ", group_col)),
data = data,
var.equal = TRUE
)
cohen_d <- CohenD(
x = data %>% filter(!!sym(group_col) == "Expert") %>% pull(!!sym(value_col)),
y = data %>% filter(!!sym(group_col) == "Novice") %>% pull(!!sym(value_col))
)
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
View(df_quest_long)
# Generate t-Test Tables
t_test_all <- t_test_stats(df_quest_long, "Group", "All", "Overall")
# Data Import and Preparation --------------------------------------------
df_quest <- read_excel("./data/data_empschul_labor_lehrperson.xlsx") %>%
dplyr::select(
LI06_05,
LM01_01:LM01_08,  # Classroom Management
LP01_01:LP01_08   # Non-/Paraverbal Communication
) %>%
filter(LI06_05 != 201, LI06_05 != 223) %>%  # Exclude specific IDs
na.omit() %>%  # Remove NAs
rename(Group = LI06_05) %>%
mutate(Group = ifelse(Group < 200, "Novice", "Expert")) # Define groups
# Add "All" Column for Overall Mean --------------------------------------
df_quest <- df_quest %>%
rowwise() %>%
mutate(All = mean(c_across(LM01_01:LP01_08), na.rm = TRUE)) %>%
ungroup()
# Reshape Data to Long Format --------------------------------------------
df_quest_long <- df_quest %>%
rowwise() %>%
transmute(
Group = Group,
`All` = round(mean(c_across(LM01_01:LP01_08), na.rm = TRUE), 2),
`Classroom Management` = round(mean(c_across(LM01_01:LM01_08), na.rm = TRUE), 2),
`Non-/Paraverbal Communication` = round(mean(c_across(LP01_01:LP01_08), na.rm = TRUE), 2)
) %>%
ungroup() %>%
pivot_longer(
!Group,
names_to = "Scales Self-evaluation",
values_to = "Mean"
)
# Descriptive Statistics Tables ------------------------------------------
## Function to Calculate Descriptive Stats
descriptive_stats <- function(data, scale) {
data %>%
filter(`Scales Self-evaluation` == scale) %>%
group_by(Group) %>%
summarise(
N = n(),
M = round(mean(Mean), 2),
SD = round(sd(Mean), 2),
Min = round(min(Mean), 2),
Max = round(max(Mean), 2),
.groups = "drop"
)
}
## Generate Tables
quest_all <- descriptive_stats(df_quest_long, "All")
quest_cm <- descriptive_stats(df_quest_long, "Classroom Management")
quest_npvc <- descriptive_stats(df_quest_long, "Non-/Paraverbal Communication")
## Display APA-Conform Tables
kable(quest_all, caption = "Descriptive Statistics for Overall Self-Evaluation") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_cm, caption = "Descriptive Statistics for Classroom Management") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_cm, caption = "Descriptive Statistics for Classroom Management") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_npvc, caption = "Descriptive Statistics for Non-/Paraverbal Communication") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
kable(quest_npvc, caption = "Descriptive Statistics for Non-/Paraverbal Communication") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
# Plotting Self-Evaluation Facets ----------------------------------------
mean_plot <- df_quest_long %>%
mutate(Group = factor(Group, levels = c("Novice", "Expert"))) %>%
ggplot(aes(x = Group, y = Mean)) +
geom_boxplot(aes(fill = Group), outlier.shape = NA) +
geom_point(
size = 1,
alpha = 0.4,
position = position_jitter(seed = 1, width = 0.1, height = 0.1)
) +
labs(x = "", y = "Mean Scores") +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(~`Scales Self-evaluation`, nrow = 1, strip.position = "bottom") +
theme_cowplot() +
ggtitle("Self-Evaluation Scores") +
theme(
plot.title = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title.y = element_text(size = 14),
axis.text.x = element_blank(), # Remove x-axis text
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8) # Increase facet label font size
)
print(mean_plot)
# Statistical Tests ------------------------------------------------------
## Function to Perform t-Test and Effect Size
t_test_stats <- function(data, group_col, value_col, scale_name) {
t_test <- t.test(
formula = as.formula(paste0("`", value_col, "` ~ ", group_col)),
data = data,
var.equal = TRUE
)
cohen_d <- CohenD(
x = data %>% filter(!!sym(group_col) == "Expert") %>% pull(!!sym(value_col)),
y = data %>% filter(!!sym(group_col) == "Novice") %>% pull(!!sym(value_col))
)
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Generate t-Test Tables
t_test_all <- t_test_stats(df_quest_long, "Group", "All", "Overall")
# Statistical Tests ------------------------------------------------------
# Updated t-Test Function for Long Format ---------------------------------
t_test_stats_long <- function(data, group_col, scale_filter, scale_name) {
# Subset Data for the Specific Scale
filtered_data <- data %>%
filter(`Scales Self-evaluation` == scale_filter)
# Perform t-Test
t_test <- t.test(
Mean ~ !!sym(group_col),
data = filtered_data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = filtered_data %>% filter(!!sym(group_col) == "Expert") %>% pull(Mean),
y = filtered_data %>% filter(!!sym(group_col) == "Novice") %>% pull(Mean)
)
# Return Results
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Generate t-Test Tables
t_test_all <- t_test_stats(df_quest_long, "Group", "All", "Overall")
# T-Test and Effect Sizes ------------------------------------------------
# t-Test Function for Long Format ---------------------------------
t_test_stats_long <- function(data, group_col, scale_filter, scale_name) {
# Subset Data for the Specific Scale
filtered_data <- data %>%
filter(`Scales Self-evaluation` == scale_filter)
# Perform t-Test
t_test <- t.test(
Mean ~ !!sym(group_col),
data = filtered_data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = filtered_data %>% filter(!!sym(group_col) == "Expert") %>% pull(Mean),
y = filtered_data %>% filter(!!sym(group_col) == "Novice") %>% pull(Mean)
)
# Return Results
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Perform t-Tests for Each Scale
t_test_all <- t_test_stats_long(df_quest_long, "Group", "All", "Overall")
# T-Test and Effect Sizes ------------------------------------------------
# t-Test Function for Long Format ----------------------------------------
t_test_stats_long <- function(data, group_col, scale_filter, scale_name) {
# Subset Data for the Specific Scale
filtered_data <- data %>%
filter(`Scales Self-evaluation` == scale_filter)
# Perform t-Test
t_test <- t.test(
Mean ~ get(group_col),
data = filtered_data,
var.equal = TRUE
)
# Calculate Cohen's d
cohen_d <- CohenD(
x = filtered_data %>% filter(!!rlang::sym(group_col) == "Expert") %>% pull(Mean),
y = filtered_data %>% filter(!!rlang::sym(group_col) == "Novice") %>% pull(Mean)
)
# Return Results
tibble(
`Scale` = scale_name,
`t-value` = round(t_test$statistic, 2),
`p-value` = round(t_test$p.value, 3),
`Cohen's d` = round(cohen_d, 2)
)
}
# Perform t-Tests for Each Scale
t_test_all <- t_test_stats_long(df_quest_long, "Group", "All", "Overall")
t_test_cm <- t_test_stats_long(df_quest_long, "Group", "Classroom Management", "Classroom Management")
t_test_npvc <- t_test_stats_long(df_quest_long, "Group", "Non-/Paraverbal Communication", "Non-/Paraverbal Communication")
# Combine Results into a Single Table
t_test_results <- bind_rows(t_test_all, t_test_cm, t_test_npvc)
# Display Results in APA-Conform Table
kable(t_test_results, caption = "t-Test and Effect Sizes for Self-Evaluation Scales") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
