et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"M Duration Fixation" = round(mean(Total_duration_of_whole_fixations), 2),
"SE Duration Fixation" = round(se(Total_duration_of_whole_fixations), 2),
"GRI" = round(mean(Total_duration_of_whole_fixations) / mean(Number_of_whole_fixations, 2))
)
et.raw.table
# prepare data (selected from questionnaire data)
et.raw.data<-read.table("./data/Aperol_pilot_glasses_raw_fixation_saccades_metrics.tsv", dec=",", sep="\t", header=T)
# converting to integer to numeric
et.raw.data <- et.raw.data %>%  mutate(Number_of_whole_fixations = as.numeric(Number_of_whole_fixations),
Total_duration_of_whole_fixations = as.numeric(Total_duration_of_whole_fixations))
# calculate GRI
# create a basic table (tibble) using tidyverse functions
et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"M Duration Fixation" = round(mean(Total_duration_of_whole_fixations), 2),
"SE Duration Fixation" = round(se(Total_duration_of_whole_fixations), 2),
"GRI" = round(mean(Total_duration_of_whole_fixations) / Number_of_whole_fixations)
)
et.raw.table
# create a basic table (tibble) using tidyverse functions
et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"M Duration Fixation" = round(mean(Total_duration_of_whole_fixations), 2),
"SE Duration Fixation" = round(se(Total_duration_of_whole_fixations, na.rm = TRUE), 2),
"GRI" = round(mean(Total_duration_of_whole_fixations) / Number_of_whole_fixations)
)
et.raw.table
view(et.raw.data)
# create a basic table (tibble) using tidyverse functions
et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"M Duration Fixation" = Average_duration_of_whole_fixations,
"SE Duration Fixation" = round(se(Total_duration_of_whole_fixations, na.rm = TRUE), 2),
"GRI" = round(mean(Total_duration_of_whole_fixations) / Number_of_whole_fixations)
)
et.raw.table
et.raw.table
view(et.raw.table)
# create a basic table (tibble) using tidyverse functions
et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"M Duration Fixation" = round(mean(Total_duration_of_whole_fixations), 2),
"SE Duration Fixation" = round(se(Total_duration_of_whole_fixations, na.rm = TRUE), 2),
"GRI" = round(mean(Total_duration_of_whole_fixations) / Number_of_whole_fixations)
)
et.raw.table
et.raw.table <- et.raw.data %>%
group_by(Participant, Variable) %>%
summarise("Fixation Number" = Number_of_whole_fixations,
"M Duration Fixation" = mean(Total_duration_of_whole_fixations),
"SE Duration Fixation" = round(se(Total_duration_of_whole_fixations, na.rm = TRUE), 2),
"GRI" = round(mean(Total_duration_of_whole_fixations) / Number_of_whole_fixations)
)
et.raw.table
# if a package is not installed on the current machine, it will install it
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(papaja)) install.packages('papaja'); library(papaja)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
r_refs("r-references.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# create a basic table (tibble) using tidyverse functions
demo.quest.table <- quest.raw.data %>%
filter(what == "head") %>%
group_by(group) %>%
summarise(N=n(),
"Male" = sum(gender),
"M age" = round(mean(age), 2),
"Min age" = min(age),
"Max age" = max(age),
"SD age" = round(sd(age), 2),
"M exp." = round(mean(experience), 2),
"Min exp." = min(experience),
"Max exp." = max(experience),
"SD exp." = round(sd(experience), 2),
)
# format and insert table in manuscript
apa_table(
demo.quest.table,
caption = "Demographic Informationand and Teaching Experience",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
knitr::include_graphics("./pictures/datacollection.png", dpi = 108)
# # How to insert images in papaja
# - pictures must be png
# - I created a pictures folder in the main folder, just dumb pictures there
# - you just need to hand the name and path of the picture to the knitr::: function (see above)
# - the dpi argument is for adjusting the size on the page in pixels
# in order to write the caption, you have to use the line just above the code chunk (ref:YOURTEXT-caption) and then just write behind it
# the code chunk then opens and after "r" it needs to provide a name for the code chunk, must be unique in the document
# the fig.cap = then calls the text from the line just above
# fig.align allows to position the pic on page, center ist probablby best
# echo = false ensures that the code chunk does not occur in the pdf
# Now, go and try putting your own images in the paper
#
# TIP = check line 46 in this manuscript. THis section ets global properties for how graphs are put in the paper.
#         if floatsintext      : yes  --> pics, graphs, tables will be put where the code chunk is
#         if floatsintext      : no   --> pics, graphs, tables will be put at the end as is required by some journals
# TIP: check the folder "papaja_example&tutorial" that I put in this folder for paper1
# Tip: make a bookmark of this and skim through it: http://frederikaust.com/papaja_man/
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# to compare both sessions filter only Identical items
quest.raw.data <- quest.raw.data  %>% filter(str_detect(shortID,
paste(c("km_mitbekommen",
"km_klar",
"km_ungestört",
"km_aktiv",
"lkm_freundlich",
"lkm_interesse",
"lkm_kritik",
"lkm_ausreden",
"lkm_überlegen",
"lkm_rückmeldungen",
"ks_funktion",
"ks_verständlich",
"ks_sichtbar",
"af_beiträge",
"af_wechselseitig",
"af_nachdenken",
"phb_stand",
"phb_augen",
"phb_blick",
"phb_vorsichgeht",
"phb_raum",
"phb_gestik",
"phb_alleangesehen",
"ps_deutlich",
"ps_klar",
"ps_impulse",
"pi_nonverbal",
"pi_zubewegen",
"pi_direkt",
"m_natürlich",
"m_fiktiv",
"m_verhalten"),
collapse = '|')))
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
# create a basic table (tibble) using tidyverse functions
scale.quest.table <- quest.raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2))
# remove duplicate labels from the table column "group" to create the APA-style omission of categorical variables
# this is easier than the stub_indent option in apa_table
scale.quest.table$group[duplicated(scale.quest.table$group)] <- ""
# format and insert table in manuscript
apa_table(
scale.quest.table,
caption = "Mean values of all scales",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
### classroom management
# filter by parameter variable, i.e. create a subset for classroom management
cm.data <- quest.raw.data %>% filter(scale == "Classroom management")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
cm.data <- cm.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# to create error bars, we need to summarize the data in a separate data frame
cm.plot.sd <- cm.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# long plot
cm.plot<-ggplot(data = cm.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = cm.data, y = "value", x = NULL,
title="Classroom management" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
cm.plot
### Positive climate and motivation
# filter by parameter variable, i.e. create a subset for Positive climate and motivation
pcm.data <- quest.raw.data %>% filter(scale == "Positive climate and motivation")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
pcm.data <- pcm.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# to create error bars, we need to summarize the data in a separate data frame
pcm.plot.sd <- pcm.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# long plot
pcm.plot<-ggplot(data = pcm.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = pcm.data, y = "value", x = NULL,
title="Positive climate and motivation" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 5))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
pcm.plot
### Clarity and structuredness
# filter by parameter variable, i.e. create a subset for Clarity and structuredness
cs.data <- quest.raw.data %>% filter(scale == "Clarity and structuredness")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
cs.data <- cs.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# to create error bars, we need to summarize the data in a separate data frame
cs.plot.sd <- cs.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# long plot
cs.plot<-ggplot(data = cs.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = cs.data, y = "value", x = NULL,
title="Clarity and structuredness" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
cs.plot
### Activation and support
# filter by parameter variable, i.e. create a subset for Activation and support
as.data <- quest.raw.data %>% filter(scale == "Activation and support")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
as.data <- as.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# to create error bars, we need to summarize the data in a separate data frame
as.plot.sd <- as.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# long plot
as.plot<-ggplot(data = as.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = as.data, y = "value", x = NULL,
title="Activation and support" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
as.plot
knitr::include_graphics("./pictures/presenceposturegaze.png", dpi = 108)
# ```{r Presence: posture/gaze line plots,  fig.width=6, fig.height = 6, message = FALSE, warning = FALSE , echo=FALSE}
# ### Presence: posture/gaze
#
# # filter by parameter variable, i.e. create a subset for Presence: posture/gaze
# ppg.data <- quest.raw.data %>% filter(scale == "Presence: posture/gaze")
#
# # value sometimes contained text before filtering, we have to convert the numbers to numeric
# ppg.data <- ppg.data %>%  mutate(value = as.numeric(as.character(factor(value))))
#
# # to create error bars, we need to summarize the data in a separate data frame
# ppg.plot.sd <- ppg.data %>%
#   group_by(group, item.wordings, .drop=TRUE) %>%
#   summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
#
# # long plot
# ppg.plot<-ggplot(data = ppg.plot.sd,
#                   aes(x = item.wordings, y = mean,
#                       group = group, colour = group)) +
#   geom_line()+
#   geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
#   theme_light() +
#   ylim(1,4)+
#   facet_grid(~perspective)+
#   labs(data = ppg.data, y = "value", x = NULL,
#        title="Presence: posture/gaze" ,
#        subtitle=NULL)+
#   theme(legend.position="bottom",
#         panel.spacing.x = ,
#         plot.title = element_text(hjust = 0.5),
#         axis.text.y = element_text(size = 6))+
#   scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
#   coord_flip()
# ppg.plot
knitr::include_graphics("./pictures/presencevoice.png", dpi = 108)
# ```{r Presence: voice line plots,  fig.width=6, fig.height = 6, message = FALSE, warning = FALSE , echo=FALSE}
#
# ### Presence: voice
# # filter by parameter variable, i.e. create a subset for Presence: voice
# pv.data <- quest.raw.data %>% filter(scale == "Presence: voice")
#
# # value sometimes contained text before filtering, we have to convert the numbers to numeric
# pv.data <- pv.data %>%  mutate(value = as.numeric(as.character(factor(value))))
#
# # to create error bars, we need to summarize the data in a separate data frame
# pv.plot.sd <- pv.data %>%
#   group_by(group, item.wordings, .drop=TRUE) %>%
#   summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
#
# # long plot
# pv.plot<-ggplot(data = pv.plot.sd,
#                   aes(x = item.wordings, y = mean,
#                       group = group, colour = group)) +
#   geom_line()+
#   geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
#   theme_light() +
#   ylim(1,4)+
#   facet_grid(~perspective)+
#   labs(data = pv.data, y = "value", x = NULL,
#        title="Presence: voice" ,
#        subtitle=NULL)+
#   theme(legend.position="bottom",
#         panel.spacing.x = ,
#         plot.title = element_text(hjust = 0.5),
#         axis.text.y = element_text(size = 6))+
#   scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
#   coord_flip()
# pv.plot
knitr::include_graphics("./pictures/presenceverbalnonverbalintervention.png", dpi = 108)
# ```{r Presence: verbal and non-verbal intervention line plots,  fig.width=6, fig.height = 6, message = FALSE, warning = FALSE , echo=FALSE}
#
# ### Presence: verbal and non-verbal intervention
# # filter by parameter variable, i.e. create a subset for Presence: verbal and non-verbal intervention
# pvni.data <- quest.raw.data %>% filter(scale == "Presence: verbal and non-verbal intervention")
#
# # value sometimes contained text before filtering, we have to convert the numbers to numeric
# pvni.data <- pvni.data %>%  mutate(value = as.numeric(as.character(factor(value))))
#
# # to create error bars, we need to summarize the data in a separate data frame
# pvni.plot.sd <- pvni.data %>%
#   group_by(group, item.wordings, .drop=TRUE) %>%
#   summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
#
# # long plot
# pvni.plot<-ggplot(data = pvni.plot.sd,
#                   aes(x = item.wordings, y = mean,
#                       group = group, colour = group)) +
#   geom_line()+
#   geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
#   theme_light() +
#   ylim(1,4)+
#   facet_grid(~perspective)+
#   labs(data = pvni.data, y = "value", x = NULL,
#        title="Presence: verbal and non-verbal intervention" ,
#        subtitle=NULL)+
#   theme(legend.position="bottom",
#         panel.spacing.x = ,
#         plot.title = element_text(hjust = 0.5),
#         axis.text.y = element_text(size = 6))+
#   scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
#   coord_flip()
# pvni.plot
### Natural behaviour
# filter by parameter variable, i.e. create a subset for Natural behaviour
nb.data <- quest.raw.data %>% filter(scale == "Natural behaviour")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
nb.data <- nb.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# to create error bars, we need to summarize the data in a separate data frame
nb.plot.sd <- nb.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# long plot
nb.plot<-ggplot(data = nb.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = nb.data, y = "value", x = NULL,
title="Natural behaviour" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
nb.plot
quest.plot <- quest.raw.data %>%
ggplot( aes(x=scale, y=value, fill=scale)) +
geom_boxplot() +
scale_x_discrete(guide = guide_axis(angle = 70)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_light() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
facet_grid(~group)+
ggtitle("Boxplot with individual points for all scales") +
xlab("")
quest.plot
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# to compare both sessions filter only Identical items
quest.raw.data <- quest.raw.data  %>% filter(str_detect(scale,
paste(c("Duration of speaking time"),
collapse = '|')))
view(quest.raw.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
quest.raw.data <- quest.raw.data %>% mutate (speaking.data)
view(et.raw.data)
et.raw.data<-read.table("./data/Aperol_pilot_glasses_AOI.tsv", dec=",", sep="\t", header=T)
setwd("~/GitHub/Mandy-PhD/paper_1/data")
et.raw.data<-read.table("./data/Aperol_pilot_glasses_AOI.tsv", dec=",", sep="\t", header=T)
et.raw.data<-read.table("./data/Aperol_pilot_glasses_AOI.txt", dec=",", sep="\t", header=T)
view(et.raw.data)
str(et.raw.data)
# converting integer to numeric
et.raw.data <- et.raw.data %>%  mutate(Total.duration.of.fixation.in.AOI..sec. = as.numeric(Total.duration.of.fixation.in.AOI..sec.),
Total.duration.of.fixation.in.AOI..msec = as.numeric(Total.duration.of.fixation.in.AOI..msec),
Average.duration.of.fixation.in.AOI..sec. = as.numeric(Average.duration.of.fixation.in.AOI..sec.),
Average.duration.of.fixation.in.AOI..msec. = as.numeric(Average.duration.of.fixation.in.AOI..msec.),
Total.Time.of.Interest.Duration..sec. = as.numeric(Total.Time.of.Interest.Duration..sec.),
Total.Time.of.Interest.Duration..msec. = as.numeric(Total.Time.of.Interest.Duration..msec.))
et.raw.data <- et.raw.data %>%  mutate(Total.duration.of.fixation.in.AOI..sec. = as.numeric(Total.duration.of.fixation.in.AOI..sec.),
Total.duration.of.fixation.in.AOI..msec = as.numeric(Total.duration.of.fixation.in.AOI..msec),
Average.duration.of.fixation.in.AOI..sec. = as.numeric(Average.duration.of.fixation.in.AOI..sec.),
Average.duration.of.fixation.in.AOI..msec. = as.numeric(Average.duration.of.fixation.in.AOI..msec.),
Total.Time.of.Interest.Duration..sec. = as.numeric(Total.Time.of.Interest.Duration..sec.),
Total.Time.of.Interest.Duration..msec. = as.numeric(Total.Time.of.Interest.Duration..msec.))
et.raw.data<-read.table("./data/Aperol_pilot_glasses_AOI.txt", dec=",", sep="\t", header=T)
view(et.raw.data)
str(et.raw.data)
# converting integer to numeric
et.raw.data <- et.raw.data %>%  mutate(Total.duration.of.fixation.in.AOI..sec. = as.numeric(Total.duration.of.fixation.in.AOI..sec.),
Total.duration.of.fixation.in.AOI..msec = as.numeric(Total.duration.of.fixation.in.AOI..msec),
Average.duration.of.fixation.in.AOI..sec. = as.numeric(Average.duration.of.fixation.in.AOI..sec.),
Average.duration.of.fixation.in.AOI..msec. = as.numeric(Average.duration.of.fixation.in.AOI..msec.),
Total.Time.of.Interest.Duration..sec. = as.numeric(Total.Time.of.Interest.Duration..sec.),
Total.Time.of.Interest.Duration..msec. = as.numeric(Total.Time.of.Interest.Duration..msec.))
et.raw.data <- et.raw.data %>%  mutate(Number.of.fixations.in.AOI = as.numeric(Number.of.fixations.in.AOI))
str(et.raw.data)
# prepare data (selected from questionnaire data)
et.data<-read.table("./data/Aperol_pilot_glasses_AOI.txt", dec=",", sep="\t", header=T)
view(et.data)
str(et.data)
# converting integer to numeric
et.data <- et.data %>%  mutate(Number.of.fixations.in.AOI = as.numeric(Number.of.fixations.in.AOI))
# prepare data (selected from questionnaire data)
et.data<-read.table("./data/Aperol_pilot_glasses_AOI.txt", dec=",", sep="\t", header=T)
view(et.data)
str(et.data)
# converting integer to numeric
et.data <- et.data %>%  mutate(Number.of.fixations.in.AOI = as.numeric(Number.of.fixations.in.AOI))
# calculate the GRI
# create a basic table (tibble) using tidyverse functions
et.table <- et.data %>%
group_by(PersonID, Group) %>%
summarise("Fixation Number" = Number.of.fixations.in.AOI,
"Fixation Duration" = Total.duration.of.fixation.in.AOI..msec.,
"Average Duration Fixation" = Average.duration.of.fixation.in.AOI..msec.,
"SE Duration Fixation" = se(Total.duration.of.fixation.in.AOI..msec.),
"TOI" = Total.Time.of.Interest.Duration..msec.,
"GRI" = Average.duration.of.fixation.in.AOI..msec. / Number.of.fixations.in.AOI)
view(et.table)
# format and insert table in manuscript
apa_table(
et.table,
caption = "Number and Duration (in msec) of Fixations",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
