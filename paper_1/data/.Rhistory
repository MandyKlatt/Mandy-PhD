)
str(quest.raw.data)
view(quest.raw.data)
is.na(quest.raw.data)
is.na(quest.raw.data$value)
is.na(quest.raw.data$value, max.print)
is.na(quest.raw.data$value)
is.na(quest.raw.data$value, n = max.print)
is.na(which(quest.raw.data$value))
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
# create a basic table (tibble) using tidyverse functions
demo.quest.table <- quest.raw.data %>%
filter(what == "head") %>%
group_by(group) %>%
summarise(N=n(),
"Male" = sum(gender),
"M age" = round(mean(age), 2),
"Min age" = min(age),
"Max age" = max(age),
"SD age" = round(sd(age), 2),
"M exp." = round(mean(experience), 2),
"Min exp." = min(experience),
"Max exp." = max(experience),
"SD exp." = round(sd(experience), 2),
)
# format and insert table in manuscript
apa_table(
demo.quest.table,
caption = "Demographic Informationand and Teaching Experience",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
str(quest.raw.data)
# create a basic table (tibble) using tidyverse functions
scale.quest.table <- quest.raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2))
# format and insert table in manuscript
apa_table(
scale.quest.table,
caption = "Mean values of all scales",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
class(quest.raw.data$value)
str(quest.raw.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
raw.data <- raw.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create a table of all scales
raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2),
) %>%
knitr::kable(digits = 2)
phb.data$group <- as.factor(phb.data$group)
# to create error bars, we need to summarize the data in a separate data frame
phb.plot.sd <- phb.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# and here comes the long plot
phb.plot<-ggplot(data = phb.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = phb.data, y = "value", x = NULL,
title="presence: posture and gaze" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
phb.plot
knitr::opts_chunk$set(echo = TRUE)
### HOW TO PREPARE DATA IN EXCEL ###
# use filter to select only lines with an ID in it
# (i.e. exclude all empty lines or lines with na, ?, x, etc)
# select all columns except the columns for comments
# copy/paste into a new spreadsheet
# click "save as" and choose file type "tab-delimited-text"
####################################
# load tab delimited text file into R;
# file should be in a subfolder named "data" for the script to select it
# import: never forget to insert "dec="," for replacing values with "," by "."
raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# loading packages
# install.packages("stringr") # install stringr to use the filter() function with text data
library(stringr)
# if a package is not installed on the current machine, it will install it
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
# suppress "summarize" info.
# if this line is committed, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
### checking for missing values
apply(is.na(raw.data), 2, which)
# knock out NAs
raw.data <- raw.data  %>% filter(
personID != "NA")
# view (raw.data)
# str(raw.data)
# years of experience
class(raw.data$experience)
# converting numbers to numeric
raw.data <- raw.data %>%  mutate(experience = as.numeric(as.character(factor(experience))))
# demographics and years of experience, grouped by group (N, gender, M age, max, min age)
raw.data %>%
filter(what == "head") %>%
group_by(group) %>%
summarise(N=n(),
"male" = sum(gender),
"M age" = round(mean(age), 2),
"min age" = min(age),
"max age" = max(age),
"SD age" = round(sd(age), 2),
"M experience" = round(mean(experience), 2),
"min experience" = min(experience),
"max experience" = max(experience),
"SD experience" = round(sd(experience), 2),
) %>%
knitr::kable(digits = 2)
# to compare both sessions filter only Identical items
raw.data <- raw.data  %>% filter(str_detect(shortID,
paste(c("km_mitbekommen",
"km_klar",
"km_ungestört",
"km_aktiv",
"lkm_freundlich",
"lkm_interesse",
"lkm_kritik",
"lkm_ausreden",
"lkm_überlegen",
"lkm_rückmeldungen",
"ks_funktion",
"ks_verständlich",
"ks_sichtbar",
"af_beiträge",
"af_wechselseitig",
"af_nachdenken",
"phb_stand",
"phb_augen",
"phb_blick",
"phb_vorsichgeht",
"phb_raum",
"phb_gestik",
"phb_alleangesehen",
"ps_deutlich",
"ps_klar",
"ps_impulse",
"pi_nonverbal",
"pi_zubewegen",
"pi_direkt",
"m_natürlich",
"m_fiktiv",
"m_verhalten"),
collapse = '|')))
### presence: posture and gaze
# filter by parameter variable, i.e. create a subset for presence: posture and gaze
phb.data <- raw.data %>% filter(scale == "Präsenz/Haltung_Blick")
view (phb.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
phb.data <- phb.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create  mean, min, max, sd of presence: posture/gaze
meanphb <- mean(phb.data$value)
minphb <- min(phb.data$value)
maxphb <- max(phb.data$value)
sdphb <- sd(phb.data$value)
Nphb <- phb.data %>% summarise(N = n_distinct(personID))
# filter by parametervariable, i.e. create a subset for experts and novice
expert.data <- phb.data %>% filter (group == "expert")
novice.data <- phb.data %>% filter (group == "novice")
# create mean, min, max, sd for expert/novice
# expert
expert.meanphb <- mean(expert.data$value)
expert.minphb <- min(expert.data$value)
expert.maxphb <- max(expert.data$value)
expert.sdphb <- sd(expert.data$value)
expert.Nphb<-length(unique(expert.data$personID))
#novice
novice.meanphb <- mean(novice.data$value)
novice.minphb <- min(novice.data$value)
novice.maxphb <- max(novice.data$value)
novice.sdphb <- sd(novice.data$value)
novice.Nphb<-length(unique(novice.data$personID))
### presence: posture and gaze
# filter by parameter variable, i.e. create a subset for presence: posture and gaze
phb.data <- raw.data %>% filter(scale == "Präsenz/Haltung_Blick")
view (phb.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
phb.data <- phb.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create  mean, min, max, sd of presence: posture/gaze
meanphb <- mean(phb.data$value)
minphb <- min(phb.data$value)
maxphb <- max(phb.data$value)
sdphb <- sd(phb.data$value)
Nphb <- phb.data %>% summarise(N = n_distinct(personID))
# filter by parametervariable, i.e. create a subset for experts and novice
expert.data <- phb.data %>% filter (group == "expert")
novice.data <- phb.data %>% filter (group == "novice")
# create mean, min, max, sd for expert/novice
# expert
expert.meanphb <- mean(expert.data$value)
expert.minphb <- min(expert.data$value)
expert.maxphb <- max(expert.data$value)
expert.sdphb <- sd(expert.data$value)
expert.Nphb<-length(unique(expert.data$personID))
#novice
novice.meanphb <- mean(novice.data$value)
novice.minphb <- min(novice.data$value)
novice.maxphb <- max(novice.data$value)
novice.sdphb <- sd(novice.data$value)
novice.Nphb<-length(unique(novice.data$personID))
### presence: posture and gaze
# filter by parameter variable, i.e. create a subset for presence: posture and gaze
phb.data <- raw.data %>% filter(scale_original == "Präsenz/Haltung_Blick")
view (phb.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
phb.data <- phb.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create  mean, min, max, sd of presence: posture/gaze
meanphb <- mean(phb.data$value)
minphb <- min(phb.data$value)
maxphb <- max(phb.data$value)
sdphb <- sd(phb.data$value)
Nphb <- phb.data %>% summarise(N = n_distinct(personID))
# filter by parametervariable, i.e. create a subset for experts and novice
expert.data <- phb.data %>% filter (group == "expert")
novice.data <- phb.data %>% filter (group == "novice")
# create mean, min, max, sd for expert/novice
# expert
expert.meanphb <- mean(expert.data$value)
expert.minphb <- min(expert.data$value)
expert.maxphb <- max(expert.data$value)
expert.sdphb <- sd(expert.data$value)
expert.Nphb<-length(unique(expert.data$personID))
#novice
novice.meanphb <- mean(novice.data$value)
novice.minphb <- min(novice.data$value)
novice.maxphb <- max(novice.data$value)
novice.sdphb <- sd(novice.data$value)
novice.Nphb<-length(unique(novice.data$personID))
### presence: posture and gaze
# filter by parameter variable, i.e. create a subset for presence: posture and gaze
phb.data <- raw.data %>% filter(scale == "Presence: posture/gaze")
view (phb.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
phb.data <- phb.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create  mean, min, max, sd of presence: posture/gaze
meanphb <- mean(phb.data$value)
minphb <- min(phb.data$value)
maxphb <- max(phb.data$value)
sdphb <- sd(phb.data$value)
Nphb <- phb.data %>% summarise(N = n_distinct(personID))
# filter by parametervariable, i.e. create a subset for experts and novice
expert.data <- phb.data %>% filter (group == "expert")
novice.data <- phb.data %>% filter (group == "novice")
# create mean, min, max, sd for expert/novice
# expert
expert.meanphb <- mean(expert.data$value)
expert.minphb <- min(expert.data$value)
expert.maxphb <- max(expert.data$value)
expert.sdphb <- sd(expert.data$value)
expert.Nphb<-length(unique(expert.data$personID))
#novice
novice.meanphb <- mean(novice.data$value)
novice.minphb <- min(novice.data$value)
novice.maxphb <- max(novice.data$value)
novice.sdphb <- sd(novice.data$value)
novice.Nphb<-length(unique(novice.data$personID))
phb.data$group <- as.factor(phb.data$group)
# to create error bars, we need to summarize the data in a separate data frame
phb.plot.sd <- phb.data %>%
group_by(group, item.wordings, .drop=TRUE) %>%
summarise(perspective, mean = mean(value), n = n(), sd = sd(value), se = sd/sqrt(n), )
# and here comes the long plot
phb.plot<-ggplot(data = phb.plot.sd,
aes(x = item.wordings, y = mean,
group = group, colour = group)) +
geom_line()+
geom_pointrange(position = position_dodge(0.1), aes(ymin = mean-se, ymax = mean+se))+
theme_light() +
ylim(1,4)+
facet_grid(~perspective)+
labs(data = phb.data, y = "value", x = NULL,
title="presence: posture and gaze" ,
subtitle=NULL)+
theme(legend.position="bottom",
panel.spacing.x = ,
plot.title = element_text(hjust = 0.5))+
scale_x_discrete(labels = function(x) str_wrap(x, width = 55))+
coord_flip()
phb.plot
# value sometimes contained text before filtering, we have to convert the numbers to numeric
raw.data <- raw.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create a table of all scales
raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2),
) %>%
knitr::kable(digits = 2)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
raw.data <- raw.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create a table of all scales
table.scales <- raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2),
) %>%
knitr::kable(digits = 2)
# remove duplicate labels from the table column "group" to create the APA-style omission of categorical variables
# this is easier than the stub_indent option in apa_table
table.scales$group[duplicated(table.scales$group)]
# value sometimes contained text before filtering, we have to convert the numbers to numeric
raw.data <- raw.data %>%  mutate(value = as.numeric(as.character(factor(value))))
# create a table of all scales
table.scales <- raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2),
) %>%
knitr::kable(digits = 2)
# remove duplicate labels from the table column "group" to create the APA-style omission of categorical variables
# this is easier than the stub_indent option in apa_table
table.scales$group[duplicated(table.scales$group)] <- ""
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
str(quest.raw.data)
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
str(quest.raw.data)
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
str(quest.raw.data)
# create a basic table (tibble) using tidyverse functions
scale.quest.table <- quest.raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2))
# remove duplicate labels from the table column "group" to create the APA-style omission of categorical variables
# this is easier than the stub_indent option in apa_table
scale.quest.table$group[duplicated(scale.quest.table$group)] <- ""
# format and insert table in manuscript
apa_table(
scale.quest.table,
caption = "Mean values of all scales",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
view(scale.quest.table)
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# to compare both sessions filter only Identical items
raw.data <- raw.data  %>% filter(str_detect(shortID,
paste(c("km_mitbekommen",
"km_klar",
"km_ungestört",
"km_aktiv",
"lkm_freundlich",
"lkm_interesse",
"lkm_kritik",
"lkm_ausreden",
"lkm_überlegen",
"lkm_rückmeldungen",
"ks_funktion",
"ks_verständlich",
"ks_sichtbar",
"af_beiträge",
"af_wechselseitig",
"af_nachdenken",
"phb_stand",
"phb_augen",
"phb_blick",
"phb_vorsichgeht",
"phb_raum",
"phb_gestik",
"phb_alleangesehen",
"ps_deutlich",
"ps_klar",
"ps_impulse",
"pi_nonverbal",
"pi_zubewegen",
"pi_direkt",
"m_natürlich",
"m_fiktiv",
"m_verhalten"),
collapse = '|')))
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
str(quest.raw.data)
# create a basic table (tibble) using tidyverse functions
scale.quest.table <- quest.raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2))
# remove duplicate labels from the table column "group" to create the APA-style omission of categorical variables
# this is easier than the stub_indent option in apa_table
scale.quest.table$group[duplicated(scale.quest.table$group)] <- ""
# format and insert table in manuscript
apa_table(
scale.quest.table,
caption = "Mean values of all scales",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
view(scale.quest.table)
# prepare data (selected from questionnaire data)
quest.raw.data<-read.table("./data/short_questionnaire_data_2701211.txt", dec=",", sep="\t", header=T)
# knock out NAs
quest.raw.data <- quest.raw.data  %>% filter(
personID != "NA")
# to compare both sessions filter only Identical items
quest.raw.data <- quest.raw.data  %>% filter(str_detect(shortID,
paste(c("km_mitbekommen",
"km_klar",
"km_ungestört",
"km_aktiv",
"lkm_freundlich",
"lkm_interesse",
"lkm_kritik",
"lkm_ausreden",
"lkm_überlegen",
"lkm_rückmeldungen",
"ks_funktion",
"ks_verständlich",
"ks_sichtbar",
"af_beiträge",
"af_wechselseitig",
"af_nachdenken",
"phb_stand",
"phb_augen",
"phb_blick",
"phb_vorsichgeht",
"phb_raum",
"phb_gestik",
"phb_alleangesehen",
"ps_deutlich",
"ps_klar",
"ps_impulse",
"pi_nonverbal",
"pi_zubewegen",
"pi_direkt",
"m_natürlich",
"m_fiktiv",
"m_verhalten"),
collapse = '|')))
# value sometimes contained text before filtering, we have to convert the numbers to numeric
quest.raw.data <- quest.raw.data %>%  mutate(value = as.numeric(value))
str(quest.raw.data)
# create a basic table (tibble) using tidyverse functions
scale.quest.table <- quest.raw.data %>% # select data
group_by(group, scale) %>%
summarise("M scale" = round(mean(value), 2),
"min scale" = min(value),
"max sclae" = max(value),
"SD scale" = round(sd(value), 2))
# remove duplicate labels from the table column "group" to create the APA-style omission of categorical variables
# this is easier than the stub_indent option in apa_table
scale.quest.table$group[duplicated(scale.quest.table$group)] <- ""
# format and insert table in manuscript
apa_table(
scale.quest.table,
caption = "Mean values of all scales",
# note = "Write Note here",
escape = TRUE, # if TRUE special Latex characters are escaped; if this is turned to F captions cannot be rendered. I don't know why...
placement = "h", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "small" # options are tiny, scriptsize, footnotesize, small, normalsize (default), large, Large, LARGE, huge, Huge
)
view(scale.quest.table)
