na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#################### CohenKappa ##############################
# data preparation
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$Diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$Diff <- abs(reaction_ratings$diff)
# if rating difference > 2 seconds --> 0
reaction_ratings$Diff = ifelse(reaction_ratings$"Diff"<2, "1","0")
reaction_ratings_kappa$Diff <- as.numeric(reaction_ratings_kappa$Diff)
View(reaction_ratings_kappa)
View(reaction_ratings)
suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
reaction_AP <- read_tsv(file = "data/01_01_AP_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
reaction_MK <- read_tsv(file = "data/01_01_MK_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
# select relevant columns
reaction_AP <- reaction_AP %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
reaction_MK <- reaction_MK %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
# filter only for event TOIs
reaction_AP <- reaction_AP %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
reaction_MK <- reaction_MK %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
# compute "rowise" sum across multiple columns but instead of typing column names, use tidy selection syntax
# for AP
reaction_AP <- reaction_AP %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#################### CohenKappa ##############################
# data preparation
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$Diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$Diff <- abs(reaction_ratings$diff)
# if rating difference > 2 seconds --> 0
reaction_ratings$Diff = ifelse(reaction_ratings$"Diff"<2, "1","0")
reaction_ratings$Diff <- as.numeric(reaction_ratings$Diff)
# read in data
reaction_AP <- read_tsv(file = "data/01_01_AP_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
reaction_MK <- read_tsv(file = "data/01_01_MK_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
# select relevant columns
reaction_AP <- reaction_AP %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
reaction_MK <- reaction_MK %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
# filter only for event TOIs
reaction_AP <- reaction_AP %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
reaction_MK <- reaction_MK %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
# compute "rowise" sum across multiple columns but instead of typing column names, use tidy selection syntax
# for AP
reaction_AP <- reaction_AP %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#################### CohenKappa ##############################
# data preparation
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$diff <- abs(reaction_ratings$diff)
# if rating difference > 2 seconds --> 0
reaction_ratings$diff = ifelse(reaction_ratings$"diff"<2, "1","0")
reaction_ratings$diff <- as.numeric(reaction_ratings$diff)
View(reaction_ratings)
reaction_ratings$r2 <- c(1)
View(reaction_ratings)
reaction_ratings_kappa <- select(reaction_ratings, diff, r2)
View(reaction_ratings_kappa)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
################## RATER 1 ################
# read in data from rater1 while specifying locale allows to set ","
r1 <-read_excel ("./data/coding_reactions_CW_ohne_Abstufung.xlsx")
################## RATER 2 ################
# read in data from rater1 while specifying locale allows to set ","
r2 <-read_excel ("./data/coding_reactions_LK_ohne_Abstufung.xlsx")
################## DATA WRANGLING video 01 ################
# filter relevant rows and select relevant columns
r1_v1 <- r1 %>% filter(script == "01") %>%
select(,4:17)
r2_v1 <- r2 %>% filter(script == "01") %>%
select(,4:17)
# reshape data frame in long format
r1_long <- gather(r1_v1, reaction, value)
r2_long <- gather(r2_v1, reaction, value)
r1_long$value <- as.numeric(r1_long$value)
r2_long$value <- as.numeric(r2_long$value)
# merge two data frames vertically
r3 <- bind_cols(r1_long$value, r2_long$value) %>%
rename(rating1 = ...1,
rating2 = ...2)
# compare for rating for video 01
# add a new column to differentiate rater1 and rater2 in wide format
# r3$Added_Column <- c("rater1", "rater2")
#rename column
# r3 <- r3 %>% rename(rater = Added_Column)
# relocate the column to the first place
# r3 <- r3 %>% relocate(rater)
# create a new df r3 with only the ratings
# r3 <- r3[-c(2:3)]
# # wide to long format
# r3_long <- gather(r3, timestamp, value, 2:985)
#
# r3_long_wide <- pivot_wider(r3_long,
#                             names_from = rater)
#
# # create again a new df r3 with only the ratings
# r3_long_wide <- r3_long_wide[c(2:3)]
#################### CohenKappa video 01 ##############################
# first, create a xtab and specify who is rater1 and rater2
ratertab <- xtabs(~r3$rating1 + r3$rating2)
ratertab
# now you can calculate CohenKappa
CohenKappa(ratertab)
# first, create a xtab and specify who is rater1 and rater2
ratertab <- xtabs(~reaction_ratings$diff + reaction_ratings$r2)
ratertab
CohenKappa(ratertab)
# read in data
reaction_AP <- read_tsv(file = "data/01_01_AP_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
reaction_MK <- read_tsv(file = "data/01_01_MK_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
# select relevant columns
reaction_AP <- reaction_AP %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
reaction_MK <- reaction_MK %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
# filter only for event TOIs
reaction_AP <- reaction_AP %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
reaction_MK <- reaction_MK %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
# compute "rowise" sum across multiple columns but instead of typing column names, use tidy selection syntax
# for AP
reaction_AP <- reaction_AP %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#################### CohenKappa ##############################
# data preparation
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$diff <- abs(reaction_ratings$diff)
# if rating difference > 2 seconds --> 0
reaction_ratings$diff = ifelse(reaction_ratings$"diff"<2, "1","0")
reaction_ratings$diff <- as.numeric(reaction_ratings$diff)
# add a new column with values --> 0 / 1
reaction_ratings$r2 <- c(1)
# # calculating Cohen.Kappa
# reaction_ratings_kappa <- select(reaction_ratings, diff, r2)
#
# psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
# first, create a xtab and specify who is rater1 and rater2
ratertab <- xtabs(~reaction_ratings$diff + reaction_ratings$r2)
ratertab
CohenKappa(ratertab)
ratertab <- as.matrix(ratertab)
View(ratertab)
CohenKappa(ratertab)
ratertab
# add a new column with values --> 0 / 1
reaction_ratings$r2 = ifelse(reaction_ratings$"diff"==abs, "1","0")
reaction_ratings$r2 = ifelse(reaction_ratings$"diff"=abs, "1","0")
# add a new column with values --> 0 / 1
reaction_ratings$r2 = ifelse(reaction_ratings$"diff">2, "1","0")
View(reaction_ratings)
reaction_ratings$r2 = ifelse(reaction_ratings$"diff">2, "0","1")
View(reaction_ratings)
# first, create a xtab and specify who is rater1 and rater2
ratertab <- xtabs(~reaction_ratings$diff + reaction_ratings$r2)
ratertab
CohenKappa(ratertab)
str(ratertab)
ratertab <- as.matrix(ratertab)
View(ratertab)
str(reaction_ratings)
reaction_ratings$diff <- as.factor(reaction_ratings$diff)
reaction_ratings$r2 <- as.factor(reaction_ratings$r2)
str(reaction_ratings)
CohenKappa(reaction_ratings$diff, reaction_ratings$r2)
reaction_ratings_kappa <- select(reaction_ratings,
diff, r2)
View(reaction_ratings_kappa)
reaction_ratings_kappa <- as_factor(reaction_ratings_kappa)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
str(reaction_ratings)
# load packages
if (!require(irr)) install.packages('irr'); library(irr) # cohens kappa
if (!require(irrCAC)) install.packages('irrCAC'); library(irrCAC) # cohens kappa
# create factors
reaction_ratings$diff <- as.factor(reaction_ratings$diff)
reaction_ratings$r2 <- as.factor(reaction_ratings$r2)
str(reaction_ratings)
#### Reliability reaction ratings prep (filter only columns with reli data)
reli.reaction_ratings.data <- reaction_ratings  %>%
select(diff, r2)
reli.reaction_ratings.res <- kappa2(reli.reaction_ratings.data, "unweighted")
reli.reaction_ratings.res
# Reliability valid kappa
reli.reaction_ratings.res <- kappa2(reli.reaction_ratings.data, "weighted")
reli.reaction_ratings.res <- kappa2(reli.reaction_ratings.data, "square")
reli.reaction_ratings.res
reli.reaction_ratings.res <- kappa2(reli.reaction_ratings.data, "unweighted")
reli.reaction_ratings.res
# create percent agreement for validity
reli.reaction_ratings.agreement.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(r2 == diff, 1, 0) )
reli.reaction_ratings.agreement <- round(mean(reli.reaction_ratings.agreement.data$countagreement),2)*100
reli.reaction_ratings.agreement
reli.reaction_ratings.agreement.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(r2 == diff, 1, 0) )
reli.reaction_ratings.res
reli.reaction_ratings.agreement.data
reli.reaction_ratings.data
reli.reaction_ratings.agreement.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(r2 == diff, 1, 0) )
library(tidyverse)
reli.reaction_ratings.agreement.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(r2 == diff, 1, 0) )
# create percent agreement for validity
reli.reaction_ratings.agreement.data <- reli.reaction_ratings.data  %>%
mutate("countagreement" = if_else(r2 == diff, 1, 0) )
reli.reaction_ratings.data
# create percent agreement for validity
reli.reaction_ratings.data <- reli.reaction_ratings.data  %>%
mutate("countagreement" = if_else(r2 == diff, 1, 0) )
# create percent agreement for validity
reli.reaction_ratings.data <- reli.reaction_ratings.data  %>%
mutate("countagreement" = if_else(diff == r2, 1, 0) )
# create percent agreement for validity
reli.reaction_ratings.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(diff == r2, 1, 0) )
# create percent agreement for validity
reli.reaction_ratings.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(diff == r2, "1", "0"
# create percent agreement for validity
reli.reaction_ratings.data <- reli.reaction_ratings.data  %>%
mutate(countagreement = if_else(diff == r2, "1", "0") )
reaction_ratings_kappa <- select(reaction_ratings, diff, r2)
reaction_ratings_kappa
reli.reaction_ratings.res <- kappa2(reaction_ratings_kappa, "unweighted")
reli.reaction_ratings.res
reaction_ratings_kappa
reli.reaction_ratings.res <- kappa2(reaction_ratings_kappa, "unweighted")
reli.reaction_ratings.res
