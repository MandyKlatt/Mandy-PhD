TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
reaction_MK <- reaction_MK %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
# compute "rowise" sum across multiple columns but instead of typing column names, use tidy selection syntax
# for AP
reaction_AP <- reaction_AP %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$diff <- abs(reaction_ratings$diff)
View(reaction_ratings)
# define expert and novice with ifelse function
reaction_ratings$diff = ifelse(reaction_ratings$"diff"<2, "0","1")
View(reaction_ratings)
View(reaction_ratings)
reaction_ratings$diff = ifelse(reaction_ratings$"diff"<2, "1","0")
View(reaction_ratings)
# read in data
reaction_AP <- read_tsv(file = "data/01_01_AP_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
reaction_MK <- read_tsv(file = "data/01_01_MK_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
# select relevant columns
reaction_AP <- reaction_AP %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
reaction_MK <- reaction_MK %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
# filter only for event TOIs
reaction_AP <- reaction_AP %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
reaction_MK <- reaction_MK %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
# compute "rowise" sum across multiple columns but instead of typing column names, use tidy selection syntax
# for AP
reaction_AP <- reaction_AP %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$diff <- abs(reaction_ratings$diff)
# define expert and novice with ifelse function
reaction_ratings$diff = ifelse(reaction_ratings$"diff"<2, "1","0")
View(reaction_ratings)
View(reaction_ratings)
# read in data
reaction_AP <- read_tsv(file = "data/01_01_AP_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
reaction_MK <- read_tsv(file = "data/01_01_MK_ProVisioNET_study_glasses_Metrics_Intervall based.tsv"
)
# select relevant columns
reaction_AP <- reaction_AP %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
reaction_MK <- reaction_MK %>%
select(TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering
)
# filter only for event TOIs
reaction_AP <- reaction_AP %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
reaction_MK <- reaction_MK %>%
filter(TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering"
)
# compute "rowise" sum across multiple columns but instead of typing column names, use tidy selection syntax
# for AP
reaction_AP <- reaction_AP %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for AP
# reaction_AP$Time_to_first_Reaction[reaction_AP$Time_to_first_Reaction == 0] <- NA
# do it again for MK
reaction_MK <- reaction_MK %>%
rowwise() %>%
mutate(Time_to_first_Reaction = sum(c_across(cols = contains("Time_to")),
na.rm = T)) %>%
ungroup() %>%
select(TOI, Time_to_first_Reaction)
# # replace 0 with NA
# # for MK
# reaction_MK$Time_to_first_Reaction[reaction_MK$Time_to_first_Reaction == 0] <- NA
# combine the two rater data frames
reaction_complete <- left_join(x = reaction_AP,
y = reaction_MK,
by = "TOI")
# changing milliseconds into seconds
reaction_complete$Time_to_first_Reaction.x <- round(reaction_complete$Time_to_first_Reaction.x/1000,
digits = 2)
reaction_complete$Time_to_first_Reaction.y <- round(reaction_complete$Time_to_first_Reaction.y/1000,
digits = 2)
#################### Percentage Agreement ##############################
# create a new df with only the ratings
reaction_ratings <- reaction_complete %>% select(Time_to_first_Reaction.x, Time_to_first_Reaction.y)
# function agree() with a tolerance of 2 seconds
## reference for tolerance: TIMSS video study tolerance of 10 to 30 seconds
### Seidel, 2003, p. 105
agree(reaction_ratings, 2)
#calculate difference between columns row wise Time_to_first_Reaction.x and Time_to_first_Reaction.y
# first, create two new data frames
df1 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.x))
df2 <- subset.data.frame(reaction_ratings, select = c(Time_to_first_Reaction.y))
# add the difference as a new column
reaction_ratings$Diff <- df1 - df2
# creating only absolute values with abs()
reaction_ratings$Diff <- abs(reaction_ratings$diff)
# if rating difference > 2 --> 0 with ifelse function
reaction_ratings$Diff = ifelse(reaction_ratings$"Diff"<2, "1","0")
View(reaction_ratings)
reaction_ratings_kappa <- select(reaction_ratings, Diff)
View(reaction_ratings_kappa)
reaction_ratings_kappa <- as_factor(reaction_ratings_kappa)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
View(reaction_ratings_kappa)
reaction_ratings_kappa <- as_factor(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa$Diff))
reaction_ratings_kappa <- select(reaction_ratings, Diff)
reaction_ratings_kappa <- as_factor(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
?cohen.kappa
# install needed packages
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
irr,
readxl)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
### VIDEO 01_01
################## RATER 1 ################
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
v1_r1 <- coding_data_r1 %>% filter(TOI == "Lesson")
# select relevant variables
v1_r1 <- r1 %>% select(EventIndex, AOI)
################## RATER 2 ################
# read in data from rater2 while specifying locale allows to set ","
coding_data_r2_v1 <-read_tsv ("./data/01_01_MK_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
r2_v1 <- coding_data_r2_v1 %>% filter(TOI == "Lesson")
# select relevant variables
r2_v1 <- r2_v1 %>% select(EventIndex, AOI)
#rename values in row Material = Teacher_Material
r2_v1$AOI[r2_v1$AOI == "Material_Teacher"] <- "Material"
###### filter identical row number
r1_v1 <- r1_v1 %>% filter(EventIndex != 1728,
EventIndex != 1729,
EventIndex != 1730,
EventIndex != 1731)
r1_v1
# merge two data frames --> adding Columns, don't forget to merge BY AOI !
r3_v1 <- left_join(r1_v1, r2_v1, by = 'EventIndex')
#compare AOI.x and AOI.y and output results to new column titled rating_compare
r3_v1$rating_compare <- as.numeric(r3_v1$AOI.x == r3_v1$AOI.y)
# replace NA with 0
r3_v1 <- r3_v1 %>%
mutate_all(~replace(., is.na(.), 0))
#################### Percentage Agreement ##############################
# create a new df with only the ratings
r3_agree_v1 <- r3_v1 %>% select(AOI.x, AOI.y)
# function agree() with a tolerance
agree(r3_agree_v1)
#################### CohenKappa ##############################
r3_kappa_v1 <- select(r3_v1,
AOI.x, AOI.y)
r3_kappa_v1 <- as_factor(r3_kappa_v1)
r3_kappa_v1$AOI.x <- as_factor(r3_kappa_v1$AOI.x)
r3_kappa_v1$AOI.y <- as_factor(r3_kappa_v1$AOI.y)
psych::cohen.kappa(x = as.matrix(r3_kappa_v1))
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
v1_r1 <- coding_data_r1 %>% filter(TOI == "Lesson")
# select relevant variables
v1_r1 <- r1 %>% select(EventIndex, AOI)
# install needed packages
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
irr,
readxl)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
### VIDEO 01_01
################## RATER 1 ################
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
v1_r1 <- coding_data_r1 %>% filter(TOI == "Lesson")
# select relevant variables
v1_r1 <- r1 %>% select(EventIndex, AOI)
### VIDEO 01_01
################## RATER 1 ################
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
v1_r1 <- coding_data_r1 %>% filter(TOI == "Lesson")
# select relevant variables
v1_r1 <- v1_r1 %>% select(EventIndex, AOI)
View(coding_data_r1_v1)
View(coding_data_r2_v1)
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
v1_r1 <- coding_data_r1_v1 %>% filter(TOI == "Lesson")
# select relevant variables
v1_r1 <- v1_r1 %>% select(EventIndex, AOI)
# read in data from rater2 while specifying locale allows to set ","
coding_data_r2_v1 <-read_tsv ("./data/01_01_MK_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
r2_v1 <- coding_data_r2_v1 %>% filter(TOI == "Lesson")
# select relevant variables
r2_v1 <- r2_v1 %>% select(EventIndex, AOI)
#rename values in row Material = Teacher_Material
r2_v1$AOI[r2_v1$AOI == "Material_Teacher"] <- "Material"
###### filter identical row number
r1_v1 <- r1_v1 %>% filter(EventIndex != 1728,
EventIndex != 1729,
EventIndex != 1730,
EventIndex != 1731)
r1_v1
### VIDEO 01_01
################## RATER 1 ################
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
v1_r1 <- coding_data_r1_v1 %>% filter(TOI == "Lesson")
# select relevant variables
v1_r1 <- v1_r1 %>% select(EventIndex, AOI)
################## RATER 2 ################
# read in data from rater2 while specifying locale allows to set ","
coding_data_r2_v1 <-read_tsv ("./data/01_01_MK_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
r2_v1 <- coding_data_r2_v1 %>% filter(TOI == "Lesson")
# select relevant variables
r2_v1 <- r2_v1 %>% select(EventIndex, AOI)
#rename values in row Material = Teacher_Material
r2_v1$AOI[r2_v1$AOI == "Material_Teacher"] <- "Material"
# read in data from rater1 while specifying locale allows to set ","
coding_data_r1_v1 <-read_tsv ("./data/01_01_AP_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
r1_v1 <- coding_data_r1_v1 %>% filter(TOI == "Lesson")
# select relevant variables
r1_v1 <- r1_v1 %>% select(EventIndex, AOI)
################## RATER 2 ################
# read in data from rater2 while specifying locale allows to set ","
coding_data_r2_v1 <-read_tsv ("./data/01_01_MK_ProVisioNET_study_glasses_Metrics_Event-based.tsv",
locale = locale(decimal_mark = ","))
# filter only rows lesson
r2_v1 <- coding_data_r2_v1 %>% filter(TOI == "Lesson")
# select relevant variables
r2_v1 <- r2_v1 %>% select(EventIndex, AOI)
#rename values in row Material = Teacher_Material
r2_v1$AOI[r2_v1$AOI == "Material_Teacher"] <- "Material"
###### filter identical row number
v1_r1 <- v1_r1 %>% filter(EventIndex != 1728,
EventIndex != 1729,
EventIndex != 1730,
EventIndex != 1731)
v1_r1
# merge two data frames --> adding Columns, don't forget to merge BY AOI !
r3_v1 <- left_join(r1_v1, r2_v1, by = 'EventIndex')
#compare AOI.x and AOI.y and output results to new column titled rating_compare
r3_v1$rating_compare <- as.numeric(r3_v1$AOI.x == r3_v1$AOI.y)
# replace NA with 0
r3_v1 <- r3_v1 %>%
mutate_all(~replace(., is.na(.), 0))
################### Percentage Agreement ##############################
# create a new df with only the ratings
r3_agree_v1 <- r3_v1 %>% select(AOI.x, AOI.y)
# function agree() with a tolerance
agree(r3_agree_v1)
#################### CohenKappa ##############################
r3_kappa_v1 <- select(r3_v1,
AOI.x, AOI.y)
r3_kappa_v1 <- as_factor(r3_kappa_v1)
r3_kappa_v1$AOI.x <- as_factor(r3_kappa_v1$AOI.x)
r3_kappa_v1$AOI.y <- as_factor(r3_kappa_v1$AOI.y)
psych::cohen.kappa(x = as.matrix(r3_kappa_v1))
View(r3_v1)
View(r3_agree_v1)
View(r3_agree_v1)
View(r3_kappa_v1)
View(r3_v1)
r3_kappa_v1 <- select(r3_v1,
AOI.x, AOI.y)
View(r3_kappa_v1)
reaction_ratings_kappa <- select(reaction_ratings, Diff)
reaction_ratings_kappa <- as.numeric(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
reaction_ratings_kappa <- select(reaction_ratings$Diff)
reaction_ratings_kappa <- as.numeric(Diff)
reaction_ratings_kappa <- select(reaction_ratings, Diff)
reaction_ratings_kappa <- as.numeric(Diff)
reaction_ratings_kappa$Diff <- as.numeric(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
psych::cohen.kappa(reaction_ratings_kappa)
View(reaction_ratings_kappa)
str(reaction_ratings_kappa)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
reaction_ratings_kappa <- select(reaction_ratings, Diff)
reaction_ratings_kappa$Diff <- as.numeric(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
reaction_ratings_kappa$Diff <- as_numeric(reaction_ratings_kappa$Diff)
reaction_ratings_kappa$Diff <- as.numeric(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
calculating Cohen.Kappa
reaction_ratings_kappa <- select(reaction_ratings, Diff)
reaction_ratings_kappa$Diff <- as.numeric(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
View(reaction_ratings_kappa)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
arsenal)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl)
# calculating Cohen.Kappa
reaction_ratings_kappa <- select(reaction_ratings, Diff)
reaction_ratings_kappa$Diff <- as.numeric(reaction_ratings_kappa$Diff)
psych::cohen.kappa(x = as.matrix(reaction_ratings_kappa))
View(r3_kappa_v1)
