# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
r_refs("r-references.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
library(needs)
needs(tidyverse)
df_sjt <- read_csv(file = C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv)
df_sjt <- read_csv(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
df_sjt <- read_csv2(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
df_sjt <- read_csv(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
df_sjt <- read_csv2(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/SJT.csv")
View(df_sjt)
### ProVisioNET pilot data
#### intercoder reli expertise data 01_01
# install needed packages
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
irr,
readxl,
DescTool)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data from rater1 while specifying locale allows to set ","
r1 <-read_excel ("./data/coding_reactions_CW_ohne_Abstufung.xlsx")
library(needs)
needs(tidyverse,
ggplot,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
sri_novice <- read_excel("./data/coding_sri_novice.xlsx")
sri_expert <- read_excel("./data/coding_sri_expert.xlsx")
# filter relevant rows and select relevant columns
sri_novice <- sri_novice %>% select(Group, Event, Disturbing_Factor, Confident_Factor)
sri_expert <- sri_expert %>% select(Group, Event, Disturbing_Factor, Confident_Factor)
# combine the two data frames with novice and expert
sri <- rbind(sri_expert, sri_novice)
# removing all NAs
sri_filter <- na.omit(sri)
# define expert and novice with ifelse function
sri_filter$Group = ifelse(sri_filter$Group < 200, "Novice","Expert")
# create a new data frame with both factors
sri_disturb <- subset.data.frame(sri_filter, select = c(Group, Event, Disturbing_Factor))
sri_confi <- subset.data.frame(sri_filter, select = c(Group, Event, Confident_Factor))
# plotting disturbing factor
dist_plot <-
ggplot(data = sri_disturb,
mapping = aes(x = Group,
y = Disturbing_Factor)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
ylim(0,10)+
scale_fill_brewer(palette = "RdBu") +
facet_wrap(vars(Event),
nrow = 1, strip.position = "bottom") +
ggtitle("How disturbing was the event for you?") +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
dist_plot
# plotting Confident factor
confi_plot <-
ggplot(data = sri_confi,
mapping = aes(x = Group,
y = Confident_Factor)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(vars(Event),
nrow = 1, strip.position = "bottom") +
ggtitle("How confident did you feel in dealing with this event?") +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
confi_plot
# arranging plots
grid.arrange(dist_plot, confi_plot, ncol=2, nrow =1)
# load packages
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR)
# read in data
df_sjt <- read_csv2(file = "C:/Users/mk99feta/OneDrive/Dokumente/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/SJTest/data/SJT.csv")
# select relevant columns --> only mean
df_sjt <- df_sjt %>% select(UI06_05, SJT_AL_gek, SJT_ST_gek, SJT_R_gek, SJT_KF_gek)
# rename columns
df_sjt <- rename(df_sjt, c("Group" = "UI06_05",
"Monitoring" = "SJT_AL_gek",
"Managing momentum" = "SJT_ST_gek",
"Rules and routines" = "SJT_R_gek",
"All" = "SJT_KF_gek"))
# changing from wide to long format
df_sjt_long <- df_sjt %>%
pivot_longer(!Group, names_to = "Facets Classroom Management", values_to = "Mean")
# define expert and novice with ifelse function
df_sjt_long$Group = ifelse(df_sjt_long$Group < 200, "Novice","Expert")
# plotting mean
mean_plot <-
ggplot(data = df_sjt_long,
mapping = aes(x = Group,
y = Mean)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
labs(x = "") +
ylim(0,1) +
scale_fill_brewer(palette = "RdBu") +
facet_wrap(vars(`Facets Classroom Management`),
nrow = 1, strip.position = "bottom") +
theme_minimal()+
ggtitle("Situational Judgment Test of Strategic Knowledge of Classroom Management") +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 45))
mean_plot
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
expert_toi <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_202_203_204_205_interval.tsv",
locale = locale(decimal_mark = ","))
# read in novice data
toi_novice1 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_novice_interval_101;108-111.tsv",
locale = locale(decimal_mark = ","))
toi_novice2 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics 102-107_interval.tsv",
locale = locale(decimal_mark = ","))
# combine the novice df
toi_novice <- rbind(toi_novice1, toi_novice2)
# combine two data frames
toi <- rbind(expert_toi, novice_toi)
# filter relevant rows only for time to first reaction
toi_react <- toi %>% filter (TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# select relevant columns only for time to first event
toi_react <- toi_react %>%
select(Participant, Group, TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering)
# changing format with pivot_longer()
toi_react <-
toi_react %>%
pivot_longer(cols = contains("Time_to"),
names_to = "Time_to_first_reaction",
values_to = "Time_to_first_Reaction") %>%
na.omit() %>%
select(Group, TOI, Time_to_first_Reaction)
# changing milliseconds into seconds
toi_react$`Time to first reaction in seconds`<- round(toi_react$Time_to_first_Reaction/1000,
digits = 2)
# plotting time to first reaction
react_plot <-
ggplot(data = toi_react,
mapping = aes(x = Group,
y = `Time to first reaction in seconds`)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0)) +
ylim(0,25) +
labs(x = "") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(TOI),
nrow = 1, strip.position = "bottom") +
ggtitle("Time to first reaction to disruptive person") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 65))
react_plot
setwd("~/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/R script/et toi")
library
library
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
expert_toi <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_202_203_204_205_interval.tsv",
locale = locale(decimal_mark = ","))
# read in novice data
toi_novice1 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_novice_interval_101;108-111.tsv",
locale = locale(decimal_mark = ","))
toi_novice2 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics 102-107_interval.tsv",
locale = locale(decimal_mark = ","))
# combine the novice df
toi_novice <- rbind(toi_novice1, toi_novice2)
# combine two data frames
toi <- rbind(expert_toi, novice_toi)
# filter relevant rows only for time to first reaction
toi_react <- toi %>% filter (TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# select relevant columns only for time to first event
toi_react <- toi_react %>%
select(Participant, Group, TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering)
# filter relevant rows only for time to first reaction
toi_react <- toi %>% filter (TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# combine the novice df
toi_novice <- rbind(toi_novice1, toi_novice2)
# combine two data frames
toi <- rbind(expert_toi, novice_toi)
# read in data
expert_toi <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_202_203_204_205_interval.tsv",
locale = locale(decimal_mark = ","))
# read in novice data
toi_novice1 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_novice_interval_101;108-111.tsv",
locale = locale(decimal_mark = ","))
toi_novice2 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics 102-107_interval.tsv",
locale = locale(decimal_mark = ","))
# combine the novice df
toi_novice <- rbind(toi_novice1, toi_novice2)
# combine two data frames
toi <- rbind(expert_toi, novice_toi)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
expert_toi <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_202_203_204_205_interval.tsv",
locale = locale(decimal_mark = ","))
# read in novice data
toi_novice1 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_novice_interval_101;108-111.tsv",
locale = locale(decimal_mark = ","))
toi_novice2 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics 102-107_interval.tsv",
locale = locale(decimal_mark = ","))
# combine the novice df
toi_novice <- rbind(toi_novice1, toi_novice2)
# combine two data frames
toi <- rbind(expert_toi, toi_novice)
# filter relevant rows only for time to first reaction
toi_react <- toi %>% filter (TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# select relevant columns only for time to first event
toi_react <- toi_react %>%
select(Participant, Group, TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering)
# changing format with pivot_longer()
toi_react <-
toi_react %>%
pivot_longer(cols = contains("Time_to"),
names_to = "Time_to_first_reaction",
values_to = "Time_to_first_Reaction") %>%
na.omit() %>%
select(Group, TOI, Time_to_first_Reaction)
# changing milliseconds into seconds
toi_react$`Time to first reaction in seconds`<- round(toi_react$Time_to_first_Reaction/1000,
digits = 2)
# plotting time to first reaction
react_plot <-
ggplot(data = toi_react,
mapping = aes(x = Group,
y = `Time to first reaction in seconds`)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0)) +
ylim(0,25) +
labs(x = "") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(TOI),
nrow = 1, strip.position = "bottom") +
ggtitle("Time to first reaction to disruptive person") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 65))
react_plot
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in data
expert_toi <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_202_203_204_205_interval.tsv",
locale = locale(decimal_mark = ","))
# read in novice data
toi_novice1 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics_novice_interval_101;108-111.tsv",
locale = locale(decimal_mark = ","))
toi_novice2 <- read_tsv(file = "./data/ProVisioNET_study_glasses_metrics 102-107_interval.tsv",
locale = locale(decimal_mark = ","))
# combine the novice df
toi_novice <- rbind(toi_novice1, toi_novice2)
# combine two data frames
toi <- rbind(expert_toi, toi_novice)
# filter relevant rows only for time to first reaction
toi_react <- toi %>% filter (TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# select relevant columns only for time to first event
toi_react <- toi_react %>%
select(Participant, Group, TOI,
Time_to_first_Event.Reaction_chatting,
Time_to_first_Event.Reaction_clicking,
Time_to_first_Event.Reaction_drawing,
Time_to_first_Event.Reaction_drumming,
Time_to_first_Event.Reaction_head,
Time_to_first_Event.Reaction_heckling,
Time_to_first_Event.Reaction_phone,
Time_to_first_Event.Reaction_snipping,
Time_to_first_Event.Reaction_whispering)
# changing format with pivot_longer()
toi_react <-
toi_react %>%
pivot_longer(cols = contains("Time_to"),
names_to = "Time_to_first_reaction",
values_to = "Time_to_first_Reaction") %>%
na.omit() %>%
select(Group, TOI, Time_to_first_Reaction)
# changing milliseconds into seconds
toi_react$`Time to first reaction in seconds`<- round(toi_react$Time_to_first_Reaction/1000,
digits = 2)
# plotting time to first reaction
react_plot <-
ggplot(data = toi_react,
mapping = aes(x = Group,
y = `Time to first reaction in seconds`)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0)) +
ylim(0,25) +
labs(x = "") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(TOI),
nrow = 1, strip.position = "bottom") +
ggtitle("Time to first reaction to disruptive person") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 65))
react_plot
# filter relevant rows only for time to first reaction
toi_fix <- toi %>% filter (TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# select relevant columns only for time to first fixation
toi_fix <- toi_fix %>%
select(Group, Participant, TOI, Time_to_first_fixation.Disruptive_Person, Number_of_fixations.Disruptive_Person)
# remoce all NAs
toi_fix <- na.omit(toi_fix)
# changing milliseconds into seconds
toi_fix$`Time to first fixation in seconds`<- round(toi_fix$Time_to_first_fixation.Disruptive_Person/1000,
digits = 2)
toi_fix$`Number of fixations on disruptive person` <- toi_fix$Number_of_fixations.Disruptive_Person
# plotting time to first fixation
fix_plot <-
ggplot(data = toi_fix,
mapping = aes(x = Group,
y = `Time to first fixation in seconds`)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(TOI),
nrow = 1, strip.position = "bottom") +
ggtitle("Time to first fixation to disruptive person") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 65))
fix_plot
# plotting time to first reaction
react_plot <-
ggplot(data = toi_react,
mapping = aes(x = Group,
y = `Time to first reaction in seconds`)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.4,
position = position_jitter(seed = 1,
width = 0.1,
height = 0)) +
ylim(0,25) +
labs(x = "") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(TOI),
nrow = 1, strip.position = "bottom") +
ggtitle("Time to first reaction to disruptive person") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 8,
angle = 65))
react_plot
