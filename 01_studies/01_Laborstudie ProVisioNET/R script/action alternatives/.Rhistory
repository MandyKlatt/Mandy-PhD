distinct(count)
# REACTION ALTERNATIVE
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
mutate(na.locf(df_ra$id, fromLast = TRUE),
code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = max(count)
) %>%
distinct(count)
View(df_ra)
# REACTION ALTERNATIVE
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf(df_ra$id, fromLast = TRUE) %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = max(count)
) %>%
distinct(count)
View(df_ra)
# REACTION ALTERNATIVE
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf(df_ra$id, fromLast = TRUE) %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = max(count)
)
# REACTION ALTERNATIVE
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf(df_ra$id, fromLast = TRUE)
# REACTION ALTERNATIVE
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf(id, fromLast = TRUE) %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = max(count)
)
# REACTION ALTERNATIVE
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf() %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = max(count)
)
View(df_ra)
View(df_ra)
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf() %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
View(df_ra)
View(df_ra)
# REACTION ALTERNATIVES
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf() %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
)
View(df_ra)
# REACTION ALTERNATIVES
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf() %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
mutate(count = max(count)) %>%
distinct(count)
View(df_ra)
# REACTION ALTERNATIVES
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf() %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = as.numeric(count)
)
View(df_ra)
# REACTION ALTERNATIVES
df_ra <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
na.locf() %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
),
count = summarise_at(vars(-group_cols()),
max,
na.rm = TRUE)
)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot,
zoo)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# REACTION ALTERNATIVE
df_reaction <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, reaction) %>%
mutate(reaction = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
)
# REACTION ALTERNATIVE
df_reaction <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, reaction) %>%
mutate(reaction = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
)
# REACTION ALTERNATIVE
df_reaction <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(code = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
)
View(df_reaction)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot,
zoo)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>% # replacing NA with most forward non-NA to it
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>% # replacing NA with most forward non-NA to it
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, nd) %>%
group_by(id) %>%
summarise(nd = sum(nd))
# merge data frames
# put all data frames into list
df_list <- list(df_reaction,
df_alternatives_count,
df_alternatives_nd)
# merge data frames
# put all data frames into list
df_list <- list(df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names()
# drop NA
main <-
na.omit(main)
# replace IDs with expertise factor
main$id = ifelse(main$id < 200, "Novice","Expert")
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(
# reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum_participants = sum(n()),
# percent_reaction = round((reaction_sum/sum_participants),digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(
# reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum_participants = sum(n()),
# percent_reaction = round((reaction_sum/sum_participants), digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
View(main)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(!Group %in% c(141,
142,
204,
226), # filter relevant rows
Event %in% c("chatting")) %>%
janitor::clean_names()
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, event, confidence_factor) %>%
filter(!ID %in% c(141,
142,
204,
226), # filter relevant rows
event %in% c("chatting")) %>%
janitor::clean_names()
knitr::opts_chunk$set(echo = TRUE)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot,
zoo)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, event, confidence_factor) %>%
filter(!ID %in% c(141,
142,
204,
226), # filter relevant rows
event %in% c("chatting")) %>%
janitor::clean_names()
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd =
as.numeric(
case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
group_by(id) %>%
summarise(nd = sum(nd))
# merge data frames
# put all data frames into list
df_list <- list(df_sri,
# df_sjt,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event)
# replace NA with 0
main[is.na(main)] <- 0
main$id = ifelse(main$id < 200, "Novice","Expert")
View(main)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(
# reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum_participants = sum(n()),
# percent_reaction = round((reaction_sum/sum_participants),digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(
# reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum_participants = sum(n()),
# percent_reaction = round((reaction_sum/sum_participants), digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
View(main)
# confidence factor
describeBy(main$confidence_factor, main$id)
plot_confi <- boxplot(confidence_factor ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)
describeBy(main$count, main$id)
# action alternatives - non disruptive alternatives
describeBy(main$percent_nd, main$id)
plot_action_quality <- boxplot(percent_nd ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)
# confidence factor
describeBy(main$confidence_factor, main$id)
plot_confi <- boxplot(confidence_factor ~ id, data = main)
main %>%
filter(!is.na(confidence_factor) | !is.na(count)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = confidence_factor,
y = count,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Confidence Factor",
y = "Count of action alternatives") +
theme_cowplot()
main %>%
filter(!is.na(confidence_factor) | !is.na(percent_nd)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = confidence_factor,
y = percent_nd,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Confidence Factor",
y = "Non-disruptive action alternatives") +
theme_cowplot()
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# novices: correlation between confidence factor and count
main %>%
filter(id %in% c("Novice")) -> corr.nov
nov_confi_count_corr <- cor.test(corr.nov$confidence_factor,
corr.nov$count,
method=c("pearson"),
adjust="holm")
print(nov_confi_count_corr,
short = F)
# experts: correlation between confidence factor and count
main %>%
filter(id %in% c("Expert")) -> corr.exp
exp_confi_count_corr <- cor.test(corr.exp$confidence_factor,
corr.exp$count,
method=c("pearson"),
adjust="holm")
print(exp_confi_count_corr,
short = F)
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor,
main$count,
method=c("pearson"),
adjust="holm")
print(full_confi_count_corr,
short = F)
print(full_confi_count_corr,
short = F)
# novices: correlation between confidence factor and non-disruptive alternatives
nov_confi_nd_corr <- cor.test(corr.nov$confidence_factor,
corr.nov$percent_nd,
method=c("pearson"),
adjust="holm")
print(nov_confi_nd_corr,
short = F)
# experts: correlation between confidence factor and non-disruptive alternatives
exp_confi_nd_corr <- cor.test(corr.exp$confidence_factor,
corr.exp$percent_nd,
method=c("pearson"),
adjust="holm")
print(exp_confi_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_confi_nd_corr <- corr.test(main$confidence_factor,
main$percent_nd, method=c("pearson"),
adjust="holm")
print(full_confi_nd_corr,
short = F)
# novices: correlation between count and non-disruptive alternatives
nov_count_nd_corr <- cor.test(corr.nov$count,
corr.nov$percent_nd,
method=c("pearson"),
adjust="holm")
print(nov_count_nd_corr,
short = F)
# experts: correlation between count and non-disruptive alternatives
exp_count_nd_corr <- cor.test(corr.exp$count,
corr.exp$percent_nd,
method=c("pearson"),
adjust="holm")
print(exp_count_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_count_nd_corr <- corr.test(main$count,
main$percent_nd,
method=c("pearson"),
adjust="holm")
print(full_count_nd_corr,
short = F)
