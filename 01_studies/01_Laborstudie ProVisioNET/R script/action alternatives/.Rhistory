print(nov_confi_count_corr,
short = F)
# experts: correlation between confidence factor and count
main %>%
filter(id %in% c("Expert")) -> corr.exp
exp_confi_count_corr <- cor.test(corr.exp$confidence_factor,
corr.exp$count,
method=c("pearson"),
adjust="holm")
print(exp_confi_count_corr,
short = F)
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor,
main$count,
method=c("pearson"),
adjust="holm")
print(full_confi_count_corr,
short = F)
print(full_confi_count_corr,
short = F)
# novices: correlation between confidence factor and non-disruptive alternatives
nov_confi_nd_corr <- cor.test(corr.nov$confidence_factor,
corr.nov$percent_nd,
method=c("pearson"),
adjust="holm")
print(nov_confi_nd_corr,
short = F)
# experts: correlation between confidence factor and non-disruptive alternatives
exp_confi_nd_corr <- cor.test(corr.exp$confidence_factor,
corr.exp$percent_nd,
method=c("pearson"),
adjust="holm")
print(exp_confi_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_confi_nd_corr <- corr.test(main$confidence_factor,
main$percent_nd, method=c("pearson"),
adjust="holm")
print(full_confi_nd_corr,
short = F)
# novices: correlation between count and non-disruptive alternatives
nov_count_nd_corr <- cor.test(corr.nov$count,
corr.nov$percent_nd,
method=c("pearson"),
adjust="holm")
print(nov_count_nd_corr,
short = F)
# experts: correlation between count and non-disruptive alternatives
exp_count_nd_corr <- cor.test(corr.exp$count,
corr.exp$percent_nd,
method=c("pearson"),
adjust="holm")
print(exp_count_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_count_nd_corr <- corr.test(main$count,
main$percent_nd,
method=c("pearson"),
adjust="holm")
print(full_count_nd_corr,
short = F)
knitr::opts_chunk$set(echo = TRUE)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot,
zoo,
apaTables)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot,
zoo,
apaTables)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, event, disruption_factor, confidence_factor) %>%
filter(!ID %in% c(141,
142,
204,
226), # filter relevant rows
event %in% c("chatting")) %>%
janitor::clean_names()
View(df_sri)
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
View(df_alternatives_count)
View(df_sri)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd =
as.numeric(
case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
group_by(id) %>%
summarise(nd = sum(nd))
View(df_alternatives_nd)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
)
View(df_alternatives_count)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
transmute(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
)
View(df_alternatives_nd)
?transmute
transmute
?transmute
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd)
rm(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
group_by(id) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd) %>%
group_by(id) %>%
summarise(nd = sum(nd))
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd)
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F'
)
)
) %>%
select(id, nd) %>%
group_by(id) %>%
summarise(nd = sum(nd))
View(df_alternatives_nd)
View(df_sri)
View(df_alternatives_nd)
# merge data frames
# put all data frames into list
df_list <- list(df_sri,
# df_sjt,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event)
View(main)
# replace NA with 0
main[is.na(main)] <- 0
main$id = ifelse(main$id < 200, "Novice","Expert")
View(main)
# creating new column with absolute number of nd-alternatives
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(
# reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum_participants = sum(n()),
# percent_reaction = round((reaction_sum/sum_participants), digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
View(main_expert)
# creating new column with absolute number of nd-alternatives
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(percent_nd = round((nd/count),
digits = 2)
)
View(main_expert)
# creating new column with absolute number of nd-alternatives
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(percent_nd = round((nd/count),
digits = 2)
)
# creating new column with absolute number of nd-alternatives
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
View(main)
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"])
View(main)
# disruption factor
describeBy(main$disruption_factor, main$id)
# confidence factor
describeBy(main$confidence_factor, main$id)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)^
# action alternatives - non disruptive alternatives (sum score)
describeBy(main$nd, main$id)
plot_action_count <- boxplot(count ~ id, data = main)^
# action alternatives - non disruptive alternatives (sum score)
describeBy(main$nd, main$id)
plot_action_count <- boxplot(count ~ id, data = main)^
# action alternatives - non disruptive alternatives (absolute score)
describeBy(main$nd, main$id)
plot_action_count <- boxplot(count ~ id, data = main)^
# action alternatives - non disruptive alternatives (absolute score)
describeBy(main$nd, main$id)
# action alternatives - non disruptive alternatives (relative score)
describeBy(main$percent_nd, main$id)
plot_action_count <- boxplot(count ~ id, data = main)^
# action alternatives - non disruptive alternatives (absolute score)
describeBy(main$nd, main$id)
# action alternatives - non disruptive alternatives (absolute score)
describeBy(main$nd, main$id)
table(main$id)
table(main$id, main$disruption_factor)
table(main$disruption_factor)
table(main$confidence_factor)
table(main$disruption_factor)
table(main$nd)
kreuztabelle <- table(main$id,
main$disruption_factor,
main$confidence_factor,
main$count,
main$nd,
main$percent_nd)
print(kreuztabelle)
margin.table(kreuztabelle, 1)
margin.table(kreuztabelle, 2)
ftable(kreuztabelle)
main %>%
count(id)
main %>%
count(id,
disruption_factor)
main %>%
count(id,
disruption_factor,
confidence_factor)
main %>%
count(confidence_factor)
main %>%
group_by(id) %>%
summarise(id = n())
main %>%
group_by(id) %>%
summarise(disruption_factor = n())
main %>%
# group_by(id) %>%
summarise(disruption_factor = n())
main %>%
group_by(id) %>%
summarise(disruption_factor = n(),
confidence_factor = n())
main %>%
group_by(id) %>%
summarise(disruption_factor = n(),
confidence_factor = n(),
count = n(),)
main %>%
# group_by(id) %>%
summarise(disruption_factor = n(),
confidence_factor = n(),
count = n(),)
main %>%
group_by(id) %>%
summarise(disruption_factor = n(),
confidence_factor = n(),
count = n(),
nd = n(),
percent_nd = n())
table(main$id)
table(main$disruption_factor)
table(main$confidence_factor)
table(main$count)
table(main$nd)
table(main$percent_nd)
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"])
View(main)
?t.test()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE)
### time to first fixation on disruptive person
df_ttff_disrup$id = ifelse(df_ttff_disrup$id < 200, "Novice","Expert")
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"],
na.rm = TRUE)
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive absolute score
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive relative score
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"],
na.rm = TRUE)
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"],
var.equal = TRUE)
# effect size for expertise differences
CohenD(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"],
na.rm = TRUE)
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive absolute score
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive relative score
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"],
na.rm = TRUE)
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"],
var.equal = TRUE)
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"],
var.equal = TRUE)
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
var.equal = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
var.equal = TRUE)
#### disruption factor
# t-test for expertise differences
t.test(x = main$disruption_factor[main$id == "Expert"],
y = main$disruption_factor[main$id == "Novice"],
var.equal = TRUE)
