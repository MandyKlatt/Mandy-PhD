mutate(reaction = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, reaction)
View(df_reaction)
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>% # replacing NA with most forward non-NA to it
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
View(df_alternatives_count)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, nd) %>%
group_by(id) %>%
summarise(nd = sum(nd))
# merge data frames
# put all data frames into list
df_list <- list(df_reaction,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names()
# drop NA
main <-
na.omit(main)
# replace IDs with expertise factor
main$id = ifelse(main$id < 200, "Novice","Expert")
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd))
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd))
View(main_novice)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()))
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()))
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round(reaction_sum/sum) * 100,
digits = 2))
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum) * 100,
digits = 2))
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2))
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n())
)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_count = round((reaction_sum/sum) * 100,
digits = 2)
)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_count = round((nd/count) * 100,
digits = 2)
)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_nd = (nd/count)
)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
# reaction
describeBy(main$percent_nd, main$id)
plot_reaction <- boxplot(percent_nd ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)
# action alternatives - non disruptive alternatives
describeBy(main$nd, main$id)
plot_action_quality <- boxplot(nd ~ id, data = main)
# reaction
describeBy(main$reaction_sum, main$id)
plot_action_count <- boxplot(reaction_sum ~ id, data = main)
# reaction
describeBy(main$reaction, main$id)
plot_action_count <- boxplot(reaction ~ id, data = main)
# reaction
describeBy(main$reaction_sum, main$id)
plot_action_count <- boxplot(reaction_sum ~ id, data = main)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_reaction = round((reaction/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
View(main_novice)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
count_sum = sum(count),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
# reaction
describeBy(main$percent_reaction, main$id)
plot_action_count <- boxplot(percent_reaction ~ id, data = main)
#### reaction
# t-test for expertise differences
t.test(x = main$percent_reaction[main$id == "Expert"],
y = main$percent_reaction[main$id == "Novice"])
### action alternatives count (sum score)
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive (relative score)
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive (sum score)
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
# REACTION
df_reaction <- read_excel("data/coding_reactions_MK.xlsx") %>%
janitor::clean_names() %>%
mutate(reaction = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, reaction)
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>% # replacing NA with most forward non-NA to it
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, nd) %>%
group_by(id) %>%
summarise(nd = sum(nd))
# merge data frames
# put all data frames into list
df_list <- list(df_reaction,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names()
# drop NA
main <-
na.omit(main)
# replace IDs with expertise factor
main$id = ifelse(main$id < 200, "Novice","Expert")
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
View(main)
#### reaction
# t-test for expertise differences
t.test(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"],
na.rm = TRUE)
#### reaction
# t-test for expertise differences
t.test(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"])
knitr::opts_chunk$set(echo = TRUE)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot,
zoo)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# REACTION
df_reaction <- read_excel("data/coding_reactions_MK.xlsx") %>%
janitor::clean_names() %>%
mutate(reaction = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, reaction)
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>% # replacing NA with most forward non-NA to it
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
mutate(count = max(count)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
na.locf() %>%
janitor::clean_names() %>%
select(id, code) %>%
mutate(nd = as.numeric(case_when(code > 3 ~ '0',
code <= 3 ~ '1',
TRUE ~ 'F')
)
) %>%
select(id, nd) %>%
group_by(id) %>%
summarise(nd = sum(nd))
# merge data frames
# put all data frames into list
df_list <- list(df_reaction,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names()
# drop NA
main <-
na.omit(main)
# replace IDs with expertise factor
main$id = ifelse(main$id < 200, "Novice","Expert")
# creating new column with total reactions
main_novice <- main %>%
filter(id %in% c("Novice")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# creating new column with total reactions
main_expert <- main %>%
filter(id %in% c("Expert")) %>%
mutate(reaction_sum = sum(reaction),
nd_sum = sum(nd),
sum = sum(n()),
percent_reaction = round((reaction_sum/sum),
digits = 2),
percent_nd = round((nd/count),
digits = 2)
)
# merge novice & expert data frame
main <- rbind(main_expert, main_novice)
#### reaction
# t-test for expertise differences
t.test(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count (sum score)
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive (sum score)
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive (relative score)
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
#### reaction
# t-test for expertise differences
t.test(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$reaction[main$id == "Expert"],
y = main$reaction[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive (sum score)
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive (relative score)
# t-test for expertise differences
t.test(x = main$percent_nd[main$id == "Expert"],
y = main$percent_nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
