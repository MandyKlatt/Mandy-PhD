install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools", lib="~/R/win-library/4.1")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
# count x quality of action alternatives
```{r}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE)
main %>%
filter(!is.na(count) | !is.na(mean_code)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = count,
y = mean_code,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Count of action alternatives",
y = "Quality of action alternatives (Code1-6)") +
theme_cowplot()
View(main)
main %>%
filter(!is.na(count) | !is.na(mean_code)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = count,
y = mean_code,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Count of action alternatives",
y = "Quality of action alternatives (Code1-6)") +
theme_cowplot()
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot)
main %>%
filter(!is.na(count) | !is.na(mean_code)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = count,
y = mean_code,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Count of action alternatives",
y = "Quality of action alternatives (Code1-6)") +
theme_cowplot()
# novices: correlation between count and quality
cor.test(corr.nov$count, corr.nov$mean_code, method=c("spearman"))
# novices: correlation between confidence factor and count
main %>%
filter(id %in% c("Novice")) -> corr.nov
cor.test(corr.nov$confidence_factor, corr.nov$count, method=c("pearson"))
# experts: correlation between confidence factor and count
main %>%
filter(id %in% c("Expert")) -> corr.exp
cor.test(corr.exp$confidence_factor, corr.exp$count, method=c("pearson"))
# novices: correlation between count and quality
cor.test(corr.nov$count, corr.nov$mean_code, method=c("spearman"))
# experts: correlation between count and quality
cor.test(corr.exp$count, corr.exp$mean_code, method=c("spearman"))
knitr::opts_chunk$set(echo = TRUE)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
# ID %in% c(101:125, 202:217),
Event %in% c("chatting")) %>%
janitor::clean_names()
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
# ID %in% c(101:125, 202:217),
Event %in% c("chatting")) %>%
janitor::clean_names()
View(df_sri)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:226),
Event %in% c("chatting")) %>%
janitor::clean_names()
View(df_sri)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:227),
ID! %in% c(204),
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:227),
!ID %in% c(204),
Event %in% c("chatting")) %>%
janitor::clean_names()
View(df_sri)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:228),
!ID %in% c(204, 226),
Event %in% c("chatting")) %>%
janitor::clean_names()
View(df_sri)
# ACTION ALTERNATIVES
df_alternatives <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
mutate(mean_code = mean(code)) %>%
distinct(count, mean_code)
View(df_alternatives)
# ACTION ALTERNATIVES
df_alternatives <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
View(df_alternatives)
View(df_alternatives)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:228),
!ID %in% c(204, 226),
Event %in% c("chatting")) %>%
janitor::clean_names()
# ACTION ALTERNATIVES COUNT
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
View(df_alternatives_count)
knitr::opts_chunk$set(echo = TRUE)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:228),
!ID %in% c(204, 226),
Event %in% c("chatting")) %>%
janitor::clean_names()
# ACTION ALTERNATIVES COUNT
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
group_by(id)
View(df_alternatives_count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
transmute(nd = count(code))
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count(code)
View(df_alternatives_nd)
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count(code)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
length(code)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
length(code)
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
length(code)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
length(code) %>%
group_by(id)
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3))
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count()
View(df_alternatives_nd)
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id)
View(df_alternatives_nd)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count()
View(df_sri)
# merge data frames
# put all data frames into list
df_list <- list(df_sri, df_alternatives_count, df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event) %>% # select relevant columns
na.omit()
main$id = ifelse(main$id < 200, "Novice","Expert")
View(main)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count() %>%
transmute(nd = n)
View(df_alternatives_nd)
# merge data frames
# put all data frames into list
df_list <- list(df_sri, df_alternatives_count, df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event) %>% # select relevant columns
na.omit()
main$id = ifelse(main$id < 200, "Novice","Expert")
# confidence factor
describeBy(main$confidence_factor, main$id)
plot_confi <- boxplot(confidence_factor ~ id, data = main)
# confidence factor
describeBy(main$confidence_factor, main$id)
# confidence factor
describeBy(df_sri$confidence_factor, df_sri$id)
plot_confi <- boxplot(confidence_factor ~ id, data = df_sri)
plot_confi <- boxplot(confidence_factor ~ id, data = df_sri)
setwd("~/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/R script/et aoi")
# confidence factor
describeBy(df_sri$confidence_factor, df_sri$id)
plot_confi <- boxplot(confidence_factor ~ id, data = df_sri)
# confidence factor
df_sri %>%
select(!event) %>%
describeBy(df_sri$confidence_factor, df_sri$id)
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id)
View(df_alternatives_count)
# ACTION ALTERNATIVES COUNT
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
View(df_alternatives_count)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event)
# replace NA with 0
main[is.na(main)] <- 0
main$id = ifelse(main$id < 200, "Novice","Expert")
# confidence factor
describeBy(main$confidence_factor, main$id)
plot_confi <- boxplot(confidence_factor ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)
# action alternatives - non disruptive alternatives
describeBy(main$nd, main$id)
plot_action_quality <- boxplot(nd ~ id, data = main)
View(df_alternatives_count)
# confidence factor x count of action alternatives
```{r}
main %>%
filter(!is.na(confidence_factor) | !is.na(count)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = confidence_factor,
y = count,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Confidence Factor",
y = "Count of action alternatives") +
theme_cowplot()
main %>%
filter(!is.na(confidence_factor) | !is.na(nd)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = confidence_factor,
y = nd,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Confidence Factor",
y = "Non-disruptive action alternatives") +
theme_cowplot()
main %>%
filter(!is.na(confidence_factor) | !is.na(nd)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = confidence_factor,
y = nd,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Confidence Factor",
y = "Non-disruptive action alternatives") +
theme_cowplot()
# novices: correlation between confidence factor and count
main %>%
filter(id %in% c("Novice")) -> corr.nov
cor.test(corr.nov$confidence_factor, corr.nov$count, method=c("pearson"))
# experts: correlation between confidence factor and count
main %>%
filter(id %in% c("Expert")) -> corr.exp
cor.test(corr.exp$confidence_factor, corr.exp$count, method=c("pearson"))
# novices: correlation between confidence factor and quality
cor.test(corr.nov$confidence_factor, corr.nov$nd, method=c("pearson"))
# experts: correlation between confidence factor and quality
cor.test(corr.exp$confidence_factor, corr.exp$nd, method=c("pearson"))
# full sample: correlation between confidence factor and count
corr.test(main$confidence_factor, main$count, methode=c("pearson"))
# full sample: correlation between confidence factor and count
corr.test(main$confidence_factor, main$count, method=c("pearson"))
cor.test(corr.exp$confidence_factor, corr.exp$count, method=c("pearson"))
# full sample: correlation between confidence factor and count
corr.test(main$confidence_factor, main$count, method=c("pearson"))
# full sample: correlation between confidence factor and count
print(corr.test(main$confidence_factor, main$count, method=c("pearson")))
# full sample: correlation between confidence factor and count
print(corr.test(main$confidence_factor, main$count, method=c("pearson")), short = FALSE)
# full sample: correlation between confidence factor and count
print(corr.test(main$confidence_factor, main$count, method=c("pearson"), adjust="none"), short = FALSE)
print(corr.p(cts$r,n=30),short=FALSE)
nov_confi_count_corr <- cor.test(corr.nov$confidence_factor, corr.nov$count, method=c("pearson"))
print(nov_confi_count_corr, short = F)
print(exp_confi_count_corr, short = F)
exp_confi_count_corr <- cor.test(corr.exp$confidence_factor, corr.exp$count, method=c("pearson"))
print(exp_confi_count_corr, short = F)
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor, main$count, method=c("pearson"))
print(full_confi_count_corr, short = F)
plot(main$confidence_factor, main$count)
print(full_confi_count_corr, short = F)
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor, main$count, method=c("pearson"))
corr.test(main$confidence_factor, main$count, method=c("pearson"))
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor, main$count, method=c("pearson"), adjust="holm")
corr.test(main$confidence_factor, main$count, method=c("pearson"), adjust="holm")
print(full_confi_count_corr, short = F)
# novices: correlation between confidence factor and non-disruptive alternatives
nov_confi_nd_corr <- cor.test(corr.nov$confidence_factor, corr.nov$nd, method=c("pearson"))
print(nov_confi_nd_corr, short = F)
# experts: correlation between confidence factor and non-disruptive alternatives
exp_confi_nd_corr <- cor.test(corr.exp$confidence_factor, corr.exp$nd, method=c("pearson"))
print(exp_confi_nd_corr, short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_confi_nd_corr <- corr.test(main$confidence_factor, main$nd, method=c("pearson"), adjust="holm")
print(full_confi_nd_corr, short = F)
corr.test(main$confidence_factor, main$nd, method=c("pearson"), adjust="holm")
print(full_confi_nd_corr, short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_confi_nd_corr <- corr.test(main$confidence_factor, main$nd, method=c("pearson"), adjust="holm")
print(full_confi_nd_corr, short = TRUE)
