<<<<<<< Updated upstream
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# confidence factor
describeBy(main$confidence_factor, main$id)
knitr::opts_chunk$set(echo = TRUE)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:228),
!ID %in% c(204, 226),
Event %in% c("chatting")) %>%
janitor::clean_names()
# SJT CM
df_sjt <- read_csv2(file = "data/SJT.csv",
locale = locale(decimal_mark = ",")) %>%
select(UI06_05,
SJT_KF_gek) %>%
filter(UI06_05 %in% c(101:126, 201:228),
!UI06_05 %in% c(204, 226)
) %>%
na.omit() %>%
rename("id" = "UI06_05",
"sjt" = "SJT_KF_gek")
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count() %>%
transmute(nd = n)
# merge data frames
# put all data frames into list
df_list <- list(df_sri,
df_sjt,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event)
# replace NA with 0
main[is.na(main)] <- 0
main$id = ifelse(main$id < 200, "Novice","Expert")
# confidence factor
describeBy(main$confidence_factor, main$id)
plot_confi <- boxplot(confidence_factor ~ id, data = main)
# sjt cm
describeBy(main$sjt, main$id)
plot_confi <- boxplot(sjt ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)
# action alternatives - non disruptive alternatives
describeBy(main$nd, main$id)
plot_action_quality <- boxplot(nd ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
# action alternatives - non disruptive alternatives
describeBy(main$nd, main$id)
### action alternatives non-disruptive
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor,
main$count,
method=c("pearson"),
adjust="holm")
print(full_confi_count_corr,
short = F)
knitr::opts_chunk$set(echo = TRUE)
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
janitor,
RColorBrewer,
cowplot)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:228),
!ID %in% c(204, 226),
Event %in% c("chatting")) %>%
janitor::clean_names()
# SJT CM
df_sjt <- read_csv2(file = "data/SJT.csv",
locale = locale(decimal_mark = ",")) %>%
select(UI06_05,
SJT_KF_gek) %>%
filter(UI06_05 %in% c(101:126, 201:228),
!UI06_05 %in% c(204, 226)
) %>%
na.omit() %>%
rename("id" = "UI06_05",
"sjt" = "SJT_KF_gek")
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count() %>%
transmute(nd = n)
# merge data frames
# put all data frames into list
df_list <- list(df_sri,
df_sjt,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event)
# replace NA with 0
main[is.na(main)] <- 0
main$id = ifelse(main$id < 200, "Novice","Expert")
# confidence factor
describeBy(main$confidence_factor, main$id)
plot_confi <- boxplot(confidence_factor ~ id, data = main)
# sjt cm
describeBy(main$sjt, main$id)
plot_confi <- boxplot(sjt ~ id, data = main)
# action alternatives - count
describeBy(main$count, main$id)
plot_action_count <- boxplot(count ~ id, data = main)
# action alternatives - non disruptive alternatives
describeBy(main$nd, main$id)
plot_action_quality <- boxplot(nd ~ id, data = main)
main %>%
filter(!is.na(confidence_factor) | !is.na(count)) %>%
# filter(id %in% c("Novice")) %>%
ggplot(mapping = aes(x = confidence_factor,
y = count,
colour = id
)
) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
scale_color_viridis_d() +
labs(x = "Confidence Factor",
y = "Count of action alternatives") +
theme_cowplot()
#### confidence factor
# t-test for expertise differences
t.test(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$confidence_factor[main$id == "Expert"],
y = main$confidence_factor[main$id == "Novice"],
na.rm = TRUE)
### action alternatives count
# t-test for expertise differences
t.test(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$count[main$id == "Expert"],
y = main$count[main$id == "Novice"],
na.rm = TRUE)
### action alternatives non-disruptive
# t-test for expertise differences
t.test(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"])
# effect size for expertise differences
CohenD(x = main$nd[main$id == "Expert"],
y = main$nd[main$id == "Novice"],
na.rm = TRUE)
# novices: correlation between confidence factor and count
main %>%
filter(id %in% c("Novice")) -> corr.nov
nov_confi_count_corr <- cor.test(corr.nov$confidence_factor,
corr.nov$count,
method=c("pearson"),
adjust="holm")
print(nov_confi_count_corr,
short = F)
# experts: correlation between confidence factor and count
main %>%
filter(id %in% c("Expert")) -> corr.exp
exp_confi_count_corr <- cor.test(corr.exp$confidence_factor,
corr.exp$count,
method=c("pearson"),
adjust="holm")
print(exp_confi_count_corr,
short = F)
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor,
main$count,
method=c("pearson"),
adjust="holm")
print(full_confi_count_corr,
short = F)
###################################################
# novices: correlation between confidence factor and non-disruptive alternatives
nov_confi_nd_corr <- cor.test(corr.nov$confidence_factor,
corr.nov$nd,
method=c("pearson"),
adjust="holm")
print(nov_confi_nd_corr,
short = F)
# experts: correlation between confidence factor and non-disruptive alternatives
exp_confi_nd_corr <- cor.test(corr.exp$confidence_factor,
corr.exp$nd,
method=c("pearson"),
adjust="holm")
print(exp_confi_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_confi_nd_corr <- corr.test(main$confidence_factor,
main$nd, method=c("pearson"),
adjust="holm")
print(full_confi_nd_corr,
short = F)
###################################################
# novices: correlation between sjt and count
nov_sjt_count_corr <- cor.test(corr.nov$sjt,
corr.nov$count,
method=c("pearson"),
adjust="holm")
print(nov_sjt_count_corr,
short = F)
# experts: correlation between sjt and count
exp_sjt_count_corr <- cor.test(corr.exp$sjt,
corr.exp$count,
method=c("pearson"),
adjust="holm")
print(exp_sjt_count_corr,
short = F)
# full sample: correlation between sjt and count
full_sjt_count_corr <- corr.test(main$sjt,
main$count,
method=c("pearson"),
adjust="holm")
print(full_sjt_count_corr,
short = F)
###################################################
# novices: correlation between sjt and non-disruptive alternatives
nov_sjt_nd_corr <- cor.test(corr.nov$sjt,
corr.nov$nd,
method=c("pearson"),
adjust="holm")
print(nov_sjt_nd_corr,
short = F)
# experts: correlation between sjt and non-disruptive alternatives
exp_sjt_nd_corr <- cor.test(corr.exp$sjt,
corr.exp$nd,
method=c("pearson"),
adjust="holm")
print(exp_sjt_nd_corr,
short = F)
# full sample: correlation between sjt and non-disruptive alternatives
full_sjt_nd_corr <- corr.test(main$sjt,
main$nd,
method=c("pearson"),
adjust="holm")
print(full_sjt_nd_corr,
short = F)
# novices: correlation between count and non-disruptive alternatives
nov_count_nd_corr <- cor.test(corr.nov$count,
corr.nov$nd,
method=c("pearson"),
adjust="holm")
print(nov_count_nd_corr,
short = F)
# experts: correlation between count and non-disruptive alternatives
exp_count_nd_corr <- cor.test(corr.exp$count,
corr.exp$nd,
method=c("pearson"),
adjust="holm")
print(exp_count_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_count_nd_corr <- corr.test(main$count,
main$nd, method=c("pearson"),
adjust="holm")
print(full_count_nd_corr,
short = F)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_count_nd_corr <- corr.test(main$count,
main$nd,
method=c("pearson"),
adjust="holm")
print(full_count_nd_corr,
short = F)
View(full_count_nd_corr)
View(full_count_nd_corr[["ci"]])
# full sample: correlation between confidence factor and count
full_confi_count_corr <- corr.test(main$confidence_factor,
main$count,
method=c("pearson"),
adjust="holm")
print(full_confi_count_corr,
short = F)
View(full_confi_count_corr)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_confi_nd_corr <- corr.test(main$confidence_factor,
main$nd, method=c("pearson"),
adjust="holm")
print(full_confi_nd_corr,
short = F)
View(full_confi_nd_corr)
# full sample: correlation between confidence factor and non-disruptive alternatives
full_count_nd_corr <- corr.test(main$count,
main$nd,
method=c("pearson"),
adjust="holm")
print(full_count_nd_corr,
short = F)
View(full_count_nd_corr)
# novices: correlation between count and non-disruptive alternatives
nov_count_nd_corr <- cor.test(corr.nov$count,
corr.nov$nd,
method=c("pearson"),
adjust="holm")
print(nov_count_nd_corr,
short = F)
# novices: correlation between count and non-disruptive alternatives
nov_count_nd_corr <- cor.test(corr.nov$count,
corr.nov$nd,
method=c("pearson"),
adjust="holm")
print(nov_count_nd_corr,
short = F)
# experts: correlation between count and non-disruptive alternatives
exp_count_nd_corr <- cor.test(corr.exp$count,
corr.exp$nd,
method=c("pearson"),
adjust="holm")
print(exp_count_nd_corr,
short = F)
View(nov_count_nd_corr)
print(nov_count_nd_corr,
short = F)
# experts: correlation between count and non-disruptive alternatives
exp_count_nd_corr <- cor.test(corr.exp$count,
corr.exp$nd,
method=c("pearson"),
adjust="holm")
print(exp_count_nd_corr,
short = F)
knitr::opts_chunk$set(echo = TRUE)
# SJT CM
df_sjt <- read_csv2(file = "data/SJT.csv",
locale = locale(decimal_mark = ",")) %>%
select(UI06_05,
SJT_KF_gek) %>%
filter(UI06_05 %in% c(101:126, 201:226)
# !UI06_05 %in% c(204, 226)
) %>%
na.omit() %>%
rename("id" = "UI06_05",
"sjt" = "SJT_KF_gek")
=======
df_aoi_totaldur <- df_aoi %>%
select(Group,
TOI,
starts_with("Total_duration_of_fixations"))
# changing format from wide to long
df_aoi_totaldur <- df_aoi_totaldur %>% pivot_longer(
cols = contains("Total_duration"),
names_to = "Total_Durations_Of_Fixations",
values_to = "Milliseconds")
# remove all NAs
df_aoi_totaldur <- na.omit(df_aoi_totaldur)
# changing milliseconds into seconds
df_aoi_totaldur$Seconds <- round(df_aoi_totaldur$Milliseconds/1000,
digits = 2)
# rename values
df_aoi_totaldur <- df_aoi_totaldur %>%
mutate(Total_Durations_Of_Fixations = recode(Total_Durations_Of_Fixations,
Total_duration_of_fixations.Anna = 'StudentA',
Total_duration_of_fixations.Bianca = 'StudentB',
Total_duration_of_fixations.Board_Screen = 'Board_Screen',
`Total_duration_of_fixations.Carl(a)` = 'StudentC',
Total_duration_of_fixations.Classroom_Others = 'Classroom_Others',
Total_duration_of_fixations.Disruptive_Person = 'Disruptive_Person',
Total_duration_of_fixations.Material_Students = 'Material_Students',
Total_duration_of_fixations.Material_Teacher = 'Material_Teacher',
Total_duration_of_fixations.Nametag_Anna = 'NametagA',
Total_duration_of_fixations.Nametag_Bianca = 'NametagB',
`Total_duration_of_fixations.Nametag_Carl(a)` = 'NametagC'))
# plotting total duration of fixations for groups
totaldur_group_plot <-
ggplot(data = df_aoi_totaldur,
mapping = aes(x = Group,
y = Seconds)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.1,
position = position_jitter(seed = 1,
width = 0.1)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
ggtitle("Total Duration of Fixations in AOIs") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(size = 11),
plot.title = element_text(size = 15, face = "bold"))
totaldur_group_plot
# plotting total duration of fixations for all disruptions
totaldur_plot <-
df_aoi_totaldur %>%
# mutate(Total_durations_of_Fixations = factor(Total_durations_of_Fixations,
#                                              levels = unique(.$Total_durations_of_Fixations),
#                                              labels = c("StudentA",
#                                                         "StudentB",
#                                                         "StudentC",
#                                                         "Disruptive_Person",
#                                                         "Nametag_B",
#                                                         "Board_Screen",
#                                                         "Classroom_Others",
#                                                         "Matieral_Teacher",
#                                                         "Nametag_A",
#                                                         "Nametag_C",
#                                                         "Material_Students"))) %>%
ggplot(data = df_aoi_totaldur,
mapping = aes(x = Group,
y = Seconds)) +
# geom_violin(mapping = aes(fill = Group)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 1,
alpha = 0.1,
position = position_jitter(seed = 1,
width = 0.1)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(Total_Durations_Of_Fixations),
nrow = 1, strip.position = "bottom") +
ggtitle("Total Duration of Fixations in AOIs") +
theme_classic() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6,
angle = 90),
plot.title = element_text(size = 15, face = "bold"))
totaldur_plot
########################### NUMBER OF FIXATIONS IN AOIS ######################
# selecting relevant columns
df_aoi_number <- df_aoi %>%
select(Group,
TOI,
starts_with("Number_of_fixations"))
# changing format from wide to long
df_aoi_number <- df_aoi_number %>% pivot_longer(
cols = contains("Number_of_fixations"),
names_to = "Number_Of_Fixations_in_AOIs",
values_to = "Number")
# remove all NAs
df_aoi_number <- na.omit(df_aoi_number)
# rename values
df_aoi_number <- df_aoi_number %>%
mutate(Number_Of_Fixations_in_AOIs = recode(Number_Of_Fixations_in_AOIs,
Number_of_fixations.Anna = 'StudentA',
Number_of_fixations.Bianca = 'StudentB',
Number_of_fixations.Board_Screen = 'Board_Screen',
`Number_of_fixations.Carl(a)` = 'StudentC',
Number_of_fixations.Classroom_Others = 'Classroom_Others',
Number_of_fixations.Disruptive_Person = 'Disruptive_Person',
Number_of_fixations.Material_Students = 'Material_Students',
Number_of_fixations.Material_Teacher = 'Material_Teacher',
Number_of_fixations.Nametag_Anna = 'NametagA',
Number_of_fixations.Nametag_Bianca = 'NametagB',
`Number_of_fixations.Nametag_Carl(a)` = 'NametagC'))
# plotting number of fixations in AOIs for groups
number_group_plot <-
ggplot(data = df_aoi_number,
mapping = aes(x = Group,
y = Number)) +
# geom_violin(mapping = aes(fill = Group)) +
geom_boxplot(mapping = aes(fill = Group)) +
geom_point(size = 2,
alpha = 0.1,
position = position_jitter(seed = 1,
width = 0.1)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
ggtitle("Number of Fixations in AOIs") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(size = 11),
plot.title = element_text(size = 15, face = "bold"))
number_group_plot
# plotting number of fixations in all AOIs
number_plot <-
ggplot(data = df_aoi_number,
mapping = aes(x = Group,
y = Number)) +
geom_boxplot(mapping = aes(fill = Group)) +
# geom_violin(mapping = aes(fill = Group)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(Number_Of_Fixations_in_AOIs),
nrow = 1, strip.position = "bottom") +
ggtitle("Number of Fixations in AOIs") +
theme_classic() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6,
angle = 90),
plot.title = element_text(size = 15, face = "bold"))
number_plot
# plotting number of fixations in all AOIs
number_plot <-
ggplot(data = df_aoi_number,
mapping = aes(x = Group,
y = Number)) +
geom_boxplot(mapping = aes(fill = Group)) +
# geom_violin(mapping = aes(fill = Group)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(Number_Of_Fixations_in_AOIs),
nrow = 1, strip.position = "bottom") +
ggtitle("Number of Fixations in AOIs") +
theme_classic() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6,
angle = 90),
plot.title = element_text(size = 15, face = "bold"))
number_plot
# plotting number of fixations in all AOIs
number_plot <-
df_aoi %>%
mutate(TOI = factor(TOI,
levels = c("Chatting_with_neighbour","Whispering",
"Heckling","Snipping_with_fingers",
"Drumming_with_hands","Clicking_pen",
"Head_on_table","Looking_at_phone",
"Drawing"
),
labels = c("Chatting with neighbour","Whispering",
"Heckling","Snipping with fingers",
"Drumming with hands","Clicking pen",
"Head on table","Looking at phone",
"Drawing"
)
)
) %>%
ggplot(data = df_aoi_number,
mapping = aes(x = Group,
y = Number)) +
geom_boxplot(mapping = aes(fill = Group)) +
# geom_violin(mapping = aes(fill = Group)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(Number_Of_Fixations_in_AOIs),
nrow = 1, strip.position = "bottom") +
ggtitle("Number of Fixations in AOIs") +
theme_classic() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6,
angle = 90),
plot.title = element_text(size = 15, face = "bold"))
number_plot
View(df_aoi)
# plotting number of fixations in all AOIs
number_plot <-
ggplot(data = df_aoi_number,
mapping = aes(x = Group,
y = Number)) +
geom_boxplot(mapping = aes(fill = Group)) +
# geom_violin(mapping = aes(fill = Group)) +
ylim(0,25) +
labs(x ="") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(vars(Number_Of_Fixations_in_AOIs),
nrow = 1, strip.position = "bottom") +
ggtitle("Number of Fixations in AOIs") +
theme_classic() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 6,
angle = 90),
plot.title = element_text(size = 15, face = "bold"))
number_plot
View(df_aoi_number)
# rename values
df_aoi_number <- df_aoi %>%
mutate(Number_Of_Fixations_in_AOIs = factor(Number_Of_Fixations_in_AOIs,
levels = c("Number_of_fixations.Disruptive_Person",
"Number_of_fixations.Anna",
"Number_of_fixations.Bianca",
"`Number_of_fixations.Carl(a)`",
"Number_of_fixations.Nametag_Anna",
"Number_of_fixations.Nametag_Bianca",
"`Number_of_fixations.Nametag_Carl(a)`",
"Number_of_fixations.Board_Screen",
"Number_of_fixations.Material_Teacher",
"Number_of_fixations.Material_Students",
"Number_of_fixations.Classroom_Others"
),
labels = c("Disruptive Person",
"StudentA",
"Studentb",
"StudentC",
"NametagA",
"NametagB",
"NametagC",
"Board/Screen",
"Teacher Material",
"Student Material",
"Classroom/Others"
)
))
########################### NUMBER OF FIXATIONS IN AOIS ######################
# selecting relevant columns
df_aoi_number <- df_aoi %>%
select(Group,
TOI,
starts_with("Number_of_fixations"))
# changing format from wide to long
df_aoi_number <- df_aoi_number %>% pivot_longer(
cols = contains("Number_of_fixations"),
names_to = "Number_Of_Fixations_in_AOIs",
values_to = "Number")
# remove all NAs
df_aoi_number <- na.omit(df_aoi_number)
# rename values
df_aoi_number <- df_aoi %>%
mutate(Number_Of_Fixations_in_AOIs = factor(Number_Of_Fixations_in_AOIs,
levels = c("Number_of_fixations.Disruptive_Person",
"Number_of_fixations.Anna",
"Number_of_fixations.Bianca",
"`Number_of_fixations.Carl(a)`",
"Number_of_fixations.Nametag_Anna",
"Number_of_fixations.Nametag_Bianca",
"`Number_of_fixations.Nametag_Carl(a)`",
"Number_of_fixations.Board_Screen",
"Number_of_fixations.Material_Teacher",
"Number_of_fixations.Material_Students",
"Number_of_fixations.Classroom_Others"
),
labels = c("Disruptive Person",
"StudentA",
"Studentb",
"StudentC",
"NametagA",
"NametagB",
"NametagC",
"Board/Screen",
"Teacher Material",
"Student Material",
"Classroom/Others"
)
))
View(df_aoi_number)
# rename values
df_aoi_number <- df_aoi_number %>%
mutate(Number_Of_Fixations_in_AOIs = factor(Number_Of_Fixations_in_AOIs,
levels = c("Number_of_fixations.Disruptive_Person",
"Number_of_fixations.Anna",
"Number_of_fixations.Bianca",
"`Number_of_fixations.Carl(a)`",
"Number_of_fixations.Nametag_Anna",
"Number_of_fixations.Nametag_Bianca",
"`Number_of_fixations.Nametag_Carl(a)`",
"Number_of_fixations.Board_Screen",
"Number_of_fixations.Material_Teacher",
"Number_of_fixations.Material_Students",
"Number_of_fixations.Classroom_Others"
),
labels = c("Disruptive Person",
"StudentA",
"Studentb",
"StudentC",
"NametagA",
"NametagB",
"NametagC",
"Board/Screen",
"Teacher Material",
"Student Material",
"Classroom/Others"
)
))
View(df_aoi_number)
########################### NUMBER OF FIXATIONS IN AOIS ######################
# selecting relevant columns
df_aoi_number <- df_aoi %>%
select(Group,
TOI,
starts_with("Number_of_fixations"))
# changing format from wide to long
df_aoi_number <- df_aoi_number %>% pivot_longer(
cols = contains("Number_of_fixations"),
names_to = "Number_Of_Fixations_in_AOIs",
values_to = "Number")
View(df_aoi_number)
>>>>>>> Stashed changes
library(needs)
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
<<<<<<< Updated upstream
janitor,
RColorBrewer,
cowplot)
=======
janitor)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in expert data
expert_aoi1 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_202_203_204_interval_complete.tsv",
locale = locale(decimal_mark = ","))
expert_aoi2 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_205_interval_complete.tsv",
locale = locale(decimal_mark = ","))
expert_aoi3 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_206_interval_complete.tsv",
locale = locale(decimal_mark = ","))
expert_aoi4 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_207_interval_complete.tsv",
locale = locale(decimal_mark = ","))
# combine the expert df
expert_aoi <- rbind(expert_aoi1,
expert_aoi2,
expert_aoi3,
expert_aoi4)
# read in novice data
novice_aoi1 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_101_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi2 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_102_103_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi3 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_104_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi4 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_105_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi5 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_106_107_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi6 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_108-111_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi7 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_112_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi8 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_113-115_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi9 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_116_interval_complete.tsv",
locale = locale(decimal_mark = ","))
novice_aoi10 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_117_interval_complete.tsv",
locale = locale(decimal_mark = ","))
# combine the novice df
novice_aoi <- rbind(novice_aoi1,
novice_aoi2,
novice_aoi3,
novice_aoi4,
novice_aoi5,
novice_aoi6,
novice_aoi7,
novice_aoi8,
novice_aoi9,
novice_aoi10)
# combine the both df
df_aoi <- rbind(novice_aoi,
expert_aoi)
# filter relevant rows only for time to first reaction
df_aoi <- df_aoi %>% filter (TOI == "Lesson" |
TOI == "Chatting_with_neighbour"|
TOI == "Clicking_pen"|
TOI == "Drawing"|
TOI == "Drumming_with_hands"|
TOI == "Head_on_table"|
TOI == "Heckling"|
TOI == "Looking_at_phone" |
TOI == "Snipping_with_fingers"|
TOI == "Whispering")
# select relevant columns only for time to first fixation
df_aoi <- df_aoi %>%
select(Participant,
Group,
TOI,
Time_to_first_fixation.Disruptive_Person,
starts_with("Total_duration_of_fixations"),
starts_with("Number_of_fixations"))
# changing milliseconds into seconds
df_aoi$Time_to_first_fixation_seconds.Disruptive_Person <- round(df_aoi$Time_to_first_fixation.Disruptive_Person/1000,
digits = 2)
# selecting relevant columns
df_aoi_totaldur <- df_aoi %>%
select(Group,
TOI,
starts_with("Total_duration_of_fixations"))
# changing format from wide to long
df_aoi_totaldur <- df_aoi_totaldur %>% pivot_longer(
cols = contains("Total_duration"),
names_to = "Total_Durations_Of_Fixations",
values_to = "Milliseconds")
# remove all NAs
df_aoi_totaldur <- na.omit(df_aoi_totaldur)
########################### NUMBER OF FIXATIONS IN AOIS ######################
# selecting relevant columns
df_aoi_number <- df_aoi %>%
select(Group,
TOI,
starts_with("Number_of_fixations"))
# changing format from wide to long
df_aoi_number <- df_aoi_number %>% pivot_longer(
cols = contains("Number_of_fixations"),
names_to = "Number_Of_Fixations_in_AOIs",
values_to = "Number")
# remove all NAs
df_aoi_number <- na.omit(df_aoi_number)
# rename values
df_aoi_number <- df_aoi_number %>%
mutate(Number_Of_Fixations_in_AOIs = factor(Number_Of_Fixations_in_AOIs,
levels = c("Number_of_fixations.Disruptive_Person",
"Number_of_fixations.Anna",
"Number_of_fixations.Bianca",
"`Number_of_fixations.Carl(a)`",
"Number_of_fixations.Nametag_Anna",
"Number_of_fixations.Nametag_Bianca",
"`Number_of_fixations.Nametag_Carl(a)`",
"Number_of_fixations.Board_Screen",
"Number_of_fixations.Material_Teacher",
"Number_of_fixations.Material_Students",
"Number_of_fixations.Classroom_Others"
),
labels = c("Disruptive Person",
"StudentA",
"StudentB",
"StudentC",
"NametagA",
"NametagB",
"NametagC",
"Board/Screen",
"Teacher Material",
"Student Material",
"Classroom/Others"
)
))
View(df_aoi_number)
View(df_aoi_number)
library(needs)
>>>>>>> Stashed changes
needs(tidyverse,
psych,
moments,
sjPlot,
DescTools,
irr,
readxl,
gridExtra,
<<<<<<< Updated upstream
janitor,
RColorBrewer,
cowplot)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# SELF-REPORT DATA
df_sri <-
excel_sheets("data/coding_sri.xlsx") %>%
map_df(~read_xlsx("data/coding_sri.xlsx",.)) %>%
dplyr::select(ID, Event, `Confidence Factor`) %>%
filter(
ID %in% c(101:126, 201:228),
!ID %in% c(204, 226),
Event %in% c("chatting")) %>%
janitor::clean_names()
# SJT CM
df_sjt <- read_csv2(file = "data/SJT.csv",
locale = locale(decimal_mark = ",")) %>%
select(UI06_05,
SJT_KF_gek) %>%
filter(UI06_05 %in% c(101:126, 201:226)
# !UI06_05 %in% c(204, 226)
) %>%
na.omit() %>%
rename("id" = "UI06_05",
"sjt" = "SJT_KF_gek")
# ACTION ALTERNATIVES count
df_alternatives_count <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
group_by(id) %>%
# mutate(mean_code = mean(code)) %>%
distinct(count)
# ACTION ALTERNATIVES non-disruptive
df_alternatives_nd <- read_excel("data/coding_action_alternatives.xlsx") %>%
janitor::clean_names() %>%
select(id, code) %>%
filter(code %in% c(1:3)) %>%
group_by(id) %>%
count() %>%
transmute(nd = n)
# merge data frames
# put all data frames into list
df_list <- list(df_sri,
df_sjt,
df_alternatives_count,
df_alternatives_nd)
# merge all data frames in list
main <-
df_list %>% reduce(full_join, by='id') %>%
janitor::clean_names() %>%
select(!event)
# replace NA with 0
main[is.na(main)] <- 0
main$id = ifelse(main$id < 200, "Novice","Expert")
View(main)
=======
janitor)
# suppress "summarize" info.
# if this line is ommitted, each table using the summarize function will be accompanied with a warning from the console
options(dplyr.summarise.inform = FALSE)
# read in expert data
expert_aoi1 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_202_203_204_interval_complete.tsv",
locale = locale(decimal_mark = ","))
expert_aoi2 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_205_interval_complete.tsv",
locale = locale(decimal_mark = ","))
expert_aoi3 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_206_interval_complete.tsv",
locale = locale(decimal_mark = ","))
expert_aoi4 <- read_tsv(file = "data/ProVisioNET_study_glasses_metrics_207_interval_complete.tsv",
locale = locale(decimal_mark = ","))
# combine the expert df
expert_aoi <- rbind(expert_aoi1,
expert_aoi2,
expert_aoi3,
expert_aoi4)
>>>>>>> Stashed changes
