theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
df_all <- bind_rows(list(df_prior, df_main, df_after))
df_all_min <- df_all %>%
group_by(ID) %>%
summarise(min = max(Time))
#plot_flow <-
ggplot(data = filter(df_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
geom_path(mapping = aes(color = as_factor(ID)),
size = 0.4,
alpha = 0.6) +
# stat_smooth(geom = "line",
#             mapping = aes(color = as.factor(ID)),
#             method = "loess",
#             se = FALSE,
#             linetype = 2) +
xlim(0,min(df_all_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
View(df_after)
View(df_main)
View(df_prior)
View(df_after)
View(df_after)
df_all <- bind_rows(list(df_after,df_prior, df_main))
df_all_min <- df_all %>%
group_by(ID) %>%
summarise(min = max(Time))
#plot_flow <-
ggplot(data = filter(df_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
geom_path(mapping = aes(color = as_factor(ID)),
size = 0.4,
alpha = 0.6) +
# stat_smooth(geom = "line",
#             mapping = aes(color = as.factor(ID)),
#             method = "loess",
#             se = FALSE,
#             linetype = 2) +
xlim(0,min(df_all_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
str(df_after)
str(df_main)
str(df_prior)
View(df_after)
View(a101)
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
#...............................................................................
#                                                                              .
#  Enter the missing cases in Heart Rate table below.                                       .
#                                                                              .
#...............................................................................
part <- filter(part,
`ID participant` != 108 # |
#`ID participant` != | etc.
)
part <- part$`ID participant`
for (i in part) {
nam <- paste("m", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_m.csv", sep = ""
)
)
)
}
for (i in part) {
nam <- paste("a", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_a.csv", sep = ""
)
)
)
}
for (i in part) {
nam <- paste("p", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_p.csv", sep = ""
)
)
)
}
# m101 <- read_csv(file = "Data/101_m.csv")
# m102 <- read_csv(file = "Data/102_m.csv")
# m103 <- read_csv(file = "Data/103_m.csv")
# m104 <- read_csv(file = "Data/104_m.csv")
# m105 <- read_csv(file = "Data/105_m.csv")
#
# p101 <- read_csv(file = "Data/101_p.csv")
# p102 <- read_csv(file = "Data/102_p.csv")
# p103 <- read_csv(file = "Data/103_p.csv")
# p104 <- read_csv(file = "Data/104_p.csv")
# p105 <- read_csv(file = "Data/105_p.csv")
#
# a101 <- read_csv(file = "Data/101_a.csv")
# a102 <- read_csv(file = "Data/102_a.csv")
# a103 <- read_csv(file = "Data/103_a.csv")
# a104 <- read_csv(file = "Data/104_a.csv")
# a105 <- read_csv(file = "Data/105_a.csv")
# z <- ls()
for (i in part) {
nam <- paste0("m", i)
value <- get(nam)$Time - min(get(nam)$Time)
`Heart Rate` <- get(nam)$`Heart Rate`
df <- tibble(Time = as.numeric(value),
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("m", i), df)
}
for (i in part) {
nam <- paste0("a", i)
value <- get(nam)$Time - min(get(nam)$Time)
`Heart Rate` <- get(nam)$`Heart Rate`
df <- tibble(Time = as.numeric(value),
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("a", i), df)
}
for (i in part) {
nam <- paste0("p", i)
value <- get(nam)$Time - min(get(nam)$Time)
`Heart Rate` <- get(nam)$`Heart Rate`
df <- tibble(Time = as.numeric(value),
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("p", i), df)
}
# m101$Time <- m101$Time - min(m101$Time)
# m102$Time <- m102$Time - min(m102$Time)
# m103$Time <- m103$Time - min(m103$Time)
# m104$Time <- m104$Time - min(m104$Time)
# m105$Time <- m105$Time - min(m105$Time)
#
# p101$Time <- p101$Time - min(p101$Time)
# p102$Time <- p102$Time - min(p102$Time)
# p103$Time <- p103$Time - min(p103$Time)
# p104$Time <- p104$Time - min(p104$Time)
# p105$Time <- p105$Time - min(p105$Time)
#
# a101$Time <- a101$Time - min(a101$Time)
# a102$Time <- a102$Time - min(a102$Time)
# a103$Time <- a103$Time - min(a103$Time)
# a104$Time <- a104$Time - min(a104$Time)
# a105$Time <- a105$Time - min(a105$Time)
rm(part)
rm(nam)
rm(`Heart Rate`)
rm(i)
rm(value)
rm(df)
df_m <-
mget(ls(pattern = "m")) %>%
bind_rows()
df_p <-
mget(ls(pattern = "p")) %>%
bind_rows()
df_a <-
mget(ls(pattern = "a")) %>%
bind_rows()
#rm(list = as.character(z))
#rm(z)
df_a$Type <- "Post"
df_m$Type <- "Main"
df_p$Type <- "Pre"
df_all <- bind_rows(list(df_a,df_p, df_m))
df_all_min <- df_all %>%
group_by(ID) %>%
summarise(min = max(Time))
#plot_flow <-
ggplot(data = filter(df_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
geom_path(mapping = aes(color = as_factor(ID)),
size = 0.4,
alpha = 0.6) +
# stat_smooth(geom = "line",
#             mapping = aes(color = as.factor(ID)),
#             method = "loess",
#             se = FALSE,
#             linetype = 2) +
xlim(0,min(df_all_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
df_all <- df_all %>%
mutate(Type = factor(Type,
levels = c("Pre","Main","Post")),
ID = as_factor(ID)
)
df_aggr <- df_all %>%
group_by(Type, ID) %>%
summarise(mean = mean(`Heart Rate`))
df_aggr$Type <- factor(df_aggr$Type,
levels = c("Pre","Main","Post")
)
df_all$status <- if_else(as.numeric(as.character(df_all$ID)) < 200,
"novice",
"advanced")
df_all_min <- df_all %>%
group_by(ID) %>%
summarise(min = max(Time))
#plot_flow <-
ggplot(data = filter(df_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
geom_path(mapping = aes(color = as_factor(ID)),
size = 0.4,
alpha = 0.6) +
# stat_smooth(geom = "line",
#             mapping = aes(color = as.factor(ID)),
#             method = "loess",
#             se = FALSE,
#             linetype = 2) +
xlim(0,min(df_all_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
plot_flow <-
ggplot(data = filter(df_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
geom_path(mapping = aes(color = as_factor(ID)),
size = 0.4,
alpha = 0.6) +
# stat_smooth(geom = "line",
#             mapping = aes(color = as.factor(ID)),
#             method = "loess",
#             se = FALSE,
#             linetype = 2) +
xlim(0,min(df_all_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
plot_flow_leg <-
ggplot(data = df_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
# geom_line(mapping = aes(color = ID)) +
geom_smooth(mapping = aes(color = as_factor(ID)),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.title = element_blank()) +
facet_grid(cols = vars(Type))
legend <- cowplot::get_legend(plot_flow_leg)
plot_loess <-
ggplot(data = filter(df_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
# geom_path(mapping = aes(color = as_factor(ID)),
#           size = 0.4,
#           alpha = 0.4) +
stat_smooth(geom = "line",
mapping = aes(color = as.factor(ID)),
method = "loess",
se = FALSE) +
xlim(0,min(df_all_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
facet_grid(cols = vars(Type),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.background = element_blank(),
strip.text.x = element_blank()
)
plot_box <-
ggplot(data = df_aggr,
mapping = aes(x = Type,
y = mean,
color = as_factor(ID)
)
) +
geom_boxplot(color = "darkgrey",
fill = "grey",
alpha = 0.6) +
geom_line(mapping = aes(group = as_factor(ID))) +
geom_point(size = 2) +
labs(x = "",
y = "Average Heart Rate\n(in Beats per Minute)") +
scale_color_viridis_d(option = "A",
end = 0.8) +
theme_minimal() +
theme(text = element_text(family = "serif"),
strip.text = element_blank(),
legend.position = "none",
axis.text.x = element_blank()
) +
aes(fill = Type)
plot_box
plot_box <-
ggplot(data = df_aggr,
mapping = aes(x = Type,
y = mean,
color = as_factor(ID)
)
) +
geom_boxplot(color = "darkgrey",
fill = "grey",
alpha = 0.6) +
geom_line(mapping = aes(group = as_factor(ID))) +
geom_point(size = 2) +
labs(x = "",
y = "Average Heart Rate\n(in Beats per Minute)") +
scale_color_viridis_d(option = "A",
end = 0.8) +
theme_minimal() +
theme(text = element_text(family = "serif"),
strip.text = element_blank(),
legend.position = "none"#,
#axis.text.x = element_blank()
) +
aes(fill = Type)
plot_box
lo_mat <- rbind(c(1,1,1,1,1,1,NA),
c(2,2,2,2,2,2,4),
c(3,3,3,3,3,3,NA))
plot_fitbit <-
grid.arrange(grobs = list(plot_flow, plot_loess, plot_box, legend),
layout_matrix = lo_mat)
ggsave(plot = plot_fitbit,
file = "Plots/fitbit.pdf",
height = 16,
width = 20,
units = "cm"
)
plot_box <-
ggplot(data = df_aggr,
mapping = aes(x = Type,
y = mean,
color = as_factor(ID)
)
) +
geom_boxplot(color = "darkgrey",
fill = "grey",
alpha = 0.6) +
geom_line(mapping = aes(group = as_factor(ID))) +
geom_point(size = 2) +
labs(x = "",
y = "Average Heart Rate\n(in Beats per Minute)") +
scale_color_viridis_d(option = "A",
end = 0.8) +
theme_minimal() +
theme(text = element_text(family = "serif"),
strip.text = element_blank(),
legend.position = "none",
axis.text.x = element_blank()
) +
aes(fill = Type)
lo_mat <- rbind(c(1,1,1,1,1,1,NA),
c(2,2,2,2,2,2,4),
c(3,3,3,3,3,3,NA))
plot_fitbit <-
grid.arrange(grobs = list(plot_flow, plot_loess, plot_box, legend),
layout_matrix = lo_mat)
ggsave(plot = plot_fitbit,
file = "Plots/fitbit.pdf",
height = 16,
width = 20,
units = "cm"
)
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
#install.packages("needs")
#1
library(needs)
needs(tidyverse,
lubridate,
viridis,
grid,
gridExtra,
cowplot,
readxl,
ARTofR)
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
#...............................................................................
#                                                                              .
#  Enter the missing cases in Heart Rate table below.                                       .
#                                                                              .
#...............................................................................
part <- filter(part,
`ID participant` != 108 # |
#`ID participant` != | etc.
)
part <- part$`ID participant`
for (i in part) {
nam <- paste("m", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_m.csv", sep = ""
)
)
)
}
for (i in part) {
nam <- paste("a", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_a.csv", sep = ""
)
)
)
}
for (i in part) {
nam <- paste("p", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_p.csv", sep = ""
)
)
)
}
# m101 <- read_csv(file = "Data/101_m.csv")
# m102 <- read_csv(file = "Data/102_m.csv")
# m103 <- read_csv(file = "Data/103_m.csv")
# m104 <- read_csv(file = "Data/104_m.csv")
# m105 <- read_csv(file = "Data/105_m.csv")
#
# p101 <- read_csv(file = "Data/101_p.csv")
# p102 <- read_csv(file = "Data/102_p.csv")
# p103 <- read_csv(file = "Data/103_p.csv")
# p104 <- read_csv(file = "Data/104_p.csv")
# p105 <- read_csv(file = "Data/105_p.csv")
#
# a101 <- read_csv(file = "Data/101_a.csv")
# a102 <- read_csv(file = "Data/102_a.csv")
# a103 <- read_csv(file = "Data/103_a.csv")
# a104 <- read_csv(file = "Data/104_a.csv")
# a105 <- read_csv(file = "Data/105_a.csv")
# z <- ls()
View(p107)
str(p107)
??countdown
?length
length(a101)
length(df_all)
?n
nrow(df_all)
summary(a202$`Heart Rate`)
quantile(a202$`Heart Rate`, probs = c(0.25,0.75))
quantile(a202$`Heart Rate`, probs = c(0,0.25,0,5,0.75,1))
quantile(a202$`Heart Rate`, probs = c(0.25,0,5,0.75))
quantile(a202$`Heart Rate`, probs = c(0,0.25,0.5,0.75,1))
quantile(a202$`Heart Rate`)
quantile(1:10)
matrix(data = c("bla",1,2,3,45,6,8,9,7), nrow = 3, ncol = 3)
as.numeric(matrix(data = c("bla",1,2,3,45,6,8,9,7), nrow = 3, ncol = 3))
