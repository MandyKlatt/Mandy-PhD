clean_names() %>%
transmute(time = as.numeric(milliseconds(recording_timestamp_ms)
),
name = participant_name,
acc_x = as.numeric(str_replace(accelerometer_x_m_s2,
pattern = ",",
replacement = "."
)
),
acc_z = as.numeric(str_replace(accelerometer_z_m_s2,
pattern = ",",
replacement = "."
)
)
)
# First step: create tibbles for each individual.
for (i in unique(df_test$name)) {
df <- filter(df_test,
name == i
)
assign(value = df,
x = paste0("df_", i)
)
}
for (i in unique(df_test$name)) {
df <- get(paste0("df_", i))
# Vectors x and z with length equal to time periods
# present in each tibble; initial with 0 meters for each   # time period.
x <- rep(0, length(get(paste0("df_", i))$time))
z <- rep(0, length(get(paste0("df_", i))$time))
# For each time period, calculate the meters walked in
# two dimensions (x and z), given the initial velocity
# for each period is 0 m/s. First value stays 0 for
# convenience.
# See formula 1.
for (j in 2:length(get(paste0("df_", i))$time)) {
x[[j]] <- 0.5 * get(paste0("df_", i))$acc_x[j] * (get(paste0("df_", i))$time[j] - get(paste0("df_", i))$time[j-1])^2
z[[j]] <- 0.5 * get(paste0("df_", i))$acc_z[j] * (get(paste0("df_", i))$time[j] - get(paste0("df_", i))$time[j-1])^2
}
# Save both vectors in new tibble.
df <- tibble(meter_x = x,
meter_z = z,
ID = paste0(i))
assign(x = paste0("df_meter_", i),
value = df)
}
labs <- unique(df_test$name)
df_test$name <- factor(df_test$name,
levels = labs,
labels = c("Standing Still",
"Standing Still, Head Movement",
"Walking Ten Meters",
"Walking Ten Meters, Turning Around",
"Walking More, Random",
"Walking Less, Random",
"Stairs",
"Elevator"))
saveRDS(object = df_test,
file = "final_data/meter_test_time.rds")
df_meter_all <-
mget(ls(pattern = "meter")) %>%
bind_rows() %>%
group_by(ID) %>%
summarise(meter_x = sum(abs(meter_x)),
meter_z = sum(abs(meter_z))
)
df_meter_all$ges <- sqrt(df_meter_all$meter_x^2 + df_meter_all$meter_z^2)
saveRDS(object = df_meter_all,
file = "final_data/meter_test.rds"
)
rm(list = ls())
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
part <- filter(part,
`ID participant` != 108,
#                `ID participant` != 103,
#                `ID participant` != 117,
#                `ID participant` != 121,
`ID participant` != 123
#                # `ID participant` != | etc.
)
part <- part$`ID participant`
setwd("~/GitHub/Mandy-PhD/01_studies/01_Laborstudie ProVisioNET/Fitbit/fitbit_proj_final")
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
View(part)
part <- filter(part,
`ID participant` != 108,
#                `ID participant` != 103,
#                `ID participant` != 117,
#                `ID participant` != 121,
`ID participant` != 123
#                # `ID participant` != | etc.
)
View(part)
part <- part$`ID participant`
for (i in part) {
nam <- paste("m", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_m.csv",
sep = ""
)
)
)
}
for (i in part) {
nam <- paste("a", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_a.csv",
sep = ""
)
)
)
}
for (i in part) {
nam <- paste("p", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_p.csv",
sep = ""
)
)
)
}
for (i in part) {
nam <- paste0("m", i)
value <- get(nam)$Time - min(get(nam)$Time)
`Heart Rate` <- get(nam)$`Heart Rate`
df <- tibble(Time = as.numeric(value),
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("m", i), df)
}
for (i in part) {
nam <- paste0("a", i)
value <- get(nam)$Time - min(get(nam)$Time)
`Heart Rate` <- get(nam)$`Heart Rate`
df <- tibble(Time = as.numeric(value),
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("a", i), df)
}
for (i in part) {
nam <- paste0("p", i)
value <- get(nam)$Time - min(get(nam)$Time)
`Heart Rate` <- get(nam)$`Heart Rate`
df <- tibble(Time = as.numeric(value),
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("p", i), df)
}
rm(part)
rm(nam)
rm(`Heart Rate`)
rm(i)
rm(value)
rm(df)
df_m <-
mget(ls(pattern = "m")) %>%
bind_rows()
df_p <-
mget(ls(pattern = "p")) %>%
bind_rows()
df_a <-
mget(ls(pattern = "a")) %>%
bind_rows()
df_a$Type <- "Post"
df_m$Type <- "Main"
df_p$Type <- "Pre"
df_all <- bind_rows(list(df_a,df_p, df_m))
df_all <- df_all %>%
mutate(Type = factor(Type,
levels = c("Pre","Main","Post")),
ID = as_factor(ID)
)
df_all$status <- if_else(as.numeric(as.character(df_all$ID)) < 200,
"Novice",
"Expert")
df_aggr <- df_all %>%
group_by(Type, ID, status) %>%
summarise(mean = mean(`Heart Rate`, na.rm = TRUE))
df_all_min <- df_all %>%
group_by(ID) %>%
summarise(min = max(Time))
saveRDS(object = df_all,
file = "final_data/heart_all.rds")
saveRDS(object = df_aggr,
file = "final_data/heart_aggr.rds")
saveRDS(object = df_all_min,
file = "final_data/heart_min.rds")
rm(list = ls())
df_steps <- read_xlsx(path = "Data/Heart Rate.xlsx")
df_steps <- df_steps %>%
transmute(ID = as.numeric(as.character(df_steps$`ID participant`)),
Steps = Diff
)
df_steps$type <- ifelse(df_steps$ID < 200,
"Novice",
"Expert"
)
df_heart_aggr <- read_rds(file = "final_data/heart_aggr.rds")
df_aggr_main <-
df_heart_aggr %>%
mutate(ID = as.numeric(as.character(ID))) %>%
ungroup() %>%
filter(Type == "Main") %>%
select(ID, mean)
df_steps <- full_join(x = df_aggr_main,
y = df_steps,
key = ID)
saveRDS(object = df_steps,
file = "final_data/steps.rds")
rm(list = ls())
####
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
part <- filter(part,
`ID participant` != 108  |
`ID participant` != 123
#                #`ID participant` != | etc.
)
part <- part$`ID participant`
for (i in part) {
nam <- paste("m", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_m.csv",
sep = ""
)
)
)
}
for (i in part) {
nam <- paste0("m", i)
`Heart Rate` <- get(nam)$`Heart Rate`
time <- get(nam)$Time
df <- tibble(Time = time,
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("m", i), df)
}
rm(part)
rm(nam)
rm(i)
rm(time)
####
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
####
part <- read_xlsx(path = "Data/Heart Rate.xlsx")
part <- filter(part,
`ID participant` != 108  |
`ID participant` != 123
#                #`ID participant` != | etc.
)
part <- part$`ID participant`
for (i in part) {
nam <- paste("m", i, sep = "")
assign(x = nam,
value = read_csv(file = paste("Data/", i, "_m.csv",
sep = ""
)
)
)
}
for (i in part) {
nam <- paste0("m", i)
`Heart Rate` <- get(nam)$`Heart Rate`
time <- get(nam)$Time
df <- tibble(Time = time,
`Heart Rate` = `Heart Rate`,
ID = i
)
assign(paste0("m", i), df)
}
rm(part)
rm(nam)
rm(i)
rm(time)
rm(`Heart Rate`)
df <-
mget(ls(pattern = "m")) %>%
bind_rows()
rm(list = ls(pattern = "m"))
df_dil_aggr <- read_rds(file = "final_data/dilation_aggr.rds")
df_dil_aggr$ID <- as.numeric(df_dil_aggr$ID)
df_hr_dil <- left_join(df, df_dil_aggr,
by = c("ID","Time")
)
df_hr_dil$type = as_factor(ifelse(df_hr_dil$ID < 200,
"Novice",
"Expert"
)
)
df_hr_dil <-
df_hr_dil %>%
group_by(ID) %>%
summarise(Time = Time,
heart_rate_z = scale(`Heart Rate`),
dil_left_z = scale(dil_left),
dil_right_z = scale(dil_right),
type = type)
saveRDS(object = df_hr_dil,
file = "final_data/heart_dilation.rds")
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS)
source(file = "data.wrangling.R")
# Plots
df_heart_all <-
read_rds(file = "final_data/heart_all.rds") |>
mutate(status = factor(status,
levels = c("Expert","Novice"),
labels = c("Expert","Novice")
)
)
df_heart_min <-
read_rds(file = "final_data/heart_min.rds")
df_heart_aggr <-
read_rds(file = "final_data/heart_aggr.rds") |>
mutate(status = factor(status,
levels = c("Novice","Expert"),
labels = c("Novice","Expert")
)
)
plot_flow <-
ggplot(data = df_heart_all,
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`,
group = ID)
) +
geom_line(mapping = aes(color = status),
size = 0.3,
alpha = 1
) +
xlim(0, min(df_heart_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8)  +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x")
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
# scale_linetype_manual(values = c(1, 6)) +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.title = element_blank())
legend <- cowplot::get_legend(plot_flow_leg)
plot_loess <-
ggplot(data = filter(df_heart_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
xlim(0,min(df_heart_min$min)) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
facet_grid(cols = vars(Type),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.background = element_blank(),
strip.text.x = element_blank()
)
plot_box <-
ggplot(data = df_heart_aggr,
mapping = aes(x = Type,
y = mean,
color = status
)
) +
geom_boxplot(color = "darkgrey",
fill = "grey") +
geom_line(data = filter(df_heart_aggr,
status == "Novice"),
mapping = aes(x = Type,
y = mean,
group = as_factor(ID)
),
linetype = 1,
alpha = 0.5
) +
geom_line(data = filter(df_heart_aggr,
status == "Expert"),
mapping = aes(x = Type,
y = mean,
group = as_factor(ID)
),
linetype = 6,
alpha = 0.5
) +
geom_point(size = 2,
alpha = 0.5) +
labs(x = "",
y = "Average Heart Rate\n(in Beats per Minute)") +
scale_color_viridis_d(option = "A",
end = 0.8) +
theme_minimal() +
theme(text = element_text(family = "serif"),
strip.text = element_blank(),
legend.position = "none",
axis.text.x = element_blank()
) +
aes(fill = Type)
lo_mat <- rbind(c(1,1,1,1,1,1,NA),
c(2,2,2,2,2,2,4),
c(3,3,3,3,3,3,NA))
plot_heart <-
grid.arrange(grobs = list(plot_flow, plot_loess, plot_box, legend),
layout_matrix = lo_mat)
plot_heart
df_steps <- read_rds(file = "final_data/steps.rds")
set.seed(5678)
ggplot(data = df_steps,
mapping = aes(x = type,
y = Steps
)
) +
geom_boxplot(mapping = aes(color = type),
fill = "grey",
alpha = 0.6) +
geom_jitter(mapping = aes(color = type),
alpha = 0.9,
width = 0.3) +
scale_color_viridis_d(option = "A",
end = 0.8) +
labs(x = "",
y = "Steps During\nMain Phase") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.title = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
### Validation of steps
# selecting some rows at random with sample_n()
sample_n(df_steps, 6)
# Output:
# Experts: 219, 218, 214
# Novices: 108, 117, 110
ggplot(data = df_steps,
mapping = aes(x = Steps,
y = mean)
) +
geom_point(mapping = aes(shape = type,
color = type),
alpha = 0.7,
size = 2.5) +
geom_smooth(mapping = aes(color = type),
method = "lm",
se = F) +
scale_color_viridis_d(option = "A",
end = 0.8
) +
labs(x = "Steps",
y = "Average Heart Rate\n(in Beats per Minute)"
) +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.title = element_blank(),
)
View(plot_box)
heart_all.rds
heart_all.rds
file = "final_data/heart_all.rds"
df_heart_all <-
read_rds(file = "final_data/heart_all.rds")
View(df_heart_all)
knitr::opts_chunk$set(echo = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS)
source(file = "data.wrangling.R")
