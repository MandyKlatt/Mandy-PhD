labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
ggtitle("Experts' and novices' heart rate per phase") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
legend <- cowplot::get_legend(plot_flow_leg)
# saving plot
ggsave(plot = plot_flow_leg,
filename = "Plots/plot_flow_leg.svg",
height = 5,
width = 8,
units = "in")
############### LOESS PLOT #############
plot_loess <-
ggplot(data = filter(df_heart_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
xlim(0,600) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
facet_grid(cols = vars(Type),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.background = element_blank(),
strip.text.x = element_blank()
)
############### BOX PLOT #############
##### Box 1 Plot #####
plot_box1 <-
ggplot(data = df_heart_aggr,
mapping = aes(x = Type,
y = mean,
color = status
)
) +
geom_boxplot(color = "darkgrey",
fill = "grey") +
geom_line(data = filter(df_heart_aggr,
status == "Novice"),
mapping = aes(x = Type,
y = mean,
group = as_factor(ID)
),
linetype = 1,
alpha = 0.5
) +
geom_line(data = filter(df_heart_aggr,
status == "Expert"),
mapping = aes(x = Type,
y = mean,
group = as_factor(ID)
),
linetype = 6,
alpha = 0.5
) +
geom_point(size = 2,
alpha = 0.5) +
labs(x = "",
y = "Average Heart Rate\n(in Beats per Minute)") +
scale_color_viridis_d(option = "A",
end = 0.8) +
theme_minimal() +
theme(text = element_text(family = "serif"),
strip.text = element_blank(),
legend.position = "none",
axis.text.x = element_blank()
) +
aes(fill = Type)
plot_box1
##### Box 2 Plot #####
plot_box <-
ggplot(data = df_heart_aggr,
mapping = aes(x = Type,
y = mean)) +
geom_boxplot(mapping = aes(fill = status),
outlier.shape = NA) +
geom_point(mapping = aes(shape = status),
alpha = 0.5,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
labs(x ="",
y = "Average Heart Rate\n(in Beats per Minute)") +
ggtitle("Experts' and novices' heart rate per phase") +
scale_fill_brewer(palette  = "RdBu") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_box
# saving plot
ggsave(plot = plot_box,
filename = "Plots/plot_box.svg",
height = 5,
width = 8,
units = "in")
##############
# lo_mat <- rbind(c(1,1,1,1,1,1,NA),
#                 c(2,2,2,2,2,2,4),
#                 c(3,3,3,3,3,3,NA))
#
# plot_heart <-
# grid.arrange(grobs = list(plot_flow, plot_loess, plot_box1, legend),
#              layout_matrix = lo_mat)
#
# plot_heart
# merge demo data and fitbit data
df_anova <- merge(demo.data,
df_heart_aggr,
by="ID")
# clean variable names
df_anova <- df_anova %>% clean_names()
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean,
wid = id,
within = type)
get_anova_table(res.aov)
# aov(data = df_heart_aggr,
#     formula = Type ~ mean) %>%  # Form: AV ~ UV
#   summary(.)
View(res.aov)
get_anova_table(res.aov)
View(res.aov[["Sphericity Corrections"]])
View(res.aov[["ANOVA"]])
View(res.aov)
# check for outliers
df_anova %>%
group_by(type) %>%
identify_outliers(mean)
df_anova %>%
group_by(type) %>%
identify_outliers(mean)
outliers <-
df_anova %>%
group_by(type) %>%
identify_outliers(mean)
outliers
View(outliers)
# check for normality assumption
norm_assump <-
df_anova %>%
group_by(type) %>%
shapiro_test(mean)
View(norm_assump)
ggqqplot(selfesteem, "mean", facet.by = "type")
knitr::opts_chunk$set(echo = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr)
ggqqplot(selfesteem, "mean", facet.by = "type")
ggqqplot(df_anova, "mean", facet.by = "type")
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "type")
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "type")
pwc
bxp <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc),
x ="",
y = "Average Heart Rate\n(in Beats per Minute)") +
geom_point(mapping = aes(shape = status),
alpha = 0.5,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ggtitle("Experts' and novices' heart rate per phase") +
scale_fill_brewer(palette  = "RdBu") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
bxp
bxp +
stat_pvalue_manual(pwc) +
labs(
x ="",
y = "Average Heart Rate\n(in Beats per Minute)",
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
) +
geom_point(mapping = aes(shape = status),
alpha = 0.5,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ggtitle("Experts' and novices' heart rate per phase") +
scale_fill_brewer(palette  = "RdBu") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
bxp
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
) +
geom_point(mapping = aes(shape = status),
alpha = 0.5,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
ggtitle("Experts' and novices' heart rate per phase") +
scale_fill_brewer(palette  = "RdBu") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
bxp
# boxplot
bxp <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "type")
# boxplot
bxp_anova <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# saving plot
ggsave(plot = bxp_anova,
filename = "Plots/bxp_anova.svg",
height = 5,
width = 8,
units = "in")
bxp_anova
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "type")
# boxplot
bxp_anova <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
View(pwc)
# boxplot
bxp_anova <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# saving plot
ggsave(plot = bxp_anova,
filename = "Plots/bxp_anova.svg",
height = 5,
width = 8,
units = "in")
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "type")
# boxplot
bxp_anova <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
View(df_anova)
View(demo.data)
View(df_anova)
df_anova %>%
?anova_test
?anova_test
# anova expert novice
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean,
between = status,
wid = id,
within = type)
get_anova_table(res.aov)
View(res.aov)
View(res.aov[["ANOVA"]])
View(res.aov[["ANOVA"]])
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
View(pwc)
# anova expert novice
res.aov2 <- rstatix::anova_test(data = df_anova,
dv = mean,
between = status,
wid = id,
within = type)
res.aov3 <- anova_test(
data = df_anova,
dv = mean,
wid = id,
within = c(status, type)
)
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# merge demo data and fitbit data
df_anova <- merge(demo.data,
df_heart_aggr,
by="ID")
# clean variable names
df_anova <- df_anova %>% clean_names()
# check for outliers
outliers <-
df_anova %>%
group_by(type) %>%
identify_outliers(mean)
# check for normality assumption --> can be checked by computing Shapiro-Wilk test for each time point. If the data is normally distributed, the p-value should be greater than 0.05
norm_assump <-
df_anova %>%
group_by(type) %>%
shapiro_test(mean)
ggqqplot(df_anova, "mean", facet.by = "type")
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean,
wid = id,
within = type)
get_anova_table(res.aov)
# anova expert novice
res.aov2 <- rstatix::anova_test(data = df_anova,
dv = mean,
between = status,
wid = id,
within = type)
get_anova_table(res.aov2)
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "type")
# boxplot
bxp_anova <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp_anova
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean,
wid = id,
within = type)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# Visualization: box plots with p-values
pwc <-
pwc %>%
add_xy_position(x = "type")
# boxplot
bxp_anova <- ggboxplot(data = df_anova,
x = "type",
y = "mean",
add = "point")
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
bxp_anova
bxp_anova +
stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
