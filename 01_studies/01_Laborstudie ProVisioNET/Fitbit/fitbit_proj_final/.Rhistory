scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
ggtitle("Experts' and novices' heart rate per phase") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
legend <- cowplot::get_legend(plot_flow_leg)
# saving plot
ggsave(plot = plot_flow_leg,
filename = "Plots/plot_flow_leg.svg",
height = 5,
width = 8,
units = "in")
############### LOESS PLOT #############
plot_loess <-
ggplot(data = filter(df_heart_all),
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`
)
) +
stat_smooth(geom = "line",
mapping = aes(color = status),
method = "loess",
se = FALSE) +
xlim(0,600) +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
facet_grid(cols = vars(Type),
scales = "free_x",
) +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.background = element_blank(),
strip.text.x = element_blank()
)
############### BOX PLOT #############
##### Box 1 Plot #####
plot_box1 <-
ggplot(data = df_heart_aggr,
mapping = aes(x = Type,
y = mean,
color = status
)
) +
geom_boxplot(color = "darkgrey",
fill = "grey") +
geom_line(data = filter(df_heart_aggr,
status == "Novice"),
mapping = aes(x = Type,
y = mean,
group = as_factor(ID)
),
linetype = 1,
alpha = 0.5
) +
geom_line(data = filter(df_heart_aggr,
status == "Expert"),
mapping = aes(x = Type,
y = mean,
group = as_factor(ID)
),
linetype = 6,
alpha = 0.5
) +
geom_point(size = 2,
alpha = 0.5) +
labs(x = "",
y = "Average Heart Rate\n(in Beats per Minute)") +
scale_color_viridis_d(option = "A",
end = 0.8) +
theme_minimal() +
theme(text = element_text(family = "serif"),
strip.text = element_blank(),
legend.position = "none",
axis.text.x = element_blank()
) +
aes(fill = Type)
plot_box1
##### Box 2 Plot #####
plot_box <-
ggplot(data = df_heart_aggr,
mapping = aes(x = Type,
y = mean)) +
geom_boxplot(mapping = aes(fill = status),
outlier.shape = NA) +
geom_point(mapping = aes(shape = status),
alpha = 0.5,
position = position_jitter(seed = 1,
width = 0.1,
height = 0.1)) +
labs(x ="",
y = "Average Heart Rate\n(in Beats per Minute)") +
ggtitle("Experts' and novices' heart rate per phase") +
scale_fill_brewer(palette  = "RdBu") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold"))
plot_box
# saving plot
ggsave(plot = plot_box,
filename = "Plots/plot_box.svg",
height = 5,
width = 8,
units = "in")
##############
# lo_mat <- rbind(c(1,1,1,1,1,1,NA),
#                 c(2,2,2,2,2,2,4),
#                 c(3,3,3,3,3,3,NA))
#
# plot_heart <-
# grid.arrange(grobs = list(plot_flow, plot_loess, plot_box1, legend),
#              layout_matrix = lo_mat)
#
# plot_heart
knitr::opts_chunk$set(echo = FALSE)
# Packages
# install.packages("needs")
# Choose "No"
library(needs)
needs(tidyverse,
janitor,
lubridate,
readxl,
ggthemes,
gridExtra,
imputeTS,
DescTools,
cowplot,
rstatix,
ggpubr)
# fitbit data
source(file = "data.wrangling.R")
# demographic data
# prepare data (selected from questionnaire data)
demo.data <- readxl::read_xlsx("./Data/data_empschul_labor_lehrperson.xlsx")
# select relevant columns
demo.data <- demo.data %>% select(LI02_01_1,
LI03_01,
LI04_01,
LI06_05)
# rename columns
demo.data <- rename(demo.data, c("ID" = "LI06_05",
"Gender" = "LI02_01_1",
"Age" = "LI03_01",
"Teaching Experience" = "LI04_01"))
# exclude cases (no fitbit data)
demo.data <- demo.data %>% filter(!ID %in% c("126",
"132"
)
)
# aggregate data
df_heart_all <-
read_rds(file = "final_data/heart_all.rds") |>
mutate(status = factor(status,
levels = c("Expert","Novice"),
labels = c("Expert","Novice")
)
)
df_heart_min <-
read_rds(file = "final_data/heart_min.rds")
df_heart_aggr <-
read_rds(file = "final_data/heart_aggr.rds") |>
mutate(status = factor(status,
levels = c("Novice","Expert"),
labels = c("Novice","Expert")
)
)
# Mean, SD and Cohen D for experts & novices
# novices
mean_nov <-
df_heart_aggr %>%
filter(status == "Novice" ) %>%
pull(mean) %>%
mean() %>%
round(., digits = 0)
sd_nov <-
df_heart_aggr %>%
filter(status == "Novice") %>%
pull(mean) %>%
sd() %>%
round(., digits = 0)
# experts
mean_exp <-
df_heart_aggr %>%
filter(status == "Expert") %>%
pull(mean) %>%
mean() %>%
round(., digits = 0)
sd_exp <-
df_heart_aggr %>%
filter(status == "Expert") %>%
pull(mean) %>%
sd() %>%
round(., digits = 0)
# effect size for expertise differences
d_heartrate <- CohenD(x = df_heart_aggr$mean[df_heart_aggr$status == "Expert"],
y = df_heart_aggr$mean[df_heart_aggr$status == "Novice"],
na.rm = TRUE)
# t-test for expertise differences
t_heartrate <-
t.test(x = df_heart_aggr$mean[df_heart_aggr$status == "Expert"],
y = df_heart_aggr$mean[df_heart_aggr$status == "Novice"])
# t-test for expertise differences
t.test(x = df_heart_aggr$mean[df_heart_aggr$status == "Expert"],
y = df_heart_aggr$mean[df_heart_aggr$status == "Novice"])
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
ggtitle("Experts' and novices' heart rate per phase") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
plot_flow_leg
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate\n(in Schläge pro Minute)") +
ggtitle("Herzrate von Expert:innen und Noviz:innen pro Phase") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
plot_flow_leg
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate\n(in Schläge pro Minute)") +
ggtitle("Herzrate in jeweiligen Phase als Expertiseunterschied") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
plot_flow_leg
# merge demo data and fitbit data
df_anova <- merge(demo.data,
df_heart_aggr,
by="ID")
# clean variable names
df_anova <- df_anova %>% clean_names()
# check for outliers
outliers <-
df_anova %>%
group_by(type) %>%
identify_outliers(mean)
# check for normality assumption --> can be checked by computing Shapiro-Wilk test for each time point. If the data is normally distributed, the p-value should be greater than 0.05
norm_assump <-
df_anova %>%
group_by(type) %>%
shapiro_test(mean)
ggqqplot(df_anova, "mean", facet.by = "type")
# anova
res.aov <- rstatix::anova_test(data = df_anova,
dv = mean,
wid = id,
within = type)
get_anova_table(res.aov)
View(res.aov)
View(res.aov[["ANOVA"]])
# pairwise comparisons
pwc <- df_anova %>%
pairwise_t_test(
mean ~ type, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
View(pwc)
# anova expert novice
res.aov2 <- rstatix::anova_test(data = df_anova,
dv = mean,
between = status,
wid = id,
within = type)
get_anova_table(res.aov2)
View(res.aov2)
View(res.aov2[["ANOVA"]])
View(pwc)
View(res.aov2)
View(res.aov2[["ANOVA"]])
View(res.aov2[["ANOVA"]])
############## FLOW PLOT #############
plot_flow <-
ggplot(data = df_heart_all,
mapping = aes(x = as.numeric(Time),
y = `Heart Rate`,
group = ID)
) +
geom_line(mapping = aes(color = status),
size = 0.3,
alpha = 1
) +
xlim(0, 600) +
scale_color_viridis_d(option = "A",
end = 0.8)  +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Time (in Seconds)",
y = "Heart Rate\n(in Beats per Minute)") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.position = "none",
strip.text = element_text(size = 16)) +
facet_grid(cols = vars(Type),
scales = "free_x") +
scale_fill_discrete(
limits = c("Expert", "Novice"),
labels = c("Expert:innen", "Noviz:innen")
)
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate\n(in Schläge pro Minute)") +
ggtitle("Herzrate in jeweiligen Phase als Expertiseunterschied") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x") +
scale_fill_discrete(
limits = c("Expert", "Novice"),
labels = c("Expert:innen", "Noviz:innen")
)
plot_flow_leg
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate\n(in Schläge pro Minute)") +
ggtitle("Herzrate in jeweiligen Phase als Expertiseunterschied") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
legend <- cowplot::get_legend(plot_flow_leg)
# saving plot
ggsave(plot = plot_flow_leg,
filename = "Plots/plot_flow_leg.svg",
height = 5,
width = 8,
units = "in")
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate\n(in Schläge pro Minute)") +
ggtitle("Herzrate in jeweiliger Phase als Expertiseunterschied") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
legend <- cowplot::get_legend(plot_flow_leg)
legend <- cowplot::get_legend(plot_flow_leg)
# saving plot
ggsave(plot = plot_flow_leg,
filename = "Plots/plot_flow_leg.svg",
height = 5,
width = 8,
units = "in")
plot_flow_leg <-
ggplot(data = df_heart_all,
mapping = aes(x = Time,
y = `Heart Rate`
)
) +
xlim(0, 600) +
geom_smooth(mapping = aes(color = status),
method = "loess") +
scale_color_viridis_d(option = "A",
end = 0.8) +
scale_linetype_manual(values = c(1, 6)) +
labs(x = "Zeit (in Sekunden)",
y = "Herzrate\n(in Schläge pro Minute)") +
ggtitle("Herzrate in jeweiliger Phase mit Expertiseunterschied") +
theme_minimal() +
theme(text = element_text(family = "serif"),
legend.text = element_text(size = 15),
legend.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 16),
plot.title = element_text(size = 20,
face = "bold")) +
facet_grid(cols = vars(Type),
scales = "free_x")
legend <- cowplot::get_legend(plot_flow_leg)
legend <- cowplot::get_legend(plot_flow_leg)
# saving plot
ggsave(plot = plot_flow_leg,
filename = "Plots/plot_flow_leg.svg",
height = 5,
width = 8,
units = "in")
